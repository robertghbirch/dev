/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: p_wire_protocol.proto */

#ifndef PROTOBUF_C_p_5fwire_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_C_p_5fwire_5fprotocol_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Frl__Device__Wireformat__ToHostMsg Frl__Device__Wireformat__ToHostMsg;
typedef struct _Frl__Device__Wireformat__EventMsg Frl__Device__Wireformat__EventMsg;
typedef struct _Frl__Device__Wireformat__TaiTime Frl__Device__Wireformat__TaiTime;
typedef struct _Frl__Device__Wireformat__Acc Frl__Device__Wireformat__Acc;
typedef struct _Frl__Device__Wireformat__Gyro Frl__Device__Wireformat__Gyro;
typedef struct _Frl__Device__Wireformat__Mag Frl__Device__Wireformat__Mag;
typedef struct _Frl__Device__Wireformat__Baro Frl__Device__Wireformat__Baro;
typedef struct _Frl__Device__Wireformat__Temp Frl__Device__Wireformat__Temp;
typedef struct _Frl__Device__Wireformat__Sync Frl__Device__Wireformat__Sync;
typedef struct _Frl__Device__Wireformat__FirstPixel Frl__Device__Wireformat__FirstPixel;
typedef struct _Frl__Device__Wireformat__Fan Frl__Device__Wireformat__Fan;
typedef struct _Frl__Device__Wireformat__Button Frl__Device__Wireformat__Button;
typedef struct _Frl__Device__Wireformat__Encoder Frl__Device__Wireformat__Encoder;
typedef struct _Frl__Device__Wireformat__VFMotor Frl__Device__Wireformat__VFMotor;
typedef struct _Frl__Device__Wireformat__Timer Frl__Device__Wireformat__Timer;
typedef struct _Frl__Device__Wireformat__MainBoard Frl__Device__Wireformat__MainBoard;
typedef struct _Frl__Device__Wireformat__DeviceInfo Frl__Device__Wireformat__DeviceInfo;
typedef struct _Frl__Device__Wireformat__FwVersion Frl__Device__Wireformat__FwVersion;
typedef struct _Frl__Device__Wireformat__HwVersion Frl__Device__Wireformat__HwVersion;
typedef struct _Frl__Device__Wireformat__ProtocolVersion Frl__Device__Wireformat__ProtocolVersion;
typedef struct _Frl__Device__Wireformat__MfgDate Frl__Device__Wireformat__MfgDate;
typedef struct _Frl__Device__Wireformat__DeviceSerial Frl__Device__Wireformat__DeviceSerial;
typedef struct _Frl__Device__Wireformat__ToDeviceMsg Frl__Device__Wireformat__ToDeviceMsg;
typedef struct _Frl__Device__Wireformat__ReplyMsg Frl__Device__Wireformat__ReplyMsg;
typedef struct _Frl__Device__Wireformat__DispDriverCfg Frl__Device__Wireformat__DispDriverCfg;
typedef struct _Frl__Device__Wireformat__DispDriverCfgs Frl__Device__Wireformat__DispDriverCfgs;
typedef struct _Frl__Device__Wireformat__GyroCfg Frl__Device__Wireformat__GyroCfg;
typedef struct _Frl__Device__Wireformat__GyroCfgs Frl__Device__Wireformat__GyroCfgs;
typedef struct _Frl__Device__Wireformat__AccCfg Frl__Device__Wireformat__AccCfg;
typedef struct _Frl__Device__Wireformat__AccCfgs Frl__Device__Wireformat__AccCfgs;
typedef struct _Frl__Device__Wireformat__BaroCfg Frl__Device__Wireformat__BaroCfg;
typedef struct _Frl__Device__Wireformat__BaroCfgs Frl__Device__Wireformat__BaroCfgs;
typedef struct _Frl__Device__Wireformat__FanCfg Frl__Device__Wireformat__FanCfg;
typedef struct _Frl__Device__Wireformat__FanCfgs Frl__Device__Wireformat__FanCfgs;
typedef struct _Frl__Device__Wireformat__TimerCfg Frl__Device__Wireformat__TimerCfg;
typedef struct _Frl__Device__Wireformat__TrigCfg Frl__Device__Wireformat__TrigCfg;
typedef struct _Frl__Device__Wireformat__TrigChCfg Frl__Device__Wireformat__TrigChCfg;
typedef struct _Frl__Device__Wireformat__SyncCfg Frl__Device__Wireformat__SyncCfg;
typedef struct _Frl__Device__Wireformat__SyncChCfg Frl__Device__Wireformat__SyncChCfg;
typedef struct _Frl__Device__Wireformat__VFMotorCfg Frl__Device__Wireformat__VFMotorCfg;
typedef struct _Frl__Device__Wireformat__VFMotorCfgs Frl__Device__Wireformat__VFMotorCfgs;
typedef struct _Frl__Device__Wireformat__VFMotorCmd Frl__Device__Wireformat__VFMotorCmd;
typedef struct _Frl__Device__Wireformat__VFMotorCmds Frl__Device__Wireformat__VFMotorCmds;


/* --- enums --- */

typedef enum _Frl__Device__Wireformat__Sync__DIR {
  FRL__DEVICE__WIREFORMAT__SYNC__DIR__UNKNOWN = 0,
  FRL__DEVICE__WIREFORMAT__SYNC__DIR__RAISING = 1,
  FRL__DEVICE__WIREFORMAT__SYNC__DIR__FALLING = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__SYNC__DIR)
} Frl__Device__Wireformat__Sync__DIR;
typedef enum _Frl__Device__Wireformat__FirstPixel__LR {
  FRL__DEVICE__WIREFORMAT__FIRST_PIXEL__LR__UNKNOWN = 0,
  FRL__DEVICE__WIREFORMAT__FIRST_PIXEL__LR__LEFT = 1,
  FRL__DEVICE__WIREFORMAT__FIRST_PIXEL__LR__RIGHT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__FIRST_PIXEL__LR)
} Frl__Device__Wireformat__FirstPixel__LR;
typedef enum _Frl__Device__Wireformat__VFMotor__LR {
  FRL__DEVICE__WIREFORMAT__VFMOTOR__LR__UNKNOWN = 0,
  FRL__DEVICE__WIREFORMAT__VFMOTOR__LR__LEFT = 1,
  FRL__DEVICE__WIREFORMAT__VFMOTOR__LR__RIGHT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__VFMOTOR__LR)
} Frl__Device__Wireformat__VFMotor__LR;
typedef enum _Frl__Device__Wireformat__VFMotor__Event {
  FRL__DEVICE__WIREFORMAT__VFMOTOR__EVENT__NONE = 0,
  FRL__DEVICE__WIREFORMAT__VFMOTOR__EVENT__HOMING_COMPLETE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__VFMOTOR__EVENT)
} Frl__Device__Wireformat__VFMotor__Event;
typedef enum _Frl__Device__Wireformat__Timer__Source {
  FRL__DEVICE__WIREFORMAT__TIMER__SOURCE__UNKNOWN = 0,
  FRL__DEVICE__WIREFORMAT__TIMER__SOURCE__INTERNAL = 1,
  FRL__DEVICE__WIREFORMAT__TIMER__SOURCE__EXTRNAL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__TIMER__SOURCE)
} Frl__Device__Wireformat__Timer__Source;
typedef enum _Frl__Device__Wireformat__Timer__Status {
  FRL__DEVICE__WIREFORMAT__TIMER__STATUS__UNDEFINED = 0,
  FRL__DEVICE__WIREFORMAT__TIMER__STATUS__ADJUSTING = 1,
  FRL__DEVICE__WIREFORMAT__TIMER__STATUS__TRACKING = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__TIMER__STATUS)
} Frl__Device__Wireformat__Timer__Status;
typedef enum _Frl__Device__Wireformat__MainBoard__Status {
  FRL__DEVICE__WIREFORMAT__MAIN_BOARD__STATUS__UNKNOWN = 0,
  FRL__DEVICE__WIREFORMAT__MAIN_BOARD__STATUS__BOOTING = 1,
  FRL__DEVICE__WIREFORMAT__MAIN_BOARD__STATUS__OK = 2,
  FRL__DEVICE__WIREFORMAT__MAIN_BOARD__STATUS__TERMINATING = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__MAIN_BOARD__STATUS)
} Frl__Device__Wireformat__MainBoard__Status;
typedef enum _Frl__Device__Wireformat__DispDriverCfg__DispDriverMode {
  FRL__DEVICE__WIREFORMAT__DISP_DRIVER_CFG__DISP_DRIVER_MODE__GLOBAL = 0,
  FRL__DEVICE__WIREFORMAT__DISP_DRIVER_CFG__DISP_DRIVER_MODE__ROLLING = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__DISP_DRIVER_CFG__DISP_DRIVER_MODE)
} Frl__Device__Wireformat__DispDriverCfg__DispDriverMode;
typedef enum _Frl__Device__Wireformat__TimerCfg__Source {
  FRL__DEVICE__WIREFORMAT__TIMER_CFG__SOURCE__UNKNOWN = 0,
  FRL__DEVICE__WIREFORMAT__TIMER_CFG__SOURCE__INTERNAL = 1,
  FRL__DEVICE__WIREFORMAT__TIMER_CFG__SOURCE__EXTERNAL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__TIMER_CFG__SOURCE)
} Frl__Device__Wireformat__TimerCfg__Source;
typedef enum _Frl__Device__Wireformat__TrigCfg__Action {
  FRL__DEVICE__WIREFORMAT__TRIG_CFG__ACTION__START_ALL_ACTIVE = 0,
  FRL__DEVICE__WIREFORMAT__TRIG_CFG__ACTION__STOP_ALL_ACTIVE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__TRIG_CFG__ACTION)
} Frl__Device__Wireformat__TrigCfg__Action;
typedef enum _Frl__Device__Wireformat__SyncCfg__Action {
  FRL__DEVICE__WIREFORMAT__SYNC_CFG__ACTION__START_ALL_ACTIVE = 0,
  FRL__DEVICE__WIREFORMAT__SYNC_CFG__ACTION__STOP_ALL_ACTIVE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__SYNC_CFG__ACTION)
} Frl__Device__Wireformat__SyncCfg__Action;
typedef enum _Frl__Device__Wireformat__SyncChCfg__DIR {
  FRL__DEVICE__WIREFORMAT__SYNC_CH_CFG__DIR__NOTACTIVE = 0,
  /*
   * raising edge
   */
  FRL__DEVICE__WIREFORMAT__SYNC_CH_CFG__DIR__RAISING = 1,
  /*
   * falling edge
   */
  FRL__DEVICE__WIREFORMAT__SYNC_CH_CFG__DIR__FALLING = 2,
  /*
   * raising and falling edges
   */
  FRL__DEVICE__WIREFORMAT__SYNC_CH_CFG__DIR__BOTH = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FRL__DEVICE__WIREFORMAT__SYNC_CH_CFG__DIR)
} Frl__Device__Wireformat__SyncChCfg__DIR;

/* --- messages --- */

typedef enum {
  FRL__DEVICE__WIREFORMAT__TO_HOST_MSG__PAYLOAD__NOT_SET = 0,
  FRL__DEVICE__WIREFORMAT__TO_HOST_MSG__PAYLOAD_TEL = 1,
  FRL__DEVICE__WIREFORMAT__TO_HOST_MSG__PAYLOAD_REPLY = 2,
} Frl__Device__Wireformat__ToHostMsg__PayloadCase;

/*
 * The messages from the device to the host PC are of two types:
 * - event messages that are streaming and that can be turned on and off
 * - replies to a specific control command from the host
 */
struct  _Frl__Device__Wireformat__ToHostMsg
{
  ProtobufCMessage base;
  Frl__Device__Wireformat__ToHostMsg__PayloadCase payload_case;
  union {
    Frl__Device__Wireformat__EventMsg *tel;
    Frl__Device__Wireformat__ReplyMsg *reply;
  };
};
#define FRL__DEVICE__WIREFORMAT__TO_HOST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__to_host_msg__descriptor) \
    , FRL__DEVICE__WIREFORMAT__TO_HOST_MSG__PAYLOAD__NOT_SET, {0} }


/*
 * Messages streaming from the device, mostly sensor data, and other type of timely events. 
 * This type of message must always contain a time. If two or more data sources produce data symultaneously (e.g. Acc, Gyro, Temp in the IMU)
 * it is preferrable for them to be packed in the same EventMsg.
 */
struct  _Frl__Device__Wireformat__EventMsg
{
  ProtobufCMessage base;
  Frl__Device__Wireformat__TaiTime *ts;
  size_t n_accs;
  Frl__Device__Wireformat__Acc **accs;
  size_t n_gyros;
  Frl__Device__Wireformat__Gyro **gyros;
  size_t n_mags;
  Frl__Device__Wireformat__Mag **mags;
  size_t n_temps;
  Frl__Device__Wireformat__Temp **temps;
  size_t n_baros;
  Frl__Device__Wireformat__Baro **baros;
  size_t n_syncs;
  Frl__Device__Wireformat__Sync **syncs;
  size_t n_fps;
  Frl__Device__Wireformat__FirstPixel **fps;
  size_t n_fans;
  Frl__Device__Wireformat__Fan **fans;
  size_t n_buttons;
  Frl__Device__Wireformat__Button **buttons;
  size_t n_encoders;
  Frl__Device__Wireformat__Encoder **encoders;
  size_t n_vfs;
  Frl__Device__Wireformat__VFMotor **vfs;
  size_t n_mbs;
  Frl__Device__Wireformat__MainBoard **mbs;
  size_t n_timer;
  Frl__Device__Wireformat__Timer **timer;
};
#define FRL__DEVICE__WIREFORMAT__EVENT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__event_msg__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * Time, fixed precision format 
 */
struct  _Frl__Device__Wireformat__TaiTime
{
  ProtobufCMessage base;
  /*
   * seconds (integer 40bits)
   */
  protobuf_c_boolean has_s;
  uint64_t s;
  /*
   * nanoseconds (fractional 32bits)
   */
  protobuf_c_boolean has_ns;
  uint32_t ns;
};
#define FRL__DEVICE__WIREFORMAT__TAI_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__tai_time__descriptor) \
    , 0,0, 0,0 }


/*
 * Accelerometer
 */
struct  _Frl__Device__Wireformat__Acc
{
  ProtobufCMessage base;
  /*
   * unique accelerometer id (range 0x010000 - 0x01ffff)
   */
  uint32_t id;
  /*
   * unit as per sensor's datasheet (a single axis sensors uses only x)
   */
  protobuf_c_boolean has_raw_x;
  uint32_t raw_x;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw_y;
  uint32_t raw_y;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw_z;
  uint32_t raw_z;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__ACC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__acc__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * Gyroscope
 */
struct  _Frl__Device__Wireformat__Gyro
{
  ProtobufCMessage base;
  /*
   * unique gyroscope id (range 0x020000 - 0x02ffff)
   */
  uint32_t id;
  /*
   * unit as per sensor's datasheet (a single axis sensors uses only x)
   */
  protobuf_c_boolean has_raw_x;
  uint32_t raw_x;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw_y;
  uint32_t raw_y;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw_z;
  uint32_t raw_z;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__GYRO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__gyro__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * Magnetometer
 */
struct  _Frl__Device__Wireformat__Mag
{
  ProtobufCMessage base;
  /*
   * unique magnetometer id (range 0x030000 - 0x03ffff)
   */
  uint32_t id;
  /*
   * unit as per sensor's datasheet (a single axis sensors uses only x)
   */
  protobuf_c_boolean has_raw_x;
  uint32_t raw_x;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw_y;
  uint32_t raw_y;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw_z;
  uint32_t raw_z;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__MAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__mag__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * Barometer reading
 */
struct  _Frl__Device__Wireformat__Baro
{
  ProtobufCMessage base;
  /*
   * unique barometer id (range 0x040000 - 0x04ffff)
   */
  uint32_t id;
  /*
   * unit as per sensor's datasheet (a single axis sensors uses only x)
   */
  protobuf_c_boolean has_raw;
  uint32_t raw;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__BARO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__baro__descriptor) \
    , 0, 0,0, 0,0, NULL }


/*
 * Temperature sensors, this includes:
 * - discrete sensors on i2c
 * - thermistors (e.g. in cameras)
 * - in die (e.g. IMU, barometer, MCU)
 */
struct  _Frl__Device__Wireformat__Temp
{
  ProtobufCMessage base;
  /*
   * unique temperature sensor id (range 0x050000 - 0x05ffff)
   */
  uint32_t id;
  /*
   * unit as per sensor's datasheet
   */
  protobuf_c_boolean has_raw;
  uint32_t raw;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__TEMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__temp__descriptor) \
    , 0, 0,0, 0,0, NULL }


/*
 * Input captured by the SST
 */
struct  _Frl__Device__Wireformat__Sync
{
  ProtobufCMessage base;
  /*
   * same as timer id
   */
  uint32_t id;
  /*
   * channel number
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   * RAISING of FALLING
   */
  protobuf_c_boolean has_dir;
  Frl__Device__Wireformat__Sync__DIR dir;
  /*
   * number of syncs for this channel since last reset
   */
  protobuf_c_boolean has_count;
  uint32_t count;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__SYNC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__sync__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * Value of first pixel in the display panel.
 * At the start of illumination the top left pixel of the display panel is sent back to the host
 */
struct  _Frl__Device__Wireformat__FirstPixel
{
  ProtobufCMessage base;
  /*
   * unique display id (range 0x070000 - 0x07ffff)
   */
  uint32_t id;
  /*
   * wether this is the left or right display
   */
  protobuf_c_boolean has_which;
  Frl__Device__Wireformat__FirstPixel__LR which;
  /*
   * pixel value returned by the display itself
   */
  protobuf_c_boolean has_value;
  uint32_t value;
  /*
   * number of FirstPixel messages for this display since last reset
   */
  protobuf_c_boolean has_count;
  uint32_t count;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description   
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__FIRST_PIXEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__first_pixel__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * Fan speed returned when fan turns on an then every 5s
 */
struct  _Frl__Device__Wireformat__Fan
{
  ProtobufCMessage base;
  /*
   * unique fan id (range 0x080000 - 0x08ffff)
   */
  uint32_t id;
  /*
   * counts
   */
  protobuf_c_boolean has_raw_speed;
  uint32_t raw_speed;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__FAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__fan__descriptor) \
    , 0, 0,0, 0,0, NULL }


/*
 * Button state, returned when a button state changes
 */
struct  _Frl__Device__Wireformat__Button
{
  ProtobufCMessage base;
  /*
   * unique button id (range 0x090000 - 0x09ffff) 
   */
  uint32_t id;
  /*
   * only used if not a pushbutton
   */
  protobuf_c_boolean has_value;
  protobuf_c_boolean value;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__BUTTON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__button__descriptor) \
    , 0, 0,0, 0,0, NULL }


/*
 * Encoder value
 */
struct  _Frl__Device__Wireformat__Encoder
{
  ProtobufCMessage base;
  /*
   * unique encoder id (range 0x0a0000 - 0x0affff)
   */
  uint32_t id;
  /*
   * counts
   */
  protobuf_c_boolean has_raw;
  uint32_t raw;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__ENCODER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__encoder__descriptor) \
    , 0, 0,0, 0,0, NULL }


struct  _Frl__Device__Wireformat__VFMotor
{
  ProtobufCMessage base;
  uint32_t id;
  /*
   * unique motor loop id (range 0x0b0000 - 0x0bffff) 
   */
  protobuf_c_boolean has_which;
  Frl__Device__Wireformat__VFMotor__LR which;
  /*
   * motor current position. 
   */
  protobuf_c_boolean has_position_cnts;
  uint32_t position_cnts;
  /*
   * motor target position.
   */
  protobuf_c_boolean has_set_point_cnts;
  uint32_t set_point_cnts;
  /*
   * motor current rate.
   */
  protobuf_c_boolean has_rate_rpm;
  float rate_rpm;
  /*
   * error condition, 0 = OK (use this to report motor driver IC errors)
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
  /*
   * does not require posiiton and set point to be set.
   */
  protobuf_c_boolean has_event;
  Frl__Device__Wireformat__VFMotor__Event event;
  /*
   * value of 0ptical flag
   */
  protobuf_c_boolean has_flag;
  protobuf_c_boolean flag;
};
#define FRL__DEVICE__WIREFORMAT__VFMOTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__vfmotor__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0 }


/*
 * State of timer, returned when state changes.
 */
struct  _Frl__Device__Wireformat__Timer
{
  ProtobufCMessage base;
  /*
   * unique timer id (range 0x060000 - 0x06ffff)
   */
  uint32_t id;
  /*
   * timer source External PPS or Internal oscillator.
   */
  protobuf_c_boolean has_src;
  Frl__Device__Wireformat__Timer__Source src;
  /*
   * tracking loop state machine.
   */
  protobuf_c_boolean has_status;
  Frl__Device__Wireformat__Timer__Status status;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__TIMER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__timer__descriptor) \
    , 0, 0,0, 0,0, 0,0, NULL }


/*
 * State of mainboard, returned when state changes.
 */
struct  _Frl__Device__Wireformat__MainBoard
{
  ProtobufCMessage base;
  /*
   * unique mainboard id (range 0x0c0000 - 0x0cffff) 
   */
  uint32_t id;
  /*
   * state of mainboard during boot or shutdown process.
   */
  Frl__Device__Wireformat__MainBoard__Status status;
  /*
   * error condition, 0 = OK
   */
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  /*
   * human readable error description
   */
  char *error_msg;
};
#define FRL__DEVICE__WIREFORMAT__MAIN_BOARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__main_board__descriptor) \
    , 0, 0, 0,0, NULL }


/*
 * Overall info message for the device
 */
struct  _Frl__Device__Wireformat__DeviceInfo
{
  ProtobufCMessage base;
  /*
   * unique device serial number
   */
  Frl__Device__Wireformat__DeviceSerial *serial;
  /*
   * fw version
   */
  Frl__Device__Wireformat__FwVersion *fw_ver;
  /*
   * version of this messaging protocol
   */
  Frl__Device__Wireformat__ProtocolVersion *p_ver;
  /*
   * manufacturing date/time
   */
  Frl__Device__Wireformat__MfgDate *mfg_date;
  /*
   * hw version
   */
  Frl__Device__Wireformat__HwVersion *hw_ver;
};
#define FRL__DEVICE__WIREFORMAT__DEVICE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__device_info__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


/*
 * Version number for running FW
 */
struct  _Frl__Device__Wireformat__FwVersion
{
  ProtobufCMessage base;
  /*
   * major version number
   */
  protobuf_c_boolean has_major;
  uint32_t major;
  /*
   * minor version number
   */
  protobuf_c_boolean has_minor;
  uint32_t minor;
  /*
   * git or hg sha, 8 bytes
   */
  protobuf_c_boolean has_sha;
  ProtobufCBinaryData sha;
};
#define FRL__DEVICE__WIREFORMAT__FW_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__fw_version__descriptor) \
    , 0,0, 0,0, 0,{0,NULL} }


/*
 * Version number for current HW
 */
struct  _Frl__Device__Wireformat__HwVersion
{
  ProtobufCMessage base;
  /*
   * hw rev major
   */
  protobuf_c_boolean has_major;
  uint32_t major;
  /*
   * hw rev minor
   */
  protobuf_c_boolean has_minor;
  uint32_t minor;
  /*
   * human readable model string
   */
  char *model;
};
#define FRL__DEVICE__WIREFORMAT__HW_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__hw_version__descriptor) \
    , 0,0, 0,0, NULL }


/*
 * Version number for the communication protocol, defined in this document.
 */
struct  _Frl__Device__Wireformat__ProtocolVersion
{
  ProtobufCMessage base;
  /*
   * major version number
   */
  protobuf_c_boolean has_major;
  uint32_t major;
  /*
   * minor version number
   */
  protobuf_c_boolean has_minor;
  uint32_t minor;
};
#define FRL__DEVICE__WIREFORMAT__PROTOCOL_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__protocol_version__descriptor) \
    , 0,0, 0,0 }


/*
 * Manufacturing Date message
 */
struct  _Frl__Device__Wireformat__MfgDate
{
  ProtobufCMessage base;
  /*
   * hour (24h format)
   */
  protobuf_c_boolean has_hour;
  uint32_t hour;
  /*
   * min
   */
  protobuf_c_boolean has_min;
  uint32_t min;
  /*
   * day
   */
  protobuf_c_boolean has_day;
  uint32_t day;
  /*
   * month
   */
  protobuf_c_boolean has_month;
  uint32_t month;
  /*
   * year
   */
  protobuf_c_boolean has_year;
  uint32_t year;
};
#define FRL__DEVICE__WIREFORMAT__MFG_DATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__mfg_date__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * Unique serial number across devices, a block might be reserved for a specific device type.
 */
struct  _Frl__Device__Wireformat__DeviceSerial
{
  ProtobufCMessage base;
  /*
   * at least 4 bytes. 
   */
  protobuf_c_boolean has_hex;
  ProtobufCBinaryData hex;
};
#define FRL__DEVICE__WIREFORMAT__DEVICE_SERIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__device_serial__descriptor) \
    , 0,{0,NULL} }


typedef enum {
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD__NOT_SET = 0,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_DISPLAY_CFGS = 2,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_GYRO_CFGS = 3,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_ACC_CFGS = 4,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_BARO_CFGS = 5,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_FAN_CFGS = 6,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_TIMER_CFG = 7,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_TRIG_CFG = 8,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_SYNC_CFG = 9,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_SERIAL = 10,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_VFMOTOR_CFGS = 11,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_SET_VFMOTOR_CMD = 12,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_DISPLAY_CFGS = 21,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_GYRO_CFGS = 22,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_ACC_CFGS = 23,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_BARO_CFGS = 24,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_FANS_CFGS = 25,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_TIMER_CFG = 26,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_TRIG_CFG = 27,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_SYNC_CFG = 28,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_DEVICE_SERIAL = 29,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_BOARD_INFO = 30,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_PROTOCOL_VERSION = 31,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_FW_VERSION = 32,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_HW_VERSION = 33,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_MFG_DATE = 34,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_VFMOTOR_STATES = 35,
  FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD_GET_VFMOTOR_CFGS = 36,
} Frl__Device__Wireformat__ToDeviceMsg__CmdCase;

/*
 * The messages to the device can either be a configuration to be set or a command to execute.
 * The device must reply to every ToDeviceMsg message.
 * The sender provides a cmd_id (generally just a counter) that allows to pair a ReplyMsg with a ToDeviceMsg (the replies are asyncronous and might be out of order). 
 */
struct  _Frl__Device__Wireformat__ToDeviceMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cmd_id;
  uint32_t cmd_id;
  Frl__Device__Wireformat__ToDeviceMsg__CmdCase cmd_case;
  union {
    Frl__Device__Wireformat__DispDriverCfgs *set_display_cfgs;
    Frl__Device__Wireformat__GyroCfgs *set_gyro_cfgs;
    Frl__Device__Wireformat__AccCfgs *set_acc_cfgs;
    Frl__Device__Wireformat__BaroCfgs *set_baro_cfgs;
    Frl__Device__Wireformat__FanCfgs *set_fan_cfgs;
    Frl__Device__Wireformat__TimerCfg *set_timer_cfg;
    Frl__Device__Wireformat__TrigCfg *set_trig_cfg;
    Frl__Device__Wireformat__SyncCfg *set_sync_cfg;
    Frl__Device__Wireformat__DeviceSerial *set_serial;
    Frl__Device__Wireformat__VFMotorCfgs *set_vfmotor_cfgs;
    Frl__Device__Wireformat__VFMotorCmds *set_vfmotor_cmd;
    /*
     * shall return all DiplayCfgs
     */
    protobuf_c_boolean get_display_cfgs;
    /*
     * shall return all GyroCfgs
     */
    protobuf_c_boolean get_gyro_cfgs;
    /*
     * shall return all AccCfgs
     */
    protobuf_c_boolean get_acc_cfgs;
    /*
     * shall return all BaroCfgs
     */
    protobuf_c_boolean get_baro_cfgs;
    /*
     * shall return all FanCfgs
     */
    protobuf_c_boolean get_fans_cfgs;
    protobuf_c_boolean get_timer_cfg;
    /*
     * shall return all TrigChCfgs
     */
    protobuf_c_boolean get_trig_cfg;
    /*
     * shall return all SyncChCfgs
     */
    protobuf_c_boolean get_sync_cfg;
    protobuf_c_boolean get_device_serial;
    protobuf_c_boolean get_board_info;
    protobuf_c_boolean get_protocol_version;
    protobuf_c_boolean get_fw_version;
    protobuf_c_boolean get_hw_version;
    protobuf_c_boolean get_mfg_date;
    /*
     * shall return all VFMotors 
     */
    protobuf_c_boolean get_vfmotor_states;
    /*
     * shall return all VFMotorCfgs
     */
    protobuf_c_boolean get_vfmotor_cfgs;
  };
};
#define FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__to_device_msg__descriptor) \
    , 0,0, FRL__DEVICE__WIREFORMAT__TO_DEVICE_MSG__CMD__NOT_SET, {0} }


/*
 * Reply messages generated by the device in reply to a host command.
 * If the Host command was a configuration command, the only ack will be set.
 */
struct  _Frl__Device__Wireformat__ReplyMsg
{
  ProtobufCMessage base;
  /*
   * cmd_id of the message this is a reply to
   */
  uint32_t cmd_id;
  protobuf_c_boolean has_ack;
  protobuf_c_boolean ack;
  size_t n_gyros;
  Frl__Device__Wireformat__GyroCfg **gyros;
  size_t n_accs;
  Frl__Device__Wireformat__AccCfg **accs;
  size_t n_baro;
  Frl__Device__Wireformat__BaroCfg **baro;
  size_t n_fans;
  Frl__Device__Wireformat__FanCfg **fans;
  Frl__Device__Wireformat__TimerCfg *timer;
  size_t n_trigs;
  Frl__Device__Wireformat__TrigCfg **trigs;
  size_t n_syncs;
  Frl__Device__Wireformat__SyncCfg **syncs;
  Frl__Device__Wireformat__DeviceInfo *info;
  Frl__Device__Wireformat__FwVersion *fw_ver;
  Frl__Device__Wireformat__HwVersion *hw_ver;
  Frl__Device__Wireformat__ProtocolVersion *p_ver;
  Frl__Device__Wireformat__MfgDate *mfg_date;
  Frl__Device__Wireformat__DeviceSerial *serial;
  size_t n_vfs;
  Frl__Device__Wireformat__VFMotor **vfs;
  Frl__Device__Wireformat__DispDriverCfgs *display;
  size_t n_vfmotor_cfg;
  Frl__Device__Wireformat__VFMotorCfgs **vfmotor_cfg;
};
#define FRL__DEVICE__WIREFORMAT__REPLY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__reply_msg__descriptor) \
    , 0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL, NULL, 0,NULL }


/*
 * Configuration of the display driver IC.
 */
struct  _Frl__Device__Wireformat__DispDriverCfg
{
  ProtobufCMessage base;
  /*
   * display driver id.
   */
  uint32_t id;
  /*
   * display on/off
   */
  protobuf_c_boolean active;
  /*
   * brightness level, see datasheet for units
   */
  protobuf_c_boolean has_brightness;
  uint32_t brightness;
  /*
   * global persistance or rolling
   */
  protobuf_c_boolean has_mode;
  Frl__Device__Wireformat__DispDriverCfg__DispDriverMode mode;
  /*
   * display persistance time unit TBD
   */
  protobuf_c_boolean has_persistence;
  uint32_t persistence;
  /*
   * delay unit TBD
   */
  protobuf_c_boolean has_on_offset;
  uint32_t on_offset;
};
#define FRL__DEVICE__WIREFORMAT__DISP_DRIVER_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__disp_driver_cfg__descriptor) \
    , 0, 0, 0,0, 0,0, 0,0, 0,0 }


struct  _Frl__Device__Wireformat__DispDriverCfgs
{
  ProtobufCMessage base;
  /*
   * set of configs
   */
  size_t n_array;
  Frl__Device__Wireformat__DispDriverCfg **array;
};
#define FRL__DEVICE__WIREFORMAT__DISP_DRIVER_CFGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__disp_driver_cfgs__descriptor) \
    , 0,NULL }


/*
 * Configuration of the Gyroscope.
 */
struct  _Frl__Device__Wireformat__GyroCfg
{
  ProtobufCMessage base;
  /*
   * gyro id.
   */
  uint32_t id;
  /*
   * streaming or not
   */
  protobuf_c_boolean has_streaming;
  protobuf_c_boolean streaming;
  /*
   * output data rate
   */
  protobuf_c_boolean has_odr_hz;
  uint32_t odr_hz;
  /*
   * full scale range in dps
   */
  protobuf_c_boolean has_range_dps;
  uint32_t range_dps;
  /*
   * sensor dependent 
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
};
#define FRL__DEVICE__WIREFORMAT__GYRO_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__gyro_cfg__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0 }


struct  _Frl__Device__Wireformat__GyroCfgs
{
  ProtobufCMessage base;
  /*
   * set of configs
   */
  size_t n_array;
  Frl__Device__Wireformat__GyroCfg **array;
};
#define FRL__DEVICE__WIREFORMAT__GYRO_CFGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__gyro_cfgs__descriptor) \
    , 0,NULL }


/*
 * Configuration of the Accelerometer.
 */
struct  _Frl__Device__Wireformat__AccCfg
{
  ProtobufCMessage base;
  /*
   * accelerometer id.
   */
  uint32_t id;
  /*
   * streaming or not
   */
  protobuf_c_boolean has_streaming;
  protobuf_c_boolean streaming;
  /*
   * output data rate
   */
  protobuf_c_boolean has_odr_hz;
  uint32_t odr_hz;
  /*
   * full scale range in g
   */
  protobuf_c_boolean has_range_g;
  uint32_t range_g;
  /*
   * sensor dependent 
   */
  protobuf_c_boolean has_mode;
  uint32_t mode;
};
#define FRL__DEVICE__WIREFORMAT__ACC_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__acc_cfg__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0 }


struct  _Frl__Device__Wireformat__AccCfgs
{
  ProtobufCMessage base;
  /*
   * set of configs
   */
  size_t n_array;
  Frl__Device__Wireformat__AccCfg **array;
};
#define FRL__DEVICE__WIREFORMAT__ACC_CFGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__acc_cfgs__descriptor) \
    , 0,NULL }


/*
 * Configuration of the pressure sensor.
 */
struct  _Frl__Device__Wireformat__BaroCfg
{
  ProtobufCMessage base;
  /*
   * barometer id.
   */
  uint32_t id;
  /*
   * streaming or not
   */
  protobuf_c_boolean has_streaming;
  protobuf_c_boolean streaming;
  /*
   * sensor specif values needed to compute pressure
   */
  size_t n_raw;
  uint32_t *raw;
};
#define FRL__DEVICE__WIREFORMAT__BARO_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__baro_cfg__descriptor) \
    , 0, 0,0, 0,NULL }


struct  _Frl__Device__Wireformat__BaroCfgs
{
  ProtobufCMessage base;
  /*
   * set of configs
   */
  size_t n_array;
  Frl__Device__Wireformat__BaroCfg **array;
};
#define FRL__DEVICE__WIREFORMAT__BARO_CFGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__baro_cfgs__descriptor) \
    , 0,NULL }


/*
 * Configuration of the fan.
 */
struct  _Frl__Device__Wireformat__FanCfg
{
  ProtobufCMessage base;
  /*
   * fan id.
   */
  uint32_t id;
  /*
   * on or off
   */
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
  /*
   * periodic streaming or fan speed
   */
  protobuf_c_boolean has_streaming;
  protobuf_c_boolean streaming;
  /*
   * fan speed unit TBD
   */
  protobuf_c_boolean has_speed;
  uint32_t speed;
};
#define FRL__DEVICE__WIREFORMAT__FAN_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__fan_cfg__descriptor) \
    , 0, 0,0, 0,0, 0,0 }


struct  _Frl__Device__Wireformat__FanCfgs
{
  ProtobufCMessage base;
  /*
   * set of configs
   */
  size_t n_array;
  Frl__Device__Wireformat__FanCfg **array;
};
#define FRL__DEVICE__WIREFORMAT__FAN_CFGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__fan_cfgs__descriptor) \
    , 0,NULL }


/*
 * Configuration message to timer block (SST)
 */
struct  _Frl__Device__Wireformat__TimerCfg
{
  ProtobufCMessage base;
  /*
   * timer id.
   */
  uint32_t id;
  /*
   * driven by external PPS signal or on board oscillator 
   */
  protobuf_c_boolean has_source;
  Frl__Device__Wireformat__TimerCfg__Source source;
  /*
   * if EXTERNAL this defines the time to be loaded at the next PPS pulse
   */
  Frl__Device__Wireformat__TaiTime *time;
};
#define FRL__DEVICE__WIREFORMAT__TIMER_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__timer_cfg__descriptor) \
    , 0, 0,0, NULL }


/*
 * Trigger generation block config.
 * To start/stop capture on all active channels simply send a message with only the action field populated.
 */
struct  _Frl__Device__Wireformat__TrigCfg
{
  ProtobufCMessage base;
  /*
   * timer id. 
   */
  uint32_t id;
  /*
   * list of trigger configs, at most one per channel
   */
  size_t n_trig_ch_cfgs;
  Frl__Device__Wireformat__TrigChCfg **trig_ch_cfgs;
  /*
   * start stop all active triggers.
   */
  protobuf_c_boolean has_action;
  Frl__Device__Wireformat__TrigCfg__Action action;
};
#define FRL__DEVICE__WIREFORMAT__TRIG_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__trig_cfg__descriptor) \
    , 0, 0,NULL, 0,0 }


/*
 * Trigger config for a single channel.
 */
struct  _Frl__Device__Wireformat__TrigChCfg
{
  ProtobufCMessage base;
  /*
   * channel number
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   * trigger signal period
   */
  protobuf_c_boolean has_period_us;
  uint32_t period_us;
  /*
   * time offset from master
   */
  protobuf_c_boolean has_offset_us;
  uint32_t offset_us;
  /*
   * master channel wrt which the offset is expressed, set to itself if master
   */
  protobuf_c_boolean has_master;
  uint32_t master;
  /*
   * enable / disable this specific channel
   */
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
};
#define FRL__DEVICE__WIREFORMAT__TRIG_CH_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__trig_ch_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * Configuration set for all capture channels
 * To start/stop capture on all active channels simply send a message with only the action field populated
 */
struct  _Frl__Device__Wireformat__SyncCfg
{
  ProtobufCMessage base;
  /*
   * unique id for the time capture block, (hardcoded in uC FW)
   */
  uint32_t id;
  /*
   * set of configs at most one per channel
   */
  size_t n_sync_ch_cfgs;
  Frl__Device__Wireformat__SyncChCfg **sync_ch_cfgs;
  /*
   * start/stop all of the capture channel marked as active
   */
  protobuf_c_boolean has_action;
  Frl__Device__Wireformat__SyncCfg__Action action;
};
#define FRL__DEVICE__WIREFORMAT__SYNC_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__sync_cfg__descriptor) \
    , 0, 0,NULL, 0,0 }


/*
 * Configuration of a capture channel
 */
struct  _Frl__Device__Wireformat__SyncChCfg
{
  ProtobufCMessage base;
  /*
   * capture channel number
   */
  protobuf_c_boolean has_channel;
  uint32_t channel;
  /*
   * capture edge, set to not active to disable this channel
   */
  protobuf_c_boolean has_dir;
  Frl__Device__Wireformat__SyncChCfg__DIR dir;
  /*
   * decimation factor for this capture input
   */
  protobuf_c_boolean has_prescaler;
  uint32_t prescaler;
  /*
   * reset counter for this capture input
   */
  protobuf_c_boolean has_reset_cnt;
  protobuf_c_boolean reset_cnt;
};
#define FRL__DEVICE__WIREFORMAT__SYNC_CH_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__sync_ch_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * Configuration of VFMotors
 */
struct  _Frl__Device__Wireformat__VFMotorCfg
{
  ProtobufCMessage base;
  /*
   * pid loop proportional gain
   */
  protobuf_c_boolean has_pid_p;
  float pid_p;
  /*
   * pid loop integral gain
   */
  protobuf_c_boolean has_pid_i;
  float pid_i;
  /*
   * pid loop derivative gain
   */
  protobuf_c_boolean has_pid_d;
  float pid_d;
  /*
   * safety margin from limit
   */
  protobuf_c_boolean has_safety_margin;
  float safety_margin;
  /*
   * max step
   */
  protobuf_c_boolean has_step_limit;
  float step_limit;
  /*
   * max accel
   */
  protobuf_c_boolean has_accel_limit;
  float accel_limit;
  /*
   * itegrator limit
   */
  protobuf_c_boolean has_windup_limit;
  uint32_t windup_limit;
  /*
   * driver current setting
   */
  protobuf_c_boolean has_driver_current;
  uint32_t driver_current;
  /*
   * microstepping size
   */
  protobuf_c_boolean has_microstepping;
  uint32_t microstepping;
  /*
   * min set point
   */
  protobuf_c_boolean has_min;
  uint32_t min;
  /*
   * max set point
   */
  protobuf_c_boolean has_max;
  uint32_t max;
  /*
   * set point offset
   */
  protobuf_c_boolean has_offset;
  uint32_t offset;
  /*
   * enable pid loop
   */
  protobuf_c_boolean has_enable_pid;
  protobuf_c_boolean enable_pid;
  /*
   * enable motor
   */
  protobuf_c_boolean has_enable_motor;
  protobuf_c_boolean enable_motor;
  /*
   * enable stall current detection
   */
  protobuf_c_boolean has_enable_stall_cur;
  protobuf_c_boolean enable_stall_cur;
  /*
   * enable flags
   */
  protobuf_c_boolean has_enable_flag;
  protobuf_c_boolean enable_flag;
  /*
   * enble streaming of position messages
   */
  protobuf_c_boolean has_streaming;
  protobuf_c_boolean streaming;
};
#define FRL__DEVICE__WIREFORMAT__VFMOTOR_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__vfmotor_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Frl__Device__Wireformat__VFMotorCfgs
{
  ProtobufCMessage base;
  /*
   * set of configs
   */
  size_t n_array;
  Frl__Device__Wireformat__VFMotorCfg **array;
};
#define FRL__DEVICE__WIREFORMAT__VFMOTOR_CFGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__vfmotor_cfgs__descriptor) \
    , 0,NULL }


/*
 * Runtime command for motor PID
 */
struct  _Frl__Device__Wireformat__VFMotorCmd
{
  ProtobufCMessage base;
  /*
   * uinque id of teh motor this control is intended for.
   */
  protobuf_c_boolean has_id;
  uint32_t id;
  /*
   * value of the PID set point
   */
  protobuf_c_boolean has_set_point_cnts;
  uint32_t set_point_cnts;
};
#define FRL__DEVICE__WIREFORMAT__VFMOTOR_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__vfmotor_cmd__descriptor) \
    , 0,0, 0,0 }


struct  _Frl__Device__Wireformat__VFMotorCmds
{
  ProtobufCMessage base;
  /*
   * set of controls
   */
  size_t n_array;
  Frl__Device__Wireformat__VFMotorCmd **array;
};
#define FRL__DEVICE__WIREFORMAT__VFMOTOR_CMDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frl__device__wireformat__vfmotor_cmds__descriptor) \
    , 0,NULL }


/* Frl__Device__Wireformat__ToHostMsg methods */
void   frl__device__wireformat__to_host_msg__init
                     (Frl__Device__Wireformat__ToHostMsg         *message);
size_t frl__device__wireformat__to_host_msg__get_packed_size
                     (const Frl__Device__Wireformat__ToHostMsg   *message);
size_t frl__device__wireformat__to_host_msg__pack
                     (const Frl__Device__Wireformat__ToHostMsg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__to_host_msg__pack_to_buffer
                     (const Frl__Device__Wireformat__ToHostMsg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__ToHostMsg *
       frl__device__wireformat__to_host_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__to_host_msg__free_unpacked
                     (Frl__Device__Wireformat__ToHostMsg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__EventMsg methods */
void   frl__device__wireformat__event_msg__init
                     (Frl__Device__Wireformat__EventMsg         *message);
size_t frl__device__wireformat__event_msg__get_packed_size
                     (const Frl__Device__Wireformat__EventMsg   *message);
size_t frl__device__wireformat__event_msg__pack
                     (const Frl__Device__Wireformat__EventMsg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__event_msg__pack_to_buffer
                     (const Frl__Device__Wireformat__EventMsg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__EventMsg *
       frl__device__wireformat__event_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__event_msg__free_unpacked
                     (Frl__Device__Wireformat__EventMsg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__TaiTime methods */
void   frl__device__wireformat__tai_time__init
                     (Frl__Device__Wireformat__TaiTime         *message);
size_t frl__device__wireformat__tai_time__get_packed_size
                     (const Frl__Device__Wireformat__TaiTime   *message);
size_t frl__device__wireformat__tai_time__pack
                     (const Frl__Device__Wireformat__TaiTime   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__tai_time__pack_to_buffer
                     (const Frl__Device__Wireformat__TaiTime   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__TaiTime *
       frl__device__wireformat__tai_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__tai_time__free_unpacked
                     (Frl__Device__Wireformat__TaiTime *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Acc methods */
void   frl__device__wireformat__acc__init
                     (Frl__Device__Wireformat__Acc         *message);
size_t frl__device__wireformat__acc__get_packed_size
                     (const Frl__Device__Wireformat__Acc   *message);
size_t frl__device__wireformat__acc__pack
                     (const Frl__Device__Wireformat__Acc   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__acc__pack_to_buffer
                     (const Frl__Device__Wireformat__Acc   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Acc *
       frl__device__wireformat__acc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__acc__free_unpacked
                     (Frl__Device__Wireformat__Acc *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Gyro methods */
void   frl__device__wireformat__gyro__init
                     (Frl__Device__Wireformat__Gyro         *message);
size_t frl__device__wireformat__gyro__get_packed_size
                     (const Frl__Device__Wireformat__Gyro   *message);
size_t frl__device__wireformat__gyro__pack
                     (const Frl__Device__Wireformat__Gyro   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__gyro__pack_to_buffer
                     (const Frl__Device__Wireformat__Gyro   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Gyro *
       frl__device__wireformat__gyro__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__gyro__free_unpacked
                     (Frl__Device__Wireformat__Gyro *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Mag methods */
void   frl__device__wireformat__mag__init
                     (Frl__Device__Wireformat__Mag         *message);
size_t frl__device__wireformat__mag__get_packed_size
                     (const Frl__Device__Wireformat__Mag   *message);
size_t frl__device__wireformat__mag__pack
                     (const Frl__Device__Wireformat__Mag   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__mag__pack_to_buffer
                     (const Frl__Device__Wireformat__Mag   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Mag *
       frl__device__wireformat__mag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__mag__free_unpacked
                     (Frl__Device__Wireformat__Mag *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Baro methods */
void   frl__device__wireformat__baro__init
                     (Frl__Device__Wireformat__Baro         *message);
size_t frl__device__wireformat__baro__get_packed_size
                     (const Frl__Device__Wireformat__Baro   *message);
size_t frl__device__wireformat__baro__pack
                     (const Frl__Device__Wireformat__Baro   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__baro__pack_to_buffer
                     (const Frl__Device__Wireformat__Baro   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Baro *
       frl__device__wireformat__baro__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__baro__free_unpacked
                     (Frl__Device__Wireformat__Baro *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Temp methods */
void   frl__device__wireformat__temp__init
                     (Frl__Device__Wireformat__Temp         *message);
size_t frl__device__wireformat__temp__get_packed_size
                     (const Frl__Device__Wireformat__Temp   *message);
size_t frl__device__wireformat__temp__pack
                     (const Frl__Device__Wireformat__Temp   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__temp__pack_to_buffer
                     (const Frl__Device__Wireformat__Temp   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Temp *
       frl__device__wireformat__temp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__temp__free_unpacked
                     (Frl__Device__Wireformat__Temp *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Sync methods */
void   frl__device__wireformat__sync__init
                     (Frl__Device__Wireformat__Sync         *message);
size_t frl__device__wireformat__sync__get_packed_size
                     (const Frl__Device__Wireformat__Sync   *message);
size_t frl__device__wireformat__sync__pack
                     (const Frl__Device__Wireformat__Sync   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__sync__pack_to_buffer
                     (const Frl__Device__Wireformat__Sync   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Sync *
       frl__device__wireformat__sync__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__sync__free_unpacked
                     (Frl__Device__Wireformat__Sync *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__FirstPixel methods */
void   frl__device__wireformat__first_pixel__init
                     (Frl__Device__Wireformat__FirstPixel         *message);
size_t frl__device__wireformat__first_pixel__get_packed_size
                     (const Frl__Device__Wireformat__FirstPixel   *message);
size_t frl__device__wireformat__first_pixel__pack
                     (const Frl__Device__Wireformat__FirstPixel   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__first_pixel__pack_to_buffer
                     (const Frl__Device__Wireformat__FirstPixel   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__FirstPixel *
       frl__device__wireformat__first_pixel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__first_pixel__free_unpacked
                     (Frl__Device__Wireformat__FirstPixel *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Fan methods */
void   frl__device__wireformat__fan__init
                     (Frl__Device__Wireformat__Fan         *message);
size_t frl__device__wireformat__fan__get_packed_size
                     (const Frl__Device__Wireformat__Fan   *message);
size_t frl__device__wireformat__fan__pack
                     (const Frl__Device__Wireformat__Fan   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__fan__pack_to_buffer
                     (const Frl__Device__Wireformat__Fan   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Fan *
       frl__device__wireformat__fan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__fan__free_unpacked
                     (Frl__Device__Wireformat__Fan *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Button methods */
void   frl__device__wireformat__button__init
                     (Frl__Device__Wireformat__Button         *message);
size_t frl__device__wireformat__button__get_packed_size
                     (const Frl__Device__Wireformat__Button   *message);
size_t frl__device__wireformat__button__pack
                     (const Frl__Device__Wireformat__Button   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__button__pack_to_buffer
                     (const Frl__Device__Wireformat__Button   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Button *
       frl__device__wireformat__button__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__button__free_unpacked
                     (Frl__Device__Wireformat__Button *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Encoder methods */
void   frl__device__wireformat__encoder__init
                     (Frl__Device__Wireformat__Encoder         *message);
size_t frl__device__wireformat__encoder__get_packed_size
                     (const Frl__Device__Wireformat__Encoder   *message);
size_t frl__device__wireformat__encoder__pack
                     (const Frl__Device__Wireformat__Encoder   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__encoder__pack_to_buffer
                     (const Frl__Device__Wireformat__Encoder   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Encoder *
       frl__device__wireformat__encoder__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__encoder__free_unpacked
                     (Frl__Device__Wireformat__Encoder *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__VFMotor methods */
void   frl__device__wireformat__vfmotor__init
                     (Frl__Device__Wireformat__VFMotor         *message);
size_t frl__device__wireformat__vfmotor__get_packed_size
                     (const Frl__Device__Wireformat__VFMotor   *message);
size_t frl__device__wireformat__vfmotor__pack
                     (const Frl__Device__Wireformat__VFMotor   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__vfmotor__pack_to_buffer
                     (const Frl__Device__Wireformat__VFMotor   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__VFMotor *
       frl__device__wireformat__vfmotor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__vfmotor__free_unpacked
                     (Frl__Device__Wireformat__VFMotor *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__Timer methods */
void   frl__device__wireformat__timer__init
                     (Frl__Device__Wireformat__Timer         *message);
size_t frl__device__wireformat__timer__get_packed_size
                     (const Frl__Device__Wireformat__Timer   *message);
size_t frl__device__wireformat__timer__pack
                     (const Frl__Device__Wireformat__Timer   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__timer__pack_to_buffer
                     (const Frl__Device__Wireformat__Timer   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__Timer *
       frl__device__wireformat__timer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__timer__free_unpacked
                     (Frl__Device__Wireformat__Timer *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__MainBoard methods */
void   frl__device__wireformat__main_board__init
                     (Frl__Device__Wireformat__MainBoard         *message);
size_t frl__device__wireformat__main_board__get_packed_size
                     (const Frl__Device__Wireformat__MainBoard   *message);
size_t frl__device__wireformat__main_board__pack
                     (const Frl__Device__Wireformat__MainBoard   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__main_board__pack_to_buffer
                     (const Frl__Device__Wireformat__MainBoard   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__MainBoard *
       frl__device__wireformat__main_board__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__main_board__free_unpacked
                     (Frl__Device__Wireformat__MainBoard *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__DeviceInfo methods */
void   frl__device__wireformat__device_info__init
                     (Frl__Device__Wireformat__DeviceInfo         *message);
size_t frl__device__wireformat__device_info__get_packed_size
                     (const Frl__Device__Wireformat__DeviceInfo   *message);
size_t frl__device__wireformat__device_info__pack
                     (const Frl__Device__Wireformat__DeviceInfo   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__device_info__pack_to_buffer
                     (const Frl__Device__Wireformat__DeviceInfo   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__DeviceInfo *
       frl__device__wireformat__device_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__device_info__free_unpacked
                     (Frl__Device__Wireformat__DeviceInfo *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__FwVersion methods */
void   frl__device__wireformat__fw_version__init
                     (Frl__Device__Wireformat__FwVersion         *message);
size_t frl__device__wireformat__fw_version__get_packed_size
                     (const Frl__Device__Wireformat__FwVersion   *message);
size_t frl__device__wireformat__fw_version__pack
                     (const Frl__Device__Wireformat__FwVersion   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__fw_version__pack_to_buffer
                     (const Frl__Device__Wireformat__FwVersion   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__FwVersion *
       frl__device__wireformat__fw_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__fw_version__free_unpacked
                     (Frl__Device__Wireformat__FwVersion *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__HwVersion methods */
void   frl__device__wireformat__hw_version__init
                     (Frl__Device__Wireformat__HwVersion         *message);
size_t frl__device__wireformat__hw_version__get_packed_size
                     (const Frl__Device__Wireformat__HwVersion   *message);
size_t frl__device__wireformat__hw_version__pack
                     (const Frl__Device__Wireformat__HwVersion   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__hw_version__pack_to_buffer
                     (const Frl__Device__Wireformat__HwVersion   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__HwVersion *
       frl__device__wireformat__hw_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__hw_version__free_unpacked
                     (Frl__Device__Wireformat__HwVersion *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__ProtocolVersion methods */
void   frl__device__wireformat__protocol_version__init
                     (Frl__Device__Wireformat__ProtocolVersion         *message);
size_t frl__device__wireformat__protocol_version__get_packed_size
                     (const Frl__Device__Wireformat__ProtocolVersion   *message);
size_t frl__device__wireformat__protocol_version__pack
                     (const Frl__Device__Wireformat__ProtocolVersion   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__protocol_version__pack_to_buffer
                     (const Frl__Device__Wireformat__ProtocolVersion   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__ProtocolVersion *
       frl__device__wireformat__protocol_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__protocol_version__free_unpacked
                     (Frl__Device__Wireformat__ProtocolVersion *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__MfgDate methods */
void   frl__device__wireformat__mfg_date__init
                     (Frl__Device__Wireformat__MfgDate         *message);
size_t frl__device__wireformat__mfg_date__get_packed_size
                     (const Frl__Device__Wireformat__MfgDate   *message);
size_t frl__device__wireformat__mfg_date__pack
                     (const Frl__Device__Wireformat__MfgDate   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__mfg_date__pack_to_buffer
                     (const Frl__Device__Wireformat__MfgDate   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__MfgDate *
       frl__device__wireformat__mfg_date__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__mfg_date__free_unpacked
                     (Frl__Device__Wireformat__MfgDate *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__DeviceSerial methods */
void   frl__device__wireformat__device_serial__init
                     (Frl__Device__Wireformat__DeviceSerial         *message);
size_t frl__device__wireformat__device_serial__get_packed_size
                     (const Frl__Device__Wireformat__DeviceSerial   *message);
size_t frl__device__wireformat__device_serial__pack
                     (const Frl__Device__Wireformat__DeviceSerial   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__device_serial__pack_to_buffer
                     (const Frl__Device__Wireformat__DeviceSerial   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__DeviceSerial *
       frl__device__wireformat__device_serial__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__device_serial__free_unpacked
                     (Frl__Device__Wireformat__DeviceSerial *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__ToDeviceMsg methods */
void   frl__device__wireformat__to_device_msg__init
                     (Frl__Device__Wireformat__ToDeviceMsg         *message);
size_t frl__device__wireformat__to_device_msg__get_packed_size
                     (const Frl__Device__Wireformat__ToDeviceMsg   *message);
size_t frl__device__wireformat__to_device_msg__pack
                     (const Frl__Device__Wireformat__ToDeviceMsg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__to_device_msg__pack_to_buffer
                     (const Frl__Device__Wireformat__ToDeviceMsg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__ToDeviceMsg *
       frl__device__wireformat__to_device_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__to_device_msg__free_unpacked
                     (Frl__Device__Wireformat__ToDeviceMsg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__ReplyMsg methods */
void   frl__device__wireformat__reply_msg__init
                     (Frl__Device__Wireformat__ReplyMsg         *message);
size_t frl__device__wireformat__reply_msg__get_packed_size
                     (const Frl__Device__Wireformat__ReplyMsg   *message);
size_t frl__device__wireformat__reply_msg__pack
                     (const Frl__Device__Wireformat__ReplyMsg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__reply_msg__pack_to_buffer
                     (const Frl__Device__Wireformat__ReplyMsg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__ReplyMsg *
       frl__device__wireformat__reply_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__reply_msg__free_unpacked
                     (Frl__Device__Wireformat__ReplyMsg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__DispDriverCfg methods */
void   frl__device__wireformat__disp_driver_cfg__init
                     (Frl__Device__Wireformat__DispDriverCfg         *message);
size_t frl__device__wireformat__disp_driver_cfg__get_packed_size
                     (const Frl__Device__Wireformat__DispDriverCfg   *message);
size_t frl__device__wireformat__disp_driver_cfg__pack
                     (const Frl__Device__Wireformat__DispDriverCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__disp_driver_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__DispDriverCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__DispDriverCfg *
       frl__device__wireformat__disp_driver_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__disp_driver_cfg__free_unpacked
                     (Frl__Device__Wireformat__DispDriverCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__DispDriverCfgs methods */
void   frl__device__wireformat__disp_driver_cfgs__init
                     (Frl__Device__Wireformat__DispDriverCfgs         *message);
size_t frl__device__wireformat__disp_driver_cfgs__get_packed_size
                     (const Frl__Device__Wireformat__DispDriverCfgs   *message);
size_t frl__device__wireformat__disp_driver_cfgs__pack
                     (const Frl__Device__Wireformat__DispDriverCfgs   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__disp_driver_cfgs__pack_to_buffer
                     (const Frl__Device__Wireformat__DispDriverCfgs   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__DispDriverCfgs *
       frl__device__wireformat__disp_driver_cfgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__disp_driver_cfgs__free_unpacked
                     (Frl__Device__Wireformat__DispDriverCfgs *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__GyroCfg methods */
void   frl__device__wireformat__gyro_cfg__init
                     (Frl__Device__Wireformat__GyroCfg         *message);
size_t frl__device__wireformat__gyro_cfg__get_packed_size
                     (const Frl__Device__Wireformat__GyroCfg   *message);
size_t frl__device__wireformat__gyro_cfg__pack
                     (const Frl__Device__Wireformat__GyroCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__gyro_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__GyroCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__GyroCfg *
       frl__device__wireformat__gyro_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__gyro_cfg__free_unpacked
                     (Frl__Device__Wireformat__GyroCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__GyroCfgs methods */
void   frl__device__wireformat__gyro_cfgs__init
                     (Frl__Device__Wireformat__GyroCfgs         *message);
size_t frl__device__wireformat__gyro_cfgs__get_packed_size
                     (const Frl__Device__Wireformat__GyroCfgs   *message);
size_t frl__device__wireformat__gyro_cfgs__pack
                     (const Frl__Device__Wireformat__GyroCfgs   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__gyro_cfgs__pack_to_buffer
                     (const Frl__Device__Wireformat__GyroCfgs   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__GyroCfgs *
       frl__device__wireformat__gyro_cfgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__gyro_cfgs__free_unpacked
                     (Frl__Device__Wireformat__GyroCfgs *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__AccCfg methods */
void   frl__device__wireformat__acc_cfg__init
                     (Frl__Device__Wireformat__AccCfg         *message);
size_t frl__device__wireformat__acc_cfg__get_packed_size
                     (const Frl__Device__Wireformat__AccCfg   *message);
size_t frl__device__wireformat__acc_cfg__pack
                     (const Frl__Device__Wireformat__AccCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__acc_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__AccCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__AccCfg *
       frl__device__wireformat__acc_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__acc_cfg__free_unpacked
                     (Frl__Device__Wireformat__AccCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__AccCfgs methods */
void   frl__device__wireformat__acc_cfgs__init
                     (Frl__Device__Wireformat__AccCfgs         *message);
size_t frl__device__wireformat__acc_cfgs__get_packed_size
                     (const Frl__Device__Wireformat__AccCfgs   *message);
size_t frl__device__wireformat__acc_cfgs__pack
                     (const Frl__Device__Wireformat__AccCfgs   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__acc_cfgs__pack_to_buffer
                     (const Frl__Device__Wireformat__AccCfgs   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__AccCfgs *
       frl__device__wireformat__acc_cfgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__acc_cfgs__free_unpacked
                     (Frl__Device__Wireformat__AccCfgs *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__BaroCfg methods */
void   frl__device__wireformat__baro_cfg__init
                     (Frl__Device__Wireformat__BaroCfg         *message);
size_t frl__device__wireformat__baro_cfg__get_packed_size
                     (const Frl__Device__Wireformat__BaroCfg   *message);
size_t frl__device__wireformat__baro_cfg__pack
                     (const Frl__Device__Wireformat__BaroCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__baro_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__BaroCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__BaroCfg *
       frl__device__wireformat__baro_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__baro_cfg__free_unpacked
                     (Frl__Device__Wireformat__BaroCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__BaroCfgs methods */
void   frl__device__wireformat__baro_cfgs__init
                     (Frl__Device__Wireformat__BaroCfgs         *message);
size_t frl__device__wireformat__baro_cfgs__get_packed_size
                     (const Frl__Device__Wireformat__BaroCfgs   *message);
size_t frl__device__wireformat__baro_cfgs__pack
                     (const Frl__Device__Wireformat__BaroCfgs   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__baro_cfgs__pack_to_buffer
                     (const Frl__Device__Wireformat__BaroCfgs   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__BaroCfgs *
       frl__device__wireformat__baro_cfgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__baro_cfgs__free_unpacked
                     (Frl__Device__Wireformat__BaroCfgs *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__FanCfg methods */
void   frl__device__wireformat__fan_cfg__init
                     (Frl__Device__Wireformat__FanCfg         *message);
size_t frl__device__wireformat__fan_cfg__get_packed_size
                     (const Frl__Device__Wireformat__FanCfg   *message);
size_t frl__device__wireformat__fan_cfg__pack
                     (const Frl__Device__Wireformat__FanCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__fan_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__FanCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__FanCfg *
       frl__device__wireformat__fan_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__fan_cfg__free_unpacked
                     (Frl__Device__Wireformat__FanCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__FanCfgs methods */
void   frl__device__wireformat__fan_cfgs__init
                     (Frl__Device__Wireformat__FanCfgs         *message);
size_t frl__device__wireformat__fan_cfgs__get_packed_size
                     (const Frl__Device__Wireformat__FanCfgs   *message);
size_t frl__device__wireformat__fan_cfgs__pack
                     (const Frl__Device__Wireformat__FanCfgs   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__fan_cfgs__pack_to_buffer
                     (const Frl__Device__Wireformat__FanCfgs   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__FanCfgs *
       frl__device__wireformat__fan_cfgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__fan_cfgs__free_unpacked
                     (Frl__Device__Wireformat__FanCfgs *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__TimerCfg methods */
void   frl__device__wireformat__timer_cfg__init
                     (Frl__Device__Wireformat__TimerCfg         *message);
size_t frl__device__wireformat__timer_cfg__get_packed_size
                     (const Frl__Device__Wireformat__TimerCfg   *message);
size_t frl__device__wireformat__timer_cfg__pack
                     (const Frl__Device__Wireformat__TimerCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__timer_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__TimerCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__TimerCfg *
       frl__device__wireformat__timer_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__timer_cfg__free_unpacked
                     (Frl__Device__Wireformat__TimerCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__TrigCfg methods */
void   frl__device__wireformat__trig_cfg__init
                     (Frl__Device__Wireformat__TrigCfg         *message);
size_t frl__device__wireformat__trig_cfg__get_packed_size
                     (const Frl__Device__Wireformat__TrigCfg   *message);
size_t frl__device__wireformat__trig_cfg__pack
                     (const Frl__Device__Wireformat__TrigCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__trig_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__TrigCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__TrigCfg *
       frl__device__wireformat__trig_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__trig_cfg__free_unpacked
                     (Frl__Device__Wireformat__TrigCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__TrigChCfg methods */
void   frl__device__wireformat__trig_ch_cfg__init
                     (Frl__Device__Wireformat__TrigChCfg         *message);
size_t frl__device__wireformat__trig_ch_cfg__get_packed_size
                     (const Frl__Device__Wireformat__TrigChCfg   *message);
size_t frl__device__wireformat__trig_ch_cfg__pack
                     (const Frl__Device__Wireformat__TrigChCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__trig_ch_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__TrigChCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__TrigChCfg *
       frl__device__wireformat__trig_ch_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__trig_ch_cfg__free_unpacked
                     (Frl__Device__Wireformat__TrigChCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__SyncCfg methods */
void   frl__device__wireformat__sync_cfg__init
                     (Frl__Device__Wireformat__SyncCfg         *message);
size_t frl__device__wireformat__sync_cfg__get_packed_size
                     (const Frl__Device__Wireformat__SyncCfg   *message);
size_t frl__device__wireformat__sync_cfg__pack
                     (const Frl__Device__Wireformat__SyncCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__sync_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__SyncCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__SyncCfg *
       frl__device__wireformat__sync_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__sync_cfg__free_unpacked
                     (Frl__Device__Wireformat__SyncCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__SyncChCfg methods */
void   frl__device__wireformat__sync_ch_cfg__init
                     (Frl__Device__Wireformat__SyncChCfg         *message);
size_t frl__device__wireformat__sync_ch_cfg__get_packed_size
                     (const Frl__Device__Wireformat__SyncChCfg   *message);
size_t frl__device__wireformat__sync_ch_cfg__pack
                     (const Frl__Device__Wireformat__SyncChCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__sync_ch_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__SyncChCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__SyncChCfg *
       frl__device__wireformat__sync_ch_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__sync_ch_cfg__free_unpacked
                     (Frl__Device__Wireformat__SyncChCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__VFMotorCfg methods */
void   frl__device__wireformat__vfmotor_cfg__init
                     (Frl__Device__Wireformat__VFMotorCfg         *message);
size_t frl__device__wireformat__vfmotor_cfg__get_packed_size
                     (const Frl__Device__Wireformat__VFMotorCfg   *message);
size_t frl__device__wireformat__vfmotor_cfg__pack
                     (const Frl__Device__Wireformat__VFMotorCfg   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__vfmotor_cfg__pack_to_buffer
                     (const Frl__Device__Wireformat__VFMotorCfg   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__VFMotorCfg *
       frl__device__wireformat__vfmotor_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__vfmotor_cfg__free_unpacked
                     (Frl__Device__Wireformat__VFMotorCfg *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__VFMotorCfgs methods */
void   frl__device__wireformat__vfmotor_cfgs__init
                     (Frl__Device__Wireformat__VFMotorCfgs         *message);
size_t frl__device__wireformat__vfmotor_cfgs__get_packed_size
                     (const Frl__Device__Wireformat__VFMotorCfgs   *message);
size_t frl__device__wireformat__vfmotor_cfgs__pack
                     (const Frl__Device__Wireformat__VFMotorCfgs   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__vfmotor_cfgs__pack_to_buffer
                     (const Frl__Device__Wireformat__VFMotorCfgs   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__VFMotorCfgs *
       frl__device__wireformat__vfmotor_cfgs__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__vfmotor_cfgs__free_unpacked
                     (Frl__Device__Wireformat__VFMotorCfgs *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__VFMotorCmd methods */
void   frl__device__wireformat__vfmotor_cmd__init
                     (Frl__Device__Wireformat__VFMotorCmd         *message);
size_t frl__device__wireformat__vfmotor_cmd__get_packed_size
                     (const Frl__Device__Wireformat__VFMotorCmd   *message);
size_t frl__device__wireformat__vfmotor_cmd__pack
                     (const Frl__Device__Wireformat__VFMotorCmd   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__vfmotor_cmd__pack_to_buffer
                     (const Frl__Device__Wireformat__VFMotorCmd   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__VFMotorCmd *
       frl__device__wireformat__vfmotor_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__vfmotor_cmd__free_unpacked
                     (Frl__Device__Wireformat__VFMotorCmd *message,
                      ProtobufCAllocator *allocator);
/* Frl__Device__Wireformat__VFMotorCmds methods */
void   frl__device__wireformat__vfmotor_cmds__init
                     (Frl__Device__Wireformat__VFMotorCmds         *message);
size_t frl__device__wireformat__vfmotor_cmds__get_packed_size
                     (const Frl__Device__Wireformat__VFMotorCmds   *message);
size_t frl__device__wireformat__vfmotor_cmds__pack
                     (const Frl__Device__Wireformat__VFMotorCmds   *message,
                      uint8_t             *out);
size_t frl__device__wireformat__vfmotor_cmds__pack_to_buffer
                     (const Frl__Device__Wireformat__VFMotorCmds   *message,
                      ProtobufCBuffer     *buffer);
Frl__Device__Wireformat__VFMotorCmds *
       frl__device__wireformat__vfmotor_cmds__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frl__device__wireformat__vfmotor_cmds__free_unpacked
                     (Frl__Device__Wireformat__VFMotorCmds *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Frl__Device__Wireformat__ToHostMsg_Closure)
                 (const Frl__Device__Wireformat__ToHostMsg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__EventMsg_Closure)
                 (const Frl__Device__Wireformat__EventMsg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__TaiTime_Closure)
                 (const Frl__Device__Wireformat__TaiTime *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Acc_Closure)
                 (const Frl__Device__Wireformat__Acc *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Gyro_Closure)
                 (const Frl__Device__Wireformat__Gyro *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Mag_Closure)
                 (const Frl__Device__Wireformat__Mag *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Baro_Closure)
                 (const Frl__Device__Wireformat__Baro *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Temp_Closure)
                 (const Frl__Device__Wireformat__Temp *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Sync_Closure)
                 (const Frl__Device__Wireformat__Sync *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__FirstPixel_Closure)
                 (const Frl__Device__Wireformat__FirstPixel *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Fan_Closure)
                 (const Frl__Device__Wireformat__Fan *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Button_Closure)
                 (const Frl__Device__Wireformat__Button *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Encoder_Closure)
                 (const Frl__Device__Wireformat__Encoder *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__VFMotor_Closure)
                 (const Frl__Device__Wireformat__VFMotor *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__Timer_Closure)
                 (const Frl__Device__Wireformat__Timer *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__MainBoard_Closure)
                 (const Frl__Device__Wireformat__MainBoard *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__DeviceInfo_Closure)
                 (const Frl__Device__Wireformat__DeviceInfo *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__FwVersion_Closure)
                 (const Frl__Device__Wireformat__FwVersion *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__HwVersion_Closure)
                 (const Frl__Device__Wireformat__HwVersion *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__ProtocolVersion_Closure)
                 (const Frl__Device__Wireformat__ProtocolVersion *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__MfgDate_Closure)
                 (const Frl__Device__Wireformat__MfgDate *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__DeviceSerial_Closure)
                 (const Frl__Device__Wireformat__DeviceSerial *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__ToDeviceMsg_Closure)
                 (const Frl__Device__Wireformat__ToDeviceMsg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__ReplyMsg_Closure)
                 (const Frl__Device__Wireformat__ReplyMsg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__DispDriverCfg_Closure)
                 (const Frl__Device__Wireformat__DispDriverCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__DispDriverCfgs_Closure)
                 (const Frl__Device__Wireformat__DispDriverCfgs *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__GyroCfg_Closure)
                 (const Frl__Device__Wireformat__GyroCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__GyroCfgs_Closure)
                 (const Frl__Device__Wireformat__GyroCfgs *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__AccCfg_Closure)
                 (const Frl__Device__Wireformat__AccCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__AccCfgs_Closure)
                 (const Frl__Device__Wireformat__AccCfgs *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__BaroCfg_Closure)
                 (const Frl__Device__Wireformat__BaroCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__BaroCfgs_Closure)
                 (const Frl__Device__Wireformat__BaroCfgs *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__FanCfg_Closure)
                 (const Frl__Device__Wireformat__FanCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__FanCfgs_Closure)
                 (const Frl__Device__Wireformat__FanCfgs *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__TimerCfg_Closure)
                 (const Frl__Device__Wireformat__TimerCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__TrigCfg_Closure)
                 (const Frl__Device__Wireformat__TrigCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__TrigChCfg_Closure)
                 (const Frl__Device__Wireformat__TrigChCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__SyncCfg_Closure)
                 (const Frl__Device__Wireformat__SyncCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__SyncChCfg_Closure)
                 (const Frl__Device__Wireformat__SyncChCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__VFMotorCfg_Closure)
                 (const Frl__Device__Wireformat__VFMotorCfg *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__VFMotorCfgs_Closure)
                 (const Frl__Device__Wireformat__VFMotorCfgs *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__VFMotorCmd_Closure)
                 (const Frl__Device__Wireformat__VFMotorCmd *message,
                  void *closure_data);
typedef void (*Frl__Device__Wireformat__VFMotorCmds_Closure)
                 (const Frl__Device__Wireformat__VFMotorCmds *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor frl__device__wireformat__to_host_msg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__event_msg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__tai_time__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__acc__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__gyro__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__mag__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__baro__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__temp__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__sync__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__sync__dir__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__first_pixel__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__first_pixel__lr__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__fan__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__button__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__encoder__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__vfmotor__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__vfmotor__lr__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__vfmotor__event__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__timer__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__timer__source__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__timer__status__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__main_board__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__main_board__status__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__device_info__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__fw_version__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__hw_version__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__protocol_version__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__mfg_date__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__device_serial__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__to_device_msg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__reply_msg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__disp_driver_cfg__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__disp_driver_cfg__disp_driver_mode__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__disp_driver_cfgs__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__gyro_cfg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__gyro_cfgs__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__acc_cfg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__acc_cfgs__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__baro_cfg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__baro_cfgs__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__fan_cfg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__fan_cfgs__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__timer_cfg__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__timer_cfg__source__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__trig_cfg__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__trig_cfg__action__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__trig_ch_cfg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__sync_cfg__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__sync_cfg__action__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__sync_ch_cfg__descriptor;
extern const ProtobufCEnumDescriptor    frl__device__wireformat__sync_ch_cfg__dir__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__vfmotor_cfg__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__vfmotor_cfgs__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__vfmotor_cmd__descriptor;
extern const ProtobufCMessageDescriptor frl__device__wireformat__vfmotor_cmds__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_p_5fwire_5fprotocol_2eproto__INCLUDED */
