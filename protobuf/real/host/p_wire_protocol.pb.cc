// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p_wire_protocol.proto

#include "p_wire_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_p_5fwire_5fprotocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Acc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Baro;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BaroCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Button;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceSerial;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DispDriverCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Encoder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Fan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FanCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FirstPixel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FwVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gyro;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GyroCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HwVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mag;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MainBoard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MfgDate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProtocolVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sync;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SyncChCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaiTime;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Temp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrigChCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VFMotor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VFMotorCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VFMotorCmd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<14> scc_info_EventMsg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<16> scc_info_ReplyMsg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccCfgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BaroCfgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DispDriverCfgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FanCfgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GyroCfgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SyncCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TimerCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrigCfg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VFMotorCfgs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VFMotorCmds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_DeviceInfo;
}  // namespace protobuf_p_5fwire_5fprotocol_2eproto
namespace frl {
namespace device {
namespace wireformat {
class ToHostMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToHostMsg>
      _instance;
  const ::frl::device::wireformat::EventMsg* tel_;
  const ::frl::device::wireformat::ReplyMsg* reply_;
} _ToHostMsg_default_instance_;
class EventMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventMsg>
      _instance;
} _EventMsg_default_instance_;
class TaiTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaiTime>
      _instance;
} _TaiTime_default_instance_;
class AccDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Acc>
      _instance;
} _Acc_default_instance_;
class GyroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gyro>
      _instance;
} _Gyro_default_instance_;
class MagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mag>
      _instance;
} _Mag_default_instance_;
class BaroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Baro>
      _instance;
} _Baro_default_instance_;
class TempDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Temp>
      _instance;
} _Temp_default_instance_;
class SyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sync>
      _instance;
} _Sync_default_instance_;
class FirstPixelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirstPixel>
      _instance;
} _FirstPixel_default_instance_;
class FanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fan>
      _instance;
} _Fan_default_instance_;
class ButtonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Button>
      _instance;
} _Button_default_instance_;
class EncoderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Encoder>
      _instance;
} _Encoder_default_instance_;
class VFMotorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VFMotor>
      _instance;
} _VFMotor_default_instance_;
class TimerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timer>
      _instance;
} _Timer_default_instance_;
class MainBoardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainBoard>
      _instance;
} _MainBoard_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo>
      _instance;
} _DeviceInfo_default_instance_;
class FwVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FwVersion>
      _instance;
} _FwVersion_default_instance_;
class HwVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HwVersion>
      _instance;
} _HwVersion_default_instance_;
class ProtocolVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtocolVersion>
      _instance;
} _ProtocolVersion_default_instance_;
class MfgDateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MfgDate>
      _instance;
} _MfgDate_default_instance_;
class DeviceSerialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceSerial>
      _instance;
} _DeviceSerial_default_instance_;
class ToDeviceMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ToDeviceMsg>
      _instance;
  const ::frl::device::wireformat::DispDriverCfgs* set_display_cfgs_;
  const ::frl::device::wireformat::GyroCfgs* set_gyro_cfgs_;
  const ::frl::device::wireformat::AccCfgs* set_acc_cfgs_;
  const ::frl::device::wireformat::BaroCfgs* set_baro_cfgs_;
  const ::frl::device::wireformat::FanCfgs* set_fan_cfgs_;
  const ::frl::device::wireformat::TimerCfg* set_timer_cfg_;
  const ::frl::device::wireformat::TrigCfg* set_trig_cfg_;
  const ::frl::device::wireformat::SyncCfg* set_sync_cfg_;
  const ::frl::device::wireformat::DeviceSerial* set_serial_;
  const ::frl::device::wireformat::VFMotorCfgs* set_vfmotor_cfgs_;
  const ::frl::device::wireformat::VFMotorCmds* set_vfmotor_cmd_;
  bool get_display_cfgs_;
  bool get_gyro_cfgs_;
  bool get_acc_cfgs_;
  bool get_baro_cfgs_;
  bool get_fans_cfgs_;
  bool get_timer_cfg_;
  bool get_trig_cfg_;
  bool get_sync_cfg_;
  bool get_device_serial_;
  bool get_board_info_;
  bool get_protocol_version_;
  bool get_fw_version_;
  bool get_hw_version_;
  bool get_mfg_date_;
  bool get_vfmotor_states_;
  bool get_vfmotor_cfgs_;
} _ToDeviceMsg_default_instance_;
class ReplyMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplyMsg>
      _instance;
} _ReplyMsg_default_instance_;
class DispDriverCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DispDriverCfg>
      _instance;
} _DispDriverCfg_default_instance_;
class DispDriverCfgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DispDriverCfgs>
      _instance;
} _DispDriverCfgs_default_instance_;
class GyroCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GyroCfg>
      _instance;
} _GyroCfg_default_instance_;
class GyroCfgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GyroCfgs>
      _instance;
} _GyroCfgs_default_instance_;
class AccCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccCfg>
      _instance;
} _AccCfg_default_instance_;
class AccCfgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccCfgs>
      _instance;
} _AccCfgs_default_instance_;
class BaroCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaroCfg>
      _instance;
} _BaroCfg_default_instance_;
class BaroCfgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaroCfgs>
      _instance;
} _BaroCfgs_default_instance_;
class FanCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FanCfg>
      _instance;
} _FanCfg_default_instance_;
class FanCfgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FanCfgs>
      _instance;
} _FanCfgs_default_instance_;
class TimerCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimerCfg>
      _instance;
} _TimerCfg_default_instance_;
class TrigCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrigCfg>
      _instance;
} _TrigCfg_default_instance_;
class TrigChCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrigChCfg>
      _instance;
} _TrigChCfg_default_instance_;
class SyncCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncCfg>
      _instance;
} _SyncCfg_default_instance_;
class SyncChCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncChCfg>
      _instance;
} _SyncChCfg_default_instance_;
class VFMotorCfgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VFMotorCfg>
      _instance;
} _VFMotorCfg_default_instance_;
class VFMotorCfgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VFMotorCfgs>
      _instance;
} _VFMotorCfgs_default_instance_;
class VFMotorCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VFMotorCmd>
      _instance;
} _VFMotorCmd_default_instance_;
class VFMotorCmdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VFMotorCmds>
      _instance;
} _VFMotorCmds_default_instance_;
}  // namespace wireformat
}  // namespace device
}  // namespace frl
namespace protobuf_p_5fwire_5fprotocol_2eproto {
static void InitDefaultsToHostMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_ToHostMsg_default_instance_;
    new (ptr) ::frl::device::wireformat::ToHostMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::ToHostMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ToHostMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsToHostMsg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_EventMsg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ReplyMsg.base,}};

static void InitDefaultsEventMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_EventMsg_default_instance_;
    new (ptr) ::frl::device::wireformat::EventMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::EventMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<14> scc_info_EventMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsEventMsg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TaiTime.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Acc.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Gyro.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Mag.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Temp.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Baro.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Sync.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FirstPixel.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Fan.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Button.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Encoder.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotor.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MainBoard.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Timer.base,}};

static void InitDefaultsTaiTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_TaiTime_default_instance_;
    new (ptr) ::frl::device::wireformat::TaiTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::TaiTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaiTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaiTime}, {}};

static void InitDefaultsAcc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Acc_default_instance_;
    new (ptr) ::frl::device::wireformat::Acc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Acc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Acc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcc}, {}};

static void InitDefaultsGyro() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Gyro_default_instance_;
    new (ptr) ::frl::device::wireformat::Gyro();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Gyro::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gyro =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGyro}, {}};

static void InitDefaultsMag() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Mag_default_instance_;
    new (ptr) ::frl::device::wireformat::Mag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Mag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mag =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMag}, {}};

static void InitDefaultsBaro() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Baro_default_instance_;
    new (ptr) ::frl::device::wireformat::Baro();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Baro::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Baro =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBaro}, {}};

static void InitDefaultsTemp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Temp_default_instance_;
    new (ptr) ::frl::device::wireformat::Temp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Temp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Temp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTemp}, {}};

static void InitDefaultsSync() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Sync_default_instance_;
    new (ptr) ::frl::device::wireformat::Sync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Sync::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sync =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSync}, {}};

static void InitDefaultsFirstPixel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_FirstPixel_default_instance_;
    new (ptr) ::frl::device::wireformat::FirstPixel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::FirstPixel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirstPixel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirstPixel}, {}};

static void InitDefaultsFan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Fan_default_instance_;
    new (ptr) ::frl::device::wireformat::Fan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Fan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFan}, {}};

static void InitDefaultsButton() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Button_default_instance_;
    new (ptr) ::frl::device::wireformat::Button();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Button::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Button =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsButton}, {}};

static void InitDefaultsEncoder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Encoder_default_instance_;
    new (ptr) ::frl::device::wireformat::Encoder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Encoder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Encoder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoder}, {}};

static void InitDefaultsVFMotor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_VFMotor_default_instance_;
    new (ptr) ::frl::device::wireformat::VFMotor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::VFMotor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VFMotor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVFMotor}, {}};

static void InitDefaultsTimer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_Timer_default_instance_;
    new (ptr) ::frl::device::wireformat::Timer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::Timer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimer}, {}};

static void InitDefaultsMainBoard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_MainBoard_default_instance_;
    new (ptr) ::frl::device::wireformat::MainBoard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::MainBoard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MainBoard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMainBoard}, {}};

static void InitDefaultsDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_DeviceInfo_default_instance_;
    new (ptr) ::frl::device::wireformat::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_DeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsDeviceInfo}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceSerial.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FwVersion.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ProtocolVersion.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MfgDate.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_HwVersion.base,}};

static void InitDefaultsFwVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_FwVersion_default_instance_;
    new (ptr) ::frl::device::wireformat::FwVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::FwVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FwVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFwVersion}, {}};

static void InitDefaultsHwVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_HwVersion_default_instance_;
    new (ptr) ::frl::device::wireformat::HwVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::HwVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HwVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHwVersion}, {}};

static void InitDefaultsProtocolVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_ProtocolVersion_default_instance_;
    new (ptr) ::frl::device::wireformat::ProtocolVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::ProtocolVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtocolVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtocolVersion}, {}};

static void InitDefaultsMfgDate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_MfgDate_default_instance_;
    new (ptr) ::frl::device::wireformat::MfgDate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::MfgDate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MfgDate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMfgDate}, {}};

static void InitDefaultsDeviceSerial() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_DeviceSerial_default_instance_;
    new (ptr) ::frl::device::wireformat::DeviceSerial();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::DeviceSerial::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceSerial =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceSerial}, {}};

static void InitDefaultsToDeviceMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_ToDeviceMsg_default_instance_;
    new (ptr) ::frl::device::wireformat::ToDeviceMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::ToDeviceMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_ToDeviceMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsToDeviceMsg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TimerCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceSerial.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCmds.base,}};

static void InitDefaultsReplyMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_ReplyMsg_default_instance_;
    new (ptr) ::frl::device::wireformat::ReplyMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::ReplyMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<16> scc_info_ReplyMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsReplyMsg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TimerCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncCfg.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceInfo.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FwVersion.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_HwVersion.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ProtocolVersion.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MfgDate.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceSerial.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotor.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfgs.base,
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfgs.base,}};

static void InitDefaultsDispDriverCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_DispDriverCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::DispDriverCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::DispDriverCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DispDriverCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDispDriverCfg}, {}};

static void InitDefaultsDispDriverCfgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_DispDriverCfgs_default_instance_;
    new (ptr) ::frl::device::wireformat::DispDriverCfgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::DispDriverCfgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DispDriverCfgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDispDriverCfgs}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfg.base,}};

static void InitDefaultsGyroCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_GyroCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::GyroCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::GyroCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GyroCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGyroCfg}, {}};

static void InitDefaultsGyroCfgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_GyroCfgs_default_instance_;
    new (ptr) ::frl::device::wireformat::GyroCfgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::GyroCfgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GyroCfgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGyroCfgs}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfg.base,}};

static void InitDefaultsAccCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_AccCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::AccCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::AccCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AccCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccCfg}, {}};

static void InitDefaultsAccCfgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_AccCfgs_default_instance_;
    new (ptr) ::frl::device::wireformat::AccCfgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::AccCfgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccCfgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccCfgs}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfg.base,}};

static void InitDefaultsBaroCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_BaroCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::BaroCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::BaroCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BaroCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBaroCfg}, {}};

static void InitDefaultsBaroCfgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_BaroCfgs_default_instance_;
    new (ptr) ::frl::device::wireformat::BaroCfgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::BaroCfgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BaroCfgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBaroCfgs}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfg.base,}};

static void InitDefaultsFanCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_FanCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::FanCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::FanCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FanCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFanCfg}, {}};

static void InitDefaultsFanCfgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_FanCfgs_default_instance_;
    new (ptr) ::frl::device::wireformat::FanCfgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::FanCfgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FanCfgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFanCfgs}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfg.base,}};

static void InitDefaultsTimerCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_TimerCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::TimerCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::TimerCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TimerCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTimerCfg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TaiTime.base,}};

static void InitDefaultsTrigCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_TrigCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::TrigCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::TrigCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrigCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrigCfg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigChCfg.base,}};

static void InitDefaultsTrigChCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_TrigChCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::TrigChCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::TrigChCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrigChCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrigChCfg}, {}};

static void InitDefaultsSyncCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_SyncCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::SyncCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::SyncCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SyncCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSyncCfg}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncChCfg.base,}};

static void InitDefaultsSyncChCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_SyncChCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::SyncChCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::SyncChCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncChCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncChCfg}, {}};

static void InitDefaultsVFMotorCfg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_VFMotorCfg_default_instance_;
    new (ptr) ::frl::device::wireformat::VFMotorCfg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::VFMotorCfg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VFMotorCfg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVFMotorCfg}, {}};

static void InitDefaultsVFMotorCfgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_VFMotorCfgs_default_instance_;
    new (ptr) ::frl::device::wireformat::VFMotorCfgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::VFMotorCfgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VFMotorCfgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVFMotorCfgs}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfg.base,}};

static void InitDefaultsVFMotorCmd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_VFMotorCmd_default_instance_;
    new (ptr) ::frl::device::wireformat::VFMotorCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::VFMotorCmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VFMotorCmd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVFMotorCmd}, {}};

static void InitDefaultsVFMotorCmds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frl::device::wireformat::_VFMotorCmds_default_instance_;
    new (ptr) ::frl::device::wireformat::VFMotorCmds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frl::device::wireformat::VFMotorCmds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VFMotorCmds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVFMotorCmds}, {
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCmd.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ToHostMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EventMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaiTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Acc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gyro.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mag.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Baro.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Temp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sync.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirstPixel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Button.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Encoder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VFMotor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Timer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MainBoard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FwVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HwVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtocolVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MfgDate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceSerial.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ToDeviceMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplyMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DispDriverCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DispDriverCfgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GyroCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GyroCfgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccCfgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BaroCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BaroCfgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FanCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FanCfgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimerCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrigCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrigChCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncChCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VFMotorCfg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VFMotorCfgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VFMotorCmd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VFMotorCmds.base);
}

::google::protobuf::Metadata file_level_metadata[43];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToHostMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToHostMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToHostMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::frl::device::wireformat::ToHostMsgDefaultTypeInternal, tel_),
  offsetof(::frl::device::wireformat::ToHostMsgDefaultTypeInternal, reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToHostMsg, payload_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, accs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, gyros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, mags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, temps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, baros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, syncs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, fps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, fans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, buttons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, encoders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, vfs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, mbs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::EventMsg, timer_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TaiTime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TaiTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TaiTime, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TaiTime, ns_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, raw_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, raw_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, raw_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Acc, error_msg_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, raw_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, raw_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, raw_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Gyro, error_msg_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, raw_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, raw_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, raw_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Mag, error_msg_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Baro, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Baro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Baro, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Baro, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Baro, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Baro, error_msg_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Temp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Temp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Temp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Temp, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Temp, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Temp, error_msg_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Sync, error_msg_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, which_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FirstPixel, error_msg_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Fan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Fan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Fan, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Fan, raw_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Fan, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Fan, error_msg_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Button, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Button, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Button, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Button, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Button, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Button, error_msg_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Encoder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Encoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Encoder, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Encoder, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Encoder, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Encoder, error_msg_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, which_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, position_cnts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, set_point_cnts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, rate_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, error_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotor, flag_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::Timer, error_msg_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MainBoard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MainBoard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MainBoard, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MainBoard, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MainBoard, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MainBoard, error_msg_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, fw_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, p_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, mfg_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceInfo, hw_ver_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FwVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FwVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FwVersion, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FwVersion, minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FwVersion, sha_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::HwVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::HwVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::HwVersion, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::HwVersion, minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::HwVersion, model_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ProtocolVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ProtocolVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ProtocolVersion, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ProtocolVersion, minor_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::MfgDate, year_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceSerial, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceSerial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DeviceSerial, hex_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToDeviceMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToDeviceMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToDeviceMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToDeviceMsg, cmd_id_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_display_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_gyro_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_acc_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_baro_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_fan_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_timer_cfg_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_trig_cfg_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_sync_cfg_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_serial_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_vfmotor_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, set_vfmotor_cmd_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_display_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_gyro_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_acc_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_baro_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_fans_cfgs_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_timer_cfg_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_trig_cfg_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_sync_cfg_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_device_serial_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_board_info_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_protocol_version_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_fw_version_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_hw_version_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_mfg_date_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_vfmotor_states_),
  offsetof(::frl::device::wireformat::ToDeviceMsgDefaultTypeInternal, get_vfmotor_cfgs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ToDeviceMsg, Cmd_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, cmd_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, gyros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, accs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, baro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, fans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, trigs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, syncs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, fw_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, hw_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, p_ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, mfg_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, vfs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::ReplyMsg, vfmotor_cfg_),
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, brightness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, persistence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfg, on_offset_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfgs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::DispDriverCfgs, array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, odr_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, range_dps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfg, mode_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfgs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::GyroCfgs, array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, odr_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, range_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfg, mode_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfgs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::AccCfgs, array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfg, streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfg, raw_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfgs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::BaroCfgs, array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfg, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfg, streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfg, speed_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfgs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::FanCfgs, array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TimerCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TimerCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TimerCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TimerCfg, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TimerCfg, time_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigCfg, trig_ch_cfgs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigCfg, action_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, period_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, offset_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::TrigChCfg, active_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncCfg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncCfg, sync_ch_cfgs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncCfg, action_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncChCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncChCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncChCfg, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncChCfg, dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncChCfg, prescaler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::SyncChCfg, reset_cnt_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, pid_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, pid_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, pid_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, safety_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, step_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, windup_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, driver_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, microstepping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, enable_pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, enable_motor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, enable_stall_cur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, enable_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfg, streaming_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfgs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCfgs, array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmd, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmd, set_point_cnts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frl::device::wireformat::VFMotorCmds, array_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::frl::device::wireformat::ToHostMsg)},
  { 10, 29, sizeof(::frl::device::wireformat::EventMsg)},
  { 43, 50, sizeof(::frl::device::wireformat::TaiTime)},
  { 52, 63, sizeof(::frl::device::wireformat::Acc)},
  { 69, 80, sizeof(::frl::device::wireformat::Gyro)},
  { 86, 97, sizeof(::frl::device::wireformat::Mag)},
  { 103, 112, sizeof(::frl::device::wireformat::Baro)},
  { 116, 125, sizeof(::frl::device::wireformat::Temp)},
  { 129, 140, sizeof(::frl::device::wireformat::Sync)},
  { 146, 157, sizeof(::frl::device::wireformat::FirstPixel)},
  { 163, 172, sizeof(::frl::device::wireformat::Fan)},
  { 176, 185, sizeof(::frl::device::wireformat::Button)},
  { 189, 198, sizeof(::frl::device::wireformat::Encoder)},
  { 202, 216, sizeof(::frl::device::wireformat::VFMotor)},
  { 225, 235, sizeof(::frl::device::wireformat::Timer)},
  { 240, 249, sizeof(::frl::device::wireformat::MainBoard)},
  { 253, 263, sizeof(::frl::device::wireformat::DeviceInfo)},
  { 268, 276, sizeof(::frl::device::wireformat::FwVersion)},
  { 279, 287, sizeof(::frl::device::wireformat::HwVersion)},
  { 290, 297, sizeof(::frl::device::wireformat::ProtocolVersion)},
  { 299, 309, sizeof(::frl::device::wireformat::MfgDate)},
  { 314, 320, sizeof(::frl::device::wireformat::DeviceSerial)},
  { 321, 355, sizeof(::frl::device::wireformat::ToDeviceMsg)},
  { 383, 406, sizeof(::frl::device::wireformat::ReplyMsg)},
  { 424, 435, sizeof(::frl::device::wireformat::DispDriverCfg)},
  { 441, 447, sizeof(::frl::device::wireformat::DispDriverCfgs)},
  { 448, 458, sizeof(::frl::device::wireformat::GyroCfg)},
  { 463, 469, sizeof(::frl::device::wireformat::GyroCfgs)},
  { 470, 480, sizeof(::frl::device::wireformat::AccCfg)},
  { 485, 491, sizeof(::frl::device::wireformat::AccCfgs)},
  { 492, 500, sizeof(::frl::device::wireformat::BaroCfg)},
  { 503, 509, sizeof(::frl::device::wireformat::BaroCfgs)},
  { 510, 519, sizeof(::frl::device::wireformat::FanCfg)},
  { 523, 529, sizeof(::frl::device::wireformat::FanCfgs)},
  { 530, 538, sizeof(::frl::device::wireformat::TimerCfg)},
  { 541, 549, sizeof(::frl::device::wireformat::TrigCfg)},
  { 552, 562, sizeof(::frl::device::wireformat::TrigChCfg)},
  { 567, 575, sizeof(::frl::device::wireformat::SyncCfg)},
  { 578, 587, sizeof(::frl::device::wireformat::SyncChCfg)},
  { 591, 613, sizeof(::frl::device::wireformat::VFMotorCfg)},
  { 630, 636, sizeof(::frl::device::wireformat::VFMotorCfgs)},
  { 637, 644, sizeof(::frl::device::wireformat::VFMotorCmd)},
  { 646, 652, sizeof(::frl::device::wireformat::VFMotorCmds)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_ToHostMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_EventMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_TaiTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Acc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Gyro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Mag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Baro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Temp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Sync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_FirstPixel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Fan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Button_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Encoder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_VFMotor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_Timer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_MainBoard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_FwVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_HwVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_ProtocolVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_MfgDate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_DeviceSerial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_ToDeviceMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_ReplyMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_DispDriverCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_DispDriverCfgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_GyroCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_GyroCfgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_AccCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_AccCfgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_BaroCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_BaroCfgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_FanCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_FanCfgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_TimerCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_TrigCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_TrigChCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_SyncCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_SyncChCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_VFMotorCfg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_VFMotorCfgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_VFMotorCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frl::device::wireformat::_VFMotorCmds_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "p_wire_protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 43);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025p_wire_protocol.proto\022\025frl.device.wire"
      "format\"x\n\tToHostMsg\022.\n\003tel\030\001 \001(\0132\037.frl.d"
      "evice.wireformat.EventMsgH\000\0220\n\005reply\030\002 \001"
      "(\0132\037.frl.device.wireformat.ReplyMsgH\000B\t\n"
      "\007payload\"\377\004\n\010EventMsg\022*\n\002ts\030\001 \001(\0132\036.frl."
      "device.wireformat.TaiTime\022(\n\004accs\030\002 \003(\0132"
      "\032.frl.device.wireformat.Acc\022*\n\005gyros\030\003 \003"
      "(\0132\033.frl.device.wireformat.Gyro\022(\n\004mags\030"
      "\004 \003(\0132\032.frl.device.wireformat.Mag\022*\n\005tem"
      "ps\030\005 \003(\0132\033.frl.device.wireformat.Temp\022*\n"
      "\005baros\030\006 \003(\0132\033.frl.device.wireformat.Bar"
      "o\022*\n\005syncs\030\007 \003(\0132\033.frl.device.wireformat"
      ".Sync\022.\n\003fps\030\010 \003(\0132!.frl.device.wireform"
      "at.FirstPixel\022(\n\004fans\030\t \003(\0132\032.frl.device"
      ".wireformat.Fan\022.\n\007buttons\030\n \003(\0132\035.frl.d"
      "evice.wireformat.Button\0220\n\010encoders\030\013 \003("
      "\0132\036.frl.device.wireformat.Encoder\022+\n\003vfs"
      "\030\014 \003(\0132\036.frl.device.wireformat.VFMotor\022-"
      "\n\003mbs\030\r \003(\0132 .frl.device.wireformat.Main"
      "Board\022+\n\005timer\030\016 \003(\0132\034.frl.device.wirefo"
      "rmat.Timer\" \n\007TaiTime\022\t\n\001s\030\001 \001(\004\022\n\n\002ns\030\002"
      " \001(\r\"e\n\003Acc\022\n\n\002id\030\001 \002(\r\022\r\n\005raw_x\030\002 \001(\r\022\r"
      "\n\005raw_y\030\003 \001(\r\022\r\n\005raw_z\030\004 \001(\r\022\022\n\nerror_co"
      "de\030\005 \001(\r\022\021\n\terror_msg\030\006 \001(\t\"f\n\004Gyro\022\n\n\002i"
      "d\030\001 \002(\r\022\r\n\005raw_x\030\002 \001(\r\022\r\n\005raw_y\030\003 \001(\r\022\r\n"
      "\005raw_z\030\004 \001(\r\022\022\n\nerror_code\030\005 \001(\r\022\021\n\terro"
      "r_msg\030\006 \001(\t\"e\n\003Mag\022\n\n\002id\030\001 \002(\r\022\r\n\005raw_x\030"
      "\002 \001(\r\022\r\n\005raw_y\030\003 \001(\r\022\r\n\005raw_z\030\004 \001(\r\022\022\n\ne"
      "rror_code\030\005 \001(\r\022\021\n\terror_msg\030\006 \001(\t\"F\n\004Ba"
      "ro\022\n\n\002id\030\001 \002(\r\022\013\n\003raw\030\002 \001(\r\022\022\n\nerror_cod"
      "e\030\003 \001(\r\022\021\n\terror_msg\030\004 \001(\t\"F\n\004Temp\022\n\n\002id"
      "\030\001 \002(\r\022\013\n\003raw\030\002 \001(\r\022\022\n\nerror_code\030\003 \001(\r\022"
      "\021\n\terror_msg\030\004 \001(\t\"\265\001\n\004Sync\022\n\n\002id\030\001 \002(\r\022"
      "\017\n\007channel\030\002 \001(\r\022,\n\003dir\030\003 \001(\0162\037.frl.devi"
      "ce.wireformat.Sync.DIR\022\r\n\005count\030\004 \001(\r\022\022\n"
      "\nerror_code\030\005 \001(\r\022\021\n\terror_msg\030\006 \001(\t\",\n\003"
      "DIR\022\013\n\007UNKNOWN\020\000\022\013\n\007RAISING\020\001\022\013\n\007FALLING"
      "\020\002\"\272\001\n\nFirstPixel\022\n\n\002id\030\001 \002(\r\0223\n\005which\030\002"
      " \001(\0162$.frl.device.wireformat.FirstPixel."
      "LR\022\r\n\005value\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\022\022\n\nerro"
      "r_code\030\005 \001(\r\022\021\n\terror_msg\030\006 \001(\t\"&\n\002LR\022\013\n"
      "\007UNKNOWN\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"K\n\003Fan\022\n"
      "\n\002id\030\001 \002(\r\022\021\n\traw_speed\030\002 \001(\r\022\022\n\nerror_c"
      "ode\030\003 \001(\r\022\021\n\terror_msg\030\004 \001(\t\"J\n\006Button\022\n"
      "\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \001(\010\022\022\n\nerror_code\030"
      "\003 \001(\r\022\021\n\terror_msg\030\004 \001(\t\"I\n\007Encoder\022\n\n\002i"
      "d\030\001 \002(\r\022\013\n\003raw\030\002 \001(\r\022\022\n\nerror_code\030\003 \001(\r"
      "\022\021\n\terror_msg\030\004 \001(\t\"\302\002\n\007VFMotor\022\n\n\002id\030\001 "
      "\002(\r\0220\n\005which\030\002 \001(\0162!.frl.device.wireform"
      "at.VFMotor.LR\022\025\n\rposition_cnts\030\003 \001(\r\022\026\n\016"
      "set_point_cnts\030\004 \001(\r\022\020\n\010rate_rpm\030\005 \001(\002\022\022"
      "\n\nerror_code\030\006 \001(\r\022\021\n\terror_msg\030\007 \001(\t\0223\n"
      "\005event\030\010 \001(\0162$.frl.device.wireformat.VFM"
      "otor.Event\022\014\n\004flag\030\t \001(\010\"&\n\002LR\022\013\n\007UNKNOW"
      "N\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"&\n\005Event\022\010\n\004NON"
      "E\020\000\022\023\n\017HOMING_COMPLETE\020\001\"\211\002\n\005Timer\022\n\n\002id"
      "\030\001 \002(\r\0220\n\003src\030\002 \001(\0162#.frl.device.wirefor"
      "mat.Timer.Source\0223\n\006status\030\003 \001(\0162#.frl.d"
      "evice.wireformat.Timer.Status\022\022\n\nerror_c"
      "ode\030\004 \001(\r\022\021\n\terror_msg\030\005 \001(\t\"0\n\006Source\022\013"
      "\n\007UNKNOWN\020\000\022\014\n\010INTERNAL\020\001\022\013\n\007EXTRNAL\020\002\"4"
      "\n\006Status\022\r\n\tUNDEFINED\020\000\022\r\n\tADJUSTING\020\001\022\014"
      "\n\010TRACKING\020\002\"\264\001\n\tMainBoard\022\n\n\002id\030\001 \002(\r\0227"
      "\n\006status\030\002 \002(\0162\'.frl.device.wireformat.M"
      "ainBoard.Status\022\022\n\nerror_code\030\003 \001(\r\022\021\n\te"
      "rror_msg\030\004 \001(\t\";\n\006Status\022\013\n\007UNKNOWN\020\000\022\013\n"
      "\007BOOTING\020\001\022\006\n\002OK\020\002\022\017\n\013TERMINATING\020\003\"\216\002\n\n"
      "DeviceInfo\0223\n\006serial\030\001 \001(\0132#.frl.device."
      "wireformat.DeviceSerial\0220\n\006fw_ver\030\002 \001(\0132"
      " .frl.device.wireformat.FwVersion\0225\n\005p_v"
      "er\030\003 \001(\0132&.frl.device.wireformat.Protoco"
      "lVersion\0220\n\010mfg_date\030\004 \001(\0132\036.frl.device."
      "wireformat.MfgDate\0220\n\006hw_ver\030\005 \001(\0132 .frl"
      ".device.wireformat.HwVersion\"6\n\tFwVersio"
      "n\022\r\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 \001(\r\022\013\n\003sha\030\003"
      " \001(\014\"8\n\tHwVersion\022\r\n\005major\030\001 \001(\r\022\r\n\005mino"
      "r\030\002 \001(\r\022\r\n\005model\030\003 \001(\t\"/\n\017ProtocolVersio"
      "n\022\r\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 \001(\r\"N\n\007MfgDa"
      "te\022\014\n\004hour\030\001 \001(\r\022\013\n\003min\030\002 \001(\r\022\013\n\003day\030\003 \001"
      "(\r\022\r\n\005month\030\004 \001(\r\022\014\n\004year\030\005 \001(\r\"\033\n\014Devic"
      "eSerial\022\013\n\003hex\030\002 \001(\014\"\324\010\n\013ToDeviceMsg\022\016\n\006"
      "cmd_id\030\001 \001(\r\022A\n\020set_display_cfgs\030\002 \001(\0132%"
      ".frl.device.wireformat.DispDriverCfgsH\000\022"
      "8\n\rset_gyro_cfgs\030\003 \001(\0132\037.frl.device.wire"
      "format.GyroCfgsH\000\0226\n\014set_acc_cfgs\030\004 \001(\0132"
      "\036.frl.device.wireformat.AccCfgsH\000\0228\n\rset"
      "_baro_cfgs\030\005 \001(\0132\037.frl.device.wireformat"
      ".BaroCfgsH\000\0226\n\014set_fan_cfgs\030\006 \001(\0132\036.frl."
      "device.wireformat.FanCfgsH\000\0228\n\rset_timer"
      "_cfg\030\007 \001(\0132\037.frl.device.wireformat.Timer"
      "CfgH\000\0226\n\014set_trig_cfg\030\010 \001(\0132\036.frl.device"
      ".wireformat.TrigCfgH\000\0226\n\014set_sync_cfg\030\t "
      "\001(\0132\036.frl.device.wireformat.SyncCfgH\000\0229\n"
      "\nset_serial\030\n \001(\0132#.frl.device.wireforma"
      "t.DeviceSerialH\000\022>\n\020set_vfmotor_cfgs\030\013 \001"
      "(\0132\".frl.device.wireformat.VFMotorCfgsH\000"
      "\022=\n\017set_vfmotor_cmd\030\014 \001(\0132\".frl.device.w"
      "ireformat.VFMotorCmdsH\000\022\032\n\020get_display_c"
      "fgs\030\025 \001(\010H\000\022\027\n\rget_gyro_cfgs\030\026 \001(\010H\000\022\026\n\014"
      "get_acc_cfgs\030\027 \001(\010H\000\022\027\n\rget_baro_cfgs\030\030 "
      "\001(\010H\000\022\027\n\rget_fans_cfgs\030\031 \001(\010H\000\022\027\n\rget_ti"
      "mer_cfg\030\032 \001(\010H\000\022\026\n\014get_trig_cfg\030\033 \001(\010H\000\022"
      "\026\n\014get_sync_cfg\030\034 \001(\010H\000\022\033\n\021get_device_se"
      "rial\030\035 \001(\010H\000\022\030\n\016get_board_info\030\036 \001(\010H\000\022\036"
      "\n\024get_protocol_version\030\037 \001(\010H\000\022\030\n\016get_fw"
      "_version\030  \001(\010H\000\022\030\n\016get_hw_version\030! \001(\010"
      "H\000\022\026\n\014get_mfg_date\030\" \001(\010H\000\022\034\n\022get_vfmoto"
      "r_states\030# \001(\010H\000\022\032\n\020get_vfmotor_cfgs\030$ \001"
      "(\010H\000B\005\n\003Cmd\"\275\006\n\010ReplyMsg\022\016\n\006cmd_id\030\001 \002(\r"
      "\022\013\n\003ack\030\002 \001(\010\022-\n\005gyros\030\003 \003(\0132\036.frl.devic"
      "e.wireformat.GyroCfg\022+\n\004accs\030\004 \003(\0132\035.frl"
      ".device.wireformat.AccCfg\022,\n\004baro\030\005 \003(\0132"
      "\036.frl.device.wireformat.BaroCfg\022+\n\004fans\030"
      "\006 \003(\0132\035.frl.device.wireformat.FanCfg\022.\n\005"
      "timer\030\007 \001(\0132\037.frl.device.wireformat.Time"
      "rCfg\022-\n\005trigs\030\010 \003(\0132\036.frl.device.wirefor"
      "mat.TrigCfg\022-\n\005syncs\030\t \003(\0132\036.frl.device."
      "wireformat.SyncCfg\022/\n\004info\030\n \001(\0132!.frl.d"
      "evice.wireformat.DeviceInfo\0220\n\006fw_ver\030\013 "
      "\001(\0132 .frl.device.wireformat.FwVersion\0220\n"
      "\006hw_ver\030\014 \001(\0132 .frl.device.wireformat.Hw"
      "Version\0225\n\005p_ver\030\r \001(\0132&.frl.device.wire"
      "format.ProtocolVersion\0220\n\010mfg_date\030\016 \001(\013"
      "2\036.frl.device.wireformat.MfgDate\0223\n\006seri"
      "al\030\017 \001(\0132#.frl.device.wireformat.DeviceS"
      "erial\022+\n\003vfs\030\020 \003(\0132\036.frl.device.wireform"
      "at.VFMotor\0226\n\007display\030\021 \001(\0132%.frl.device"
      ".wireformat.DispDriverCfgs\0227\n\013vfmotor_cf"
      "g\030\022 \003(\0132\".frl.device.wireformat.VFMotorC"
      "fgs\"\325\001\n\rDispDriverCfg\022\n\n\002id\030\001 \002(\r\022\016\n\006act"
      "ive\030\002 \002(\010\022\022\n\nbrightness\030\003 \001(\r\022A\n\004mode\030\004 "
      "\001(\01623.frl.device.wireformat.DispDriverCf"
      "g.DispDriverMode\022\023\n\013persistence\030\005 \001(\r\022\021\n"
      "\ton_offset\030\006 \001(\r\")\n\016DispDriverMode\022\n\n\006GL"
      "OBAL\020\000\022\013\n\007ROLLING\020\001\"E\n\016DispDriverCfgs\0223\n"
      "\005array\030\001 \003(\0132$.frl.device.wireformat.Dis"
      "pDriverCfg\"Y\n\007GyroCfg\022\n\n\002id\030\001 \002(\r\022\021\n\tstr"
      "eaming\030\002 \001(\010\022\016\n\006odr_hz\030\003 \001(\r\022\021\n\trange_dp"
      "s\030\004 \001(\r\022\014\n\004mode\030\005 \001(\r\"9\n\010GyroCfgs\022-\n\005arr"
      "ay\030\001 \003(\0132\036.frl.device.wireformat.GyroCfg"
      "\"V\n\006AccCfg\022\n\n\002id\030\001 \002(\r\022\021\n\tstreaming\030\002 \001("
      "\010\022\016\n\006odr_hz\030\003 \001(\r\022\017\n\007range_g\030\004 \001(\r\022\014\n\004mo"
      "de\030\005 \001(\r\"7\n\007AccCfgs\022,\n\005array\030\001 \003(\0132\035.frl"
      ".device.wireformat.AccCfg\"5\n\007BaroCfg\022\n\n\002"
      "id\030\001 \002(\r\022\021\n\tstreaming\030\002 \001(\010\022\013\n\003raw\030\003 \003(\r"
      "\"9\n\010BaroCfgs\022-\n\005array\030\001 \003(\0132\036.frl.device"
      ".wireformat.BaroCfg\"F\n\006FanCfg\022\n\n\002id\030\001 \002("
      "\r\022\016\n\006active\030\002 \001(\010\022\021\n\tstreaming\030\003 \001(\010\022\r\n\005"
      "speed\030\004 \001(\r\"7\n\007FanCfgs\022,\n\005array\030\001 \003(\0132\035."
      "frl.device.wireformat.FanCfg\"\257\001\n\010TimerCf"
      "g\022\n\n\002id\030\001 \002(\r\0226\n\006source\030\002 \001(\0162&.frl.devi"
      "ce.wireformat.TimerCfg.Source\022,\n\004time\030\003 "
      "\001(\0132\036.frl.device.wireformat.TaiTime\"1\n\006S"
      "ource\022\013\n\007UNKNOWN\020\000\022\014\n\010INTERNAL\020\001\022\014\n\010EXTE"
      "RNAL\020\002\"\271\001\n\007TrigCfg\022\n\n\002id\030\001 \002(\r\0226\n\014trig_c"
      "h_cfgs\030\002 \003(\0132 .frl.device.wireformat.Tri"
      "gChCfg\0225\n\006action\030\003 \001(\0162%.frl.device.wire"
      "format.TrigCfg.Action\"3\n\006Action\022\024\n\020START"
      "_ALL_ACTIVE\020\000\022\023\n\017STOP_ALL_ACTIVE\020\001\"b\n\tTr"
      "igChCfg\022\017\n\007channel\030\001 \001(\r\022\021\n\tperiod_us\030\002 "
      "\001(\r\022\021\n\toffset_us\030\003 \001(\r\022\016\n\006master\030\004 \001(\r\022\016"
      "\n\006active\030\005 \001(\010\"\271\001\n\007SyncCfg\022\n\n\002id\030\001 \002(\r\0226"
      "\n\014sync_ch_cfgs\030\002 \003(\0132 .frl.device.wirefo"
      "rmat.SyncChCfg\0225\n\006action\030\003 \001(\0162%.frl.dev"
      "ice.wireformat.SyncCfg.Action\"3\n\006Action\022"
      "\024\n\020START_ALL_ACTIVE\020\000\022\023\n\017STOP_ALL_ACTIVE"
      "\020\001\"\257\001\n\tSyncChCfg\022\017\n\007channel\030\001 \001(\r\0221\n\003dir"
      "\030\002 \001(\0162$.frl.device.wireformat.SyncChCfg"
      ".DIR\022\021\n\tprescaler\030\003 \001(\r\022\021\n\treset_cnt\030\004 \001"
      "(\010\"8\n\003DIR\022\r\n\tNOTACTIVE\020\000\022\013\n\007RAISING\020\001\022\013\n"
      "\007FALLING\020\002\022\010\n\004BOTH\020\003\"\324\002\n\nVFMotorCfg\022\r\n\005p"
      "id_P\030\001 \001(\002\022\r\n\005pid_I\030\002 \001(\002\022\r\n\005pid_D\030\003 \001(\002"
      "\022\025\n\rsafety_margin\030\004 \001(\002\022\022\n\nstep_limit\030\005 "
      "\001(\002\022\023\n\013accel_limit\030\006 \001(\002\022\024\n\014windup_limit"
      "\030\007 \001(\r\022\026\n\016driver_current\030\010 \001(\r\022\025\n\rmicros"
      "tepping\030\t \001(\r\022\013\n\003min\030\n \001(\r\022\013\n\003max\030\013 \001(\r\022"
      "\016\n\006offset\030\014 \001(\r\022\022\n\nenable_pid\030\r \001(\010\022\024\n\014e"
      "nable_motor\030\016 \001(\010\022\030\n\020enable_stall_cur\030\017 "
      "\001(\010\022\023\n\013enable_flag\030\020 \001(\010\022\021\n\tstreaming\030\021 "
      "\001(\010\"\?\n\013VFMotorCfgs\0220\n\005array\030\001 \003(\0132!.frl."
      "device.wireformat.VFMotorCfg\"0\n\nVFMotorC"
      "md\022\n\n\002id\030\001 \001(\r\022\026\n\016set_point_cnts\030\002 \001(\r\"\?"
      "\n\013VFMotorCmds\0220\n\005array\030\001 \003(\0132!.frl.devic"
      "e.wireformat.VFMotorCmd"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7343);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p_wire_protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_p_5fwire_5fprotocol_2eproto
namespace frl {
namespace device {
namespace wireformat {
const ::google::protobuf::EnumDescriptor* Sync_DIR_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[0];
}
bool Sync_DIR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sync_DIR Sync::UNKNOWN;
const Sync_DIR Sync::RAISING;
const Sync_DIR Sync::FALLING;
const Sync_DIR Sync::DIR_MIN;
const Sync_DIR Sync::DIR_MAX;
const int Sync::DIR_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FirstPixel_LR_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[1];
}
bool FirstPixel_LR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FirstPixel_LR FirstPixel::UNKNOWN;
const FirstPixel_LR FirstPixel::LEFT;
const FirstPixel_LR FirstPixel::RIGHT;
const FirstPixel_LR FirstPixel::LR_MIN;
const FirstPixel_LR FirstPixel::LR_MAX;
const int FirstPixel::LR_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VFMotor_LR_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[2];
}
bool VFMotor_LR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VFMotor_LR VFMotor::UNKNOWN;
const VFMotor_LR VFMotor::LEFT;
const VFMotor_LR VFMotor::RIGHT;
const VFMotor_LR VFMotor::LR_MIN;
const VFMotor_LR VFMotor::LR_MAX;
const int VFMotor::LR_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VFMotor_Event_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[3];
}
bool VFMotor_Event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VFMotor_Event VFMotor::NONE;
const VFMotor_Event VFMotor::HOMING_COMPLETE;
const VFMotor_Event VFMotor::Event_MIN;
const VFMotor_Event VFMotor::Event_MAX;
const int VFMotor::Event_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Timer_Source_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[4];
}
bool Timer_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Timer_Source Timer::UNKNOWN;
const Timer_Source Timer::INTERNAL;
const Timer_Source Timer::EXTRNAL;
const Timer_Source Timer::Source_MIN;
const Timer_Source Timer::Source_MAX;
const int Timer::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Timer_Status_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[5];
}
bool Timer_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Timer_Status Timer::UNDEFINED;
const Timer_Status Timer::ADJUSTING;
const Timer_Status Timer::TRACKING;
const Timer_Status Timer::Status_MIN;
const Timer_Status Timer::Status_MAX;
const int Timer::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MainBoard_Status_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[6];
}
bool MainBoard_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainBoard_Status MainBoard::UNKNOWN;
const MainBoard_Status MainBoard::BOOTING;
const MainBoard_Status MainBoard::OK;
const MainBoard_Status MainBoard::TERMINATING;
const MainBoard_Status MainBoard::Status_MIN;
const MainBoard_Status MainBoard::Status_MAX;
const int MainBoard::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DispDriverCfg_DispDriverMode_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[7];
}
bool DispDriverCfg_DispDriverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DispDriverCfg_DispDriverMode DispDriverCfg::GLOBAL;
const DispDriverCfg_DispDriverMode DispDriverCfg::ROLLING;
const DispDriverCfg_DispDriverMode DispDriverCfg::DispDriverMode_MIN;
const DispDriverCfg_DispDriverMode DispDriverCfg::DispDriverMode_MAX;
const int DispDriverCfg::DispDriverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimerCfg_Source_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[8];
}
bool TimerCfg_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimerCfg_Source TimerCfg::UNKNOWN;
const TimerCfg_Source TimerCfg::INTERNAL;
const TimerCfg_Source TimerCfg::EXTERNAL;
const TimerCfg_Source TimerCfg::Source_MIN;
const TimerCfg_Source TimerCfg::Source_MAX;
const int TimerCfg::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrigCfg_Action_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[9];
}
bool TrigCfg_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrigCfg_Action TrigCfg::START_ALL_ACTIVE;
const TrigCfg_Action TrigCfg::STOP_ALL_ACTIVE;
const TrigCfg_Action TrigCfg::Action_MIN;
const TrigCfg_Action TrigCfg::Action_MAX;
const int TrigCfg::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SyncCfg_Action_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[10];
}
bool SyncCfg_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SyncCfg_Action SyncCfg::START_ALL_ACTIVE;
const SyncCfg_Action SyncCfg::STOP_ALL_ACTIVE;
const SyncCfg_Action SyncCfg::Action_MIN;
const SyncCfg_Action SyncCfg::Action_MAX;
const int SyncCfg::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SyncChCfg_DIR_descriptor() {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p_5fwire_5fprotocol_2eproto::file_level_enum_descriptors[11];
}
bool SyncChCfg_DIR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SyncChCfg_DIR SyncChCfg::NOTACTIVE;
const SyncChCfg_DIR SyncChCfg::RAISING;
const SyncChCfg_DIR SyncChCfg::FALLING;
const SyncChCfg_DIR SyncChCfg::BOTH;
const SyncChCfg_DIR SyncChCfg::DIR_MIN;
const SyncChCfg_DIR SyncChCfg::DIR_MAX;
const int SyncChCfg::DIR_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ToHostMsg::InitAsDefaultInstance() {
  ::frl::device::wireformat::_ToHostMsg_default_instance_.tel_ = const_cast< ::frl::device::wireformat::EventMsg*>(
      ::frl::device::wireformat::EventMsg::internal_default_instance());
  ::frl::device::wireformat::_ToHostMsg_default_instance_.reply_ = const_cast< ::frl::device::wireformat::ReplyMsg*>(
      ::frl::device::wireformat::ReplyMsg::internal_default_instance());
}
void ToHostMsg::set_allocated_tel(::frl::device::wireformat::EventMsg* tel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tel, submessage_arena);
    }
    set_has_tel();
    payload_.tel_ = tel;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToHostMsg.tel)
}
void ToHostMsg::set_allocated_reply(::frl::device::wireformat::ReplyMsg* reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    set_has_reply();
    payload_.reply_ = reply;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToHostMsg.reply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToHostMsg::kTelFieldNumber;
const int ToHostMsg::kReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToHostMsg::ToHostMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ToHostMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.ToHostMsg)
}
ToHostMsg::ToHostMsg(const ToHostMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kTel: {
      mutable_tel()->::frl::device::wireformat::EventMsg::MergeFrom(from.tel());
      break;
    }
    case kReply: {
      mutable_reply()->::frl::device::wireformat::ReplyMsg::MergeFrom(from.reply());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.ToHostMsg)
}

void ToHostMsg::SharedCtor() {
  clear_has_payload();
}

ToHostMsg::~ToHostMsg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.ToHostMsg)
  SharedDtor();
}

void ToHostMsg::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void ToHostMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ToHostMsg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToHostMsg& ToHostMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ToHostMsg.base);
  return *internal_default_instance();
}


void ToHostMsg::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:frl.device.wireformat.ToHostMsg)
  switch (payload_case()) {
    case kTel: {
      delete payload_.tel_;
      break;
    }
    case kReply: {
      delete payload_.reply_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ToHostMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.ToHostMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToHostMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.ToHostMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .frl.device.wireformat.EventMsg tel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.ReplyMsg reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.ToHostMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.ToHostMsg)
  return false;
#undef DO_
}

void ToHostMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.ToHostMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (payload_case()) {
    case kTel:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_tel(), output);
      break;
    case kReply:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_reply(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.ToHostMsg)
}

::google::protobuf::uint8* ToHostMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.ToHostMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (payload_case()) {
    case kTel:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_tel(), deterministic, target);
      break;
    case kReply:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_reply(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.ToHostMsg)
  return target;
}

size_t ToHostMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.ToHostMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (payload_case()) {
    // optional .frl.device.wireformat.EventMsg tel = 1;
    case kTel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.tel_);
      break;
    }
    // optional .frl.device.wireformat.ReplyMsg reply = 2;
    case kReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.reply_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToHostMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.ToHostMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ToHostMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToHostMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.ToHostMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.ToHostMsg)
    MergeFrom(*source);
  }
}

void ToHostMsg::MergeFrom(const ToHostMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.ToHostMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kTel: {
      mutable_tel()->::frl::device::wireformat::EventMsg::MergeFrom(from.tel());
      break;
    }
    case kReply: {
      mutable_reply()->::frl::device::wireformat::ReplyMsg::MergeFrom(from.reply());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void ToHostMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.ToHostMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToHostMsg::CopyFrom(const ToHostMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.ToHostMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToHostMsg::IsInitialized() const {
  switch (payload_case()) {
    case kTel: {
      if (has_tel()) {
        if (!this->tel().IsInitialized()) return false;
      }
      break;
    }
    case kReply: {
      if (has_reply()) {
        if (!this->reply().IsInitialized()) return false;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ToHostMsg::Swap(ToHostMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToHostMsg::InternalSwap(ToHostMsg* other) {
  using std::swap;
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ToHostMsg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EventMsg::InitAsDefaultInstance() {
  ::frl::device::wireformat::_EventMsg_default_instance_._instance.get_mutable()->ts_ = const_cast< ::frl::device::wireformat::TaiTime*>(
      ::frl::device::wireformat::TaiTime::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventMsg::kTsFieldNumber;
const int EventMsg::kAccsFieldNumber;
const int EventMsg::kGyrosFieldNumber;
const int EventMsg::kMagsFieldNumber;
const int EventMsg::kTempsFieldNumber;
const int EventMsg::kBarosFieldNumber;
const int EventMsg::kSyncsFieldNumber;
const int EventMsg::kFpsFieldNumber;
const int EventMsg::kFansFieldNumber;
const int EventMsg::kButtonsFieldNumber;
const int EventMsg::kEncodersFieldNumber;
const int EventMsg::kVfsFieldNumber;
const int EventMsg::kMbsFieldNumber;
const int EventMsg::kTimerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventMsg::EventMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_EventMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.EventMsg)
}
EventMsg::EventMsg(const EventMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      accs_(from.accs_),
      gyros_(from.gyros_),
      mags_(from.mags_),
      temps_(from.temps_),
      baros_(from.baros_),
      syncs_(from.syncs_),
      fps_(from.fps_),
      fans_(from.fans_),
      buttons_(from.buttons_),
      encoders_(from.encoders_),
      vfs_(from.vfs_),
      mbs_(from.mbs_),
      timer_(from.timer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ts()) {
    ts_ = new ::frl::device::wireformat::TaiTime(*from.ts_);
  } else {
    ts_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.EventMsg)
}

void EventMsg::SharedCtor() {
  ts_ = NULL;
}

EventMsg::~EventMsg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.EventMsg)
  SharedDtor();
}

void EventMsg::SharedDtor() {
  if (this != internal_default_instance()) delete ts_;
}

void EventMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EventMsg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventMsg& EventMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_EventMsg.base);
  return *internal_default_instance();
}


void EventMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.EventMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accs_.Clear();
  gyros_.Clear();
  mags_.Clear();
  temps_.Clear();
  baros_.Clear();
  syncs_.Clear();
  fps_.Clear();
  fans_.Clear();
  buttons_.Clear();
  encoders_.Clear();
  vfs_.Clear();
  mbs_.Clear();
  timer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ts_ != NULL);
    ts_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.EventMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .frl.device.wireformat.TaiTime ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Acc accs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Gyro gyros = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gyros()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Mag mags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Temp temps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_temps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Baro baros = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_baros()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Sync syncs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_syncs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.FirstPixel fps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Fan fans = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Button buttons = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buttons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Encoder encoders = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_encoders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.VFMotor vfs = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vfs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.MainBoard mbs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mbs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.Timer timer = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.EventMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.EventMsg)
  return false;
#undef DO_
}

void EventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.EventMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .frl.device.wireformat.TaiTime ts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ts(), output);
  }

  // repeated .frl.device.wireformat.Acc accs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->accs(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Gyro gyros = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gyros_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->gyros(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Mag mags = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->mags(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Temp temps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->temps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->temps(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Baro baros = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->baros_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->baros(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Sync syncs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syncs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->syncs(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.FirstPixel fps = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->fps(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Fan fans = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->fans(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Button buttons = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buttons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->buttons(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Encoder encoders = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->encoders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->encoders(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.VFMotor vfs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vfs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->vfs(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.MainBoard mbs = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mbs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->mbs(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.Timer timer = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->timer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.EventMsg)
}

::google::protobuf::uint8* EventMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.EventMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .frl.device.wireformat.TaiTime ts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ts(), deterministic, target);
  }

  // repeated .frl.device.wireformat.Acc accs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->accs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Gyro gyros = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gyros_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->gyros(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Mag mags = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->mags(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Temp temps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->temps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->temps(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Baro baros = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->baros_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->baros(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Sync syncs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syncs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->syncs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.FirstPixel fps = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->fps(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Fan fans = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->fans(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Button buttons = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buttons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->buttons(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Encoder encoders = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->encoders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->encoders(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.VFMotor vfs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vfs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->vfs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.MainBoard mbs = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mbs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->mbs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.Timer timer = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->timer(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.EventMsg)
  return target;
}

size_t EventMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.EventMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.Acc accs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->accs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Gyro gyros = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->gyros_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gyros(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Mag mags = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mags(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Temp temps = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->temps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->temps(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Baro baros = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->baros_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->baros(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Sync syncs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->syncs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->syncs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.FirstPixel fps = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->fps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fps(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Fan fans = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->fans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fans(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Button buttons = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->buttons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buttons(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Encoder encoders = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->encoders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->encoders(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.VFMotor vfs = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->vfs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vfs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.MainBoard mbs = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->mbs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mbs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.Timer timer = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->timer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timer(static_cast<int>(i)));
    }
  }

  // optional .frl.device.wireformat.TaiTime ts = 1;
  if (has_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ts_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.EventMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EventMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.EventMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.EventMsg)
    MergeFrom(*source);
  }
}

void EventMsg::MergeFrom(const EventMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.EventMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accs_.MergeFrom(from.accs_);
  gyros_.MergeFrom(from.gyros_);
  mags_.MergeFrom(from.mags_);
  temps_.MergeFrom(from.temps_);
  baros_.MergeFrom(from.baros_);
  syncs_.MergeFrom(from.syncs_);
  fps_.MergeFrom(from.fps_);
  fans_.MergeFrom(from.fans_);
  buttons_.MergeFrom(from.buttons_);
  encoders_.MergeFrom(from.encoders_);
  vfs_.MergeFrom(from.vfs_);
  mbs_.MergeFrom(from.mbs_);
  timer_.MergeFrom(from.timer_);
  if (from.has_ts()) {
    mutable_ts()->::frl::device::wireformat::TaiTime::MergeFrom(from.ts());
  }
}

void EventMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.EventMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventMsg::CopyFrom(const EventMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.EventMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMsg::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->accs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gyros())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mags())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->temps())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->baros())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->syncs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fps())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fans())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buttons())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->encoders())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vfs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mbs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->timer())) return false;
  return true;
}

void EventMsg::Swap(EventMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventMsg::InternalSwap(EventMsg* other) {
  using std::swap;
  CastToBase(&accs_)->InternalSwap(CastToBase(&other->accs_));
  CastToBase(&gyros_)->InternalSwap(CastToBase(&other->gyros_));
  CastToBase(&mags_)->InternalSwap(CastToBase(&other->mags_));
  CastToBase(&temps_)->InternalSwap(CastToBase(&other->temps_));
  CastToBase(&baros_)->InternalSwap(CastToBase(&other->baros_));
  CastToBase(&syncs_)->InternalSwap(CastToBase(&other->syncs_));
  CastToBase(&fps_)->InternalSwap(CastToBase(&other->fps_));
  CastToBase(&fans_)->InternalSwap(CastToBase(&other->fans_));
  CastToBase(&buttons_)->InternalSwap(CastToBase(&other->buttons_));
  CastToBase(&encoders_)->InternalSwap(CastToBase(&other->encoders_));
  CastToBase(&vfs_)->InternalSwap(CastToBase(&other->vfs_));
  CastToBase(&mbs_)->InternalSwap(CastToBase(&other->mbs_));
  CastToBase(&timer_)->InternalSwap(CastToBase(&other->timer_));
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EventMsg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaiTime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaiTime::kSFieldNumber;
const int TaiTime::kNsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaiTime::TaiTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TaiTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.TaiTime)
}
TaiTime::TaiTime(const TaiTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&ns_) -
    reinterpret_cast<char*>(&s_)) + sizeof(ns_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.TaiTime)
}

void TaiTime::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ns_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ns_));
}

TaiTime::~TaiTime() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.TaiTime)
  SharedDtor();
}

void TaiTime::SharedDtor() {
}

void TaiTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaiTime::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaiTime& TaiTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TaiTime.base);
  return *internal_default_instance();
}


void TaiTime::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.TaiTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ns_) -
        reinterpret_cast<char*>(&s_)) + sizeof(ns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaiTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.TaiTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.TaiTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.TaiTime)
  return false;
#undef DO_
}

void TaiTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.TaiTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->s(), output);
  }

  // optional uint32 ns = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ns(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.TaiTime)
}

::google::protobuf::uint8* TaiTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.TaiTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->s(), target);
  }

  // optional uint32 ns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ns(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.TaiTime)
  return target;
}

size_t TaiTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.TaiTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->s());
    }

    // optional uint32 ns = 2;
    if (has_ns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ns());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaiTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.TaiTime)
  GOOGLE_DCHECK_NE(&from, this);
  const TaiTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaiTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.TaiTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.TaiTime)
    MergeFrom(*source);
  }
}

void TaiTime::MergeFrom(const TaiTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.TaiTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      ns_ = from.ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaiTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.TaiTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaiTime::CopyFrom(const TaiTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.TaiTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaiTime::IsInitialized() const {
  return true;
}

void TaiTime::Swap(TaiTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaiTime::InternalSwap(TaiTime* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(ns_, other->ns_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaiTime::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Acc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acc::kIdFieldNumber;
const int Acc::kRawXFieldNumber;
const int Acc::kRawYFieldNumber;
const int Acc::kRawZFieldNumber;
const int Acc::kErrorCodeFieldNumber;
const int Acc::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acc::Acc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Acc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Acc)
}
Acc::Acc(const Acc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Acc)
}

void Acc::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Acc::~Acc() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Acc)
  SharedDtor();
}

void Acc::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Acc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Acc::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acc& Acc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Acc.base);
  return *internal_default_instance();
}


void Acc::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Acc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Acc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_raw_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_raw_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Acc.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Acc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Acc)
  return false;
#undef DO_
}

void Acc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw_x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw_x(), output);
  }

  // optional uint32 raw_y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_y(), output);
  }

  // optional uint32 raw_z = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_z(), output);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error_code(), output);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Acc.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Acc)
}

::google::protobuf::uint8* Acc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw_x(), target);
  }

  // optional uint32 raw_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_y(), target);
  }

  // optional uint32 raw_z = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raw_z(), target);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error_code(), target);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Acc.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Acc)
  return target;
}

size_t Acc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Acc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 6;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 raw_x = 2;
    if (has_raw_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_x());
    }

    // optional uint32 raw_y = 3;
    if (has_raw_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_y());
    }

    // optional uint32 raw_z = 4;
    if (has_raw_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_z());
    }

    // optional uint32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Acc)
  GOOGLE_DCHECK_NE(&from, this);
  const Acc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Acc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Acc)
    MergeFrom(*source);
  }
}

void Acc::MergeFrom(const Acc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Acc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      raw_z_ = from.raw_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Acc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acc::CopyFrom(const Acc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Acc::Swap(Acc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acc::InternalSwap(Acc* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_x_, other->raw_x_);
  swap(raw_y_, other->raw_y_);
  swap(raw_z_, other->raw_z_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Acc::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gyro::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gyro::kIdFieldNumber;
const int Gyro::kRawXFieldNumber;
const int Gyro::kRawYFieldNumber;
const int Gyro::kRawZFieldNumber;
const int Gyro::kErrorCodeFieldNumber;
const int Gyro::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gyro::Gyro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Gyro.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Gyro)
}
Gyro::Gyro(const Gyro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Gyro)
}

void Gyro::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Gyro::~Gyro() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Gyro)
  SharedDtor();
}

void Gyro::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Gyro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gyro::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gyro& Gyro::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Gyro.base);
  return *internal_default_instance();
}


void Gyro::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Gyro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gyro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Gyro)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_raw_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_raw_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Gyro.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Gyro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Gyro)
  return false;
#undef DO_
}

void Gyro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Gyro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw_x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw_x(), output);
  }

  // optional uint32 raw_y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_y(), output);
  }

  // optional uint32 raw_z = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_z(), output);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error_code(), output);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Gyro.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Gyro)
}

::google::protobuf::uint8* Gyro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Gyro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw_x(), target);
  }

  // optional uint32 raw_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_y(), target);
  }

  // optional uint32 raw_z = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raw_z(), target);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error_code(), target);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Gyro.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Gyro)
  return target;
}

size_t Gyro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Gyro)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 6;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 raw_x = 2;
    if (has_raw_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_x());
    }

    // optional uint32 raw_y = 3;
    if (has_raw_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_y());
    }

    // optional uint32 raw_z = 4;
    if (has_raw_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_z());
    }

    // optional uint32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gyro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  const Gyro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gyro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Gyro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Gyro)
    MergeFrom(*source);
  }
}

void Gyro::MergeFrom(const Gyro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Gyro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      raw_z_ = from.raw_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gyro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gyro::CopyFrom(const Gyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Gyro::Swap(Gyro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gyro::InternalSwap(Gyro* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_x_, other->raw_x_);
  swap(raw_y_, other->raw_y_);
  swap(raw_z_, other->raw_z_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gyro::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mag::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mag::kIdFieldNumber;
const int Mag::kRawXFieldNumber;
const int Mag::kRawYFieldNumber;
const int Mag::kRawZFieldNumber;
const int Mag::kErrorCodeFieldNumber;
const int Mag::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mag::Mag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Mag.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Mag)
}
Mag::Mag(const Mag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Mag)
}

void Mag::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Mag::~Mag() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Mag)
  SharedDtor();
}

void Mag::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mag::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mag& Mag::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Mag.base);
  return *internal_default_instance();
}


void Mag::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Mag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Mag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_raw_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_raw_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Mag.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Mag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Mag)
  return false;
#undef DO_
}

void Mag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Mag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw_x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw_x(), output);
  }

  // optional uint32 raw_y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_y(), output);
  }

  // optional uint32 raw_z = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_z(), output);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error_code(), output);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Mag.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Mag)
}

::google::protobuf::uint8* Mag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Mag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw_x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw_x(), target);
  }

  // optional uint32 raw_y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_y(), target);
  }

  // optional uint32 raw_z = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raw_z(), target);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error_code(), target);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Mag.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Mag)
  return target;
}

size_t Mag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Mag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 6;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 raw_x = 2;
    if (has_raw_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_x());
    }

    // optional uint32 raw_y = 3;
    if (has_raw_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_y());
    }

    // optional uint32 raw_z = 4;
    if (has_raw_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_z());
    }

    // optional uint32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Mag)
  GOOGLE_DCHECK_NE(&from, this);
  const Mag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Mag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Mag)
    MergeFrom(*source);
  }
}

void Mag::MergeFrom(const Mag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Mag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_x_ = from.raw_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_y_ = from.raw_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      raw_z_ = from.raw_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Mag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Mag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mag::CopyFrom(const Mag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Mag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Mag::Swap(Mag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mag::InternalSwap(Mag* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_x_, other->raw_x_);
  swap(raw_y_, other->raw_y_);
  swap(raw_z_, other->raw_z_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mag::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Baro::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Baro::kIdFieldNumber;
const int Baro::kRawFieldNumber;
const int Baro::kErrorCodeFieldNumber;
const int Baro::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Baro::Baro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Baro.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Baro)
}
Baro::Baro(const Baro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Baro)
}

void Baro::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Baro::~Baro() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Baro)
  SharedDtor();
}

void Baro::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Baro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Baro::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Baro& Baro::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Baro.base);
  return *internal_default_instance();
}


void Baro::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Baro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Baro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Baro)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Baro.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Baro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Baro)
  return false;
#undef DO_
}

void Baro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Baro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw(), output);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Baro.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Baro)
}

::google::protobuf::uint8* Baro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Baro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw(), target);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Baro.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Baro)
  return target;
}

size_t Baro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Baro)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 4;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 raw = 2;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw());
    }

    // optional uint32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Baro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Baro)
  GOOGLE_DCHECK_NE(&from, this);
  const Baro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Baro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Baro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Baro)
    MergeFrom(*source);
  }
}

void Baro::MergeFrom(const Baro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Baro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_ = from.raw_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Baro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Baro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Baro::CopyFrom(const Baro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Baro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Baro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Baro::Swap(Baro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Baro::InternalSwap(Baro* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_, other->raw_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Baro::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Temp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Temp::kIdFieldNumber;
const int Temp::kRawFieldNumber;
const int Temp::kErrorCodeFieldNumber;
const int Temp::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Temp::Temp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Temp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Temp)
}
Temp::Temp(const Temp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Temp)
}

void Temp::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Temp::~Temp() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Temp)
  SharedDtor();
}

void Temp::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Temp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Temp::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Temp& Temp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Temp.base);
  return *internal_default_instance();
}


void Temp::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Temp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Temp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Temp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Temp.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Temp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Temp)
  return false;
#undef DO_
}

void Temp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Temp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw(), output);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Temp.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Temp)
}

::google::protobuf::uint8* Temp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Temp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw(), target);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Temp.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Temp)
  return target;
}

size_t Temp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Temp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 4;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 raw = 2;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw());
    }

    // optional uint32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Temp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Temp)
  GOOGLE_DCHECK_NE(&from, this);
  const Temp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Temp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Temp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Temp)
    MergeFrom(*source);
  }
}

void Temp::MergeFrom(const Temp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Temp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_ = from.raw_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Temp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Temp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Temp::CopyFrom(const Temp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Temp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Temp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Temp::Swap(Temp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Temp::InternalSwap(Temp* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_, other->raw_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Temp::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sync::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sync::kIdFieldNumber;
const int Sync::kChannelFieldNumber;
const int Sync::kDirFieldNumber;
const int Sync::kCountFieldNumber;
const int Sync::kErrorCodeFieldNumber;
const int Sync::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sync::Sync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Sync.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Sync)
}
Sync::Sync(const Sync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Sync)
}

void Sync::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Sync::~Sync() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Sync)
  SharedDtor();
}

void Sync::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sync::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sync& Sync::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Sync.base);
  return *internal_default_instance();
}


void Sync::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Sync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Sync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.Sync.DIR dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::Sync_DIR_IsValid(value)) {
            set_dir(static_cast< ::frl::device::wireformat::Sync_DIR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Sync.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Sync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Sync)
  return false;
#undef DO_
}

void Sync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Sync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // optional .frl.device.wireformat.Sync.DIR dir = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dir(), output);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error_code(), output);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Sync.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Sync)
}

::google::protobuf::uint8* Sync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Sync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  // optional .frl.device.wireformat.Sync.DIR dir = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dir(), target);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error_code(), target);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Sync.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Sync)
  return target;
}

size_t Sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Sync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 6;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .frl.device.wireformat.Sync.DIR dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Sync)
  GOOGLE_DCHECK_NE(&from, this);
  const Sync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Sync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Sync)
    MergeFrom(*source);
  }
}

void Sync::MergeFrom(const Sync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Sync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sync::CopyFrom(const Sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Sync::Swap(Sync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sync::InternalSwap(Sync* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(channel_, other->channel_);
  swap(dir_, other->dir_);
  swap(count_, other->count_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sync::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirstPixel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirstPixel::kIdFieldNumber;
const int FirstPixel::kWhichFieldNumber;
const int FirstPixel::kValueFieldNumber;
const int FirstPixel::kCountFieldNumber;
const int FirstPixel::kErrorCodeFieldNumber;
const int FirstPixel::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirstPixel::FirstPixel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FirstPixel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.FirstPixel)
}
FirstPixel::FirstPixel(const FirstPixel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.FirstPixel)
}

void FirstPixel::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

FirstPixel::~FirstPixel() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.FirstPixel)
  SharedDtor();
}

void FirstPixel::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirstPixel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirstPixel::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirstPixel& FirstPixel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FirstPixel.base);
  return *internal_default_instance();
}


void FirstPixel::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.FirstPixel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FirstPixel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.FirstPixel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.FirstPixel.LR which = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::FirstPixel_LR_IsValid(value)) {
            set_which(static_cast< ::frl::device::wireformat::FirstPixel_LR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.FirstPixel.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.FirstPixel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.FirstPixel)
  return false;
#undef DO_
}

void FirstPixel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.FirstPixel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .frl.device.wireformat.FirstPixel.LR which = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->which(), output);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->error_code(), output);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.FirstPixel.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.FirstPixel)
}

::google::protobuf::uint8* FirstPixel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.FirstPixel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .frl.device.wireformat.FirstPixel.LR which = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->which(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint32 error_code = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->error_code(), target);
  }

  // optional string error_msg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.FirstPixel.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.FirstPixel)
  return target;
}

size_t FirstPixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.FirstPixel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 6;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional .frl.device.wireformat.FirstPixel.LR which = 2;
    if (has_which()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->which());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirstPixel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.FirstPixel)
  GOOGLE_DCHECK_NE(&from, this);
  const FirstPixel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirstPixel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.FirstPixel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.FirstPixel)
    MergeFrom(*source);
  }
}

void FirstPixel::MergeFrom(const FirstPixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.FirstPixel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      which_ = from.which_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000020u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FirstPixel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.FirstPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstPixel::CopyFrom(const FirstPixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.FirstPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstPixel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void FirstPixel::Swap(FirstPixel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirstPixel::InternalSwap(FirstPixel* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(which_, other->which_);
  swap(value_, other->value_);
  swap(count_, other->count_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirstPixel::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Fan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fan::kIdFieldNumber;
const int Fan::kRawSpeedFieldNumber;
const int Fan::kErrorCodeFieldNumber;
const int Fan::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fan::Fan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Fan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Fan)
}
Fan::Fan(const Fan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Fan)
}

void Fan::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Fan::~Fan() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Fan)
  SharedDtor();
}

void Fan::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Fan::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fan& Fan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Fan.base);
  return *internal_default_instance();
}


void Fan::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Fan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Fan.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Fan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Fan)
  return false;
#undef DO_
}

void Fan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw_speed = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw_speed(), output);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Fan.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Fan)
}

::google::protobuf::uint8* Fan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw_speed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw_speed(), target);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Fan.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Fan)
  return target;
}

size_t Fan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Fan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 4;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 raw_speed = 2;
    if (has_raw_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_speed());
    }

    // optional uint32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Fan)
  GOOGLE_DCHECK_NE(&from, this);
  const Fan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Fan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Fan)
    MergeFrom(*source);
  }
}

void Fan::MergeFrom(const Fan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Fan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_speed_ = from.raw_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Fan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fan::CopyFrom(const Fan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Fan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Fan::Swap(Fan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fan::InternalSwap(Fan* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_speed_, other->raw_speed_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Fan::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Button::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Button::kIdFieldNumber;
const int Button::kValueFieldNumber;
const int Button::kErrorCodeFieldNumber;
const int Button::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Button::Button()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Button.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Button)
}
Button::Button(const Button& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Button)
}

void Button::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Button::~Button() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Button)
  SharedDtor();
}

void Button::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Button::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Button::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Button& Button::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Button.base);
  return *internal_default_instance();
}


void Button::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Button)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Button::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Button)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Button.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Button)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Button)
  return false;
#undef DO_
}

void Button::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Button)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Button.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Button)
}

::google::protobuf::uint8* Button::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Button)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Button.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Button)
  return target;
}

size_t Button::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Button)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 4;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

    // optional uint32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Button::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Button)
  GOOGLE_DCHECK_NE(&from, this);
  const Button* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Button>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Button)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Button)
    MergeFrom(*source);
  }
}

void Button::MergeFrom(const Button& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Button)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Button::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Button::CopyFrom(const Button& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Button::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Button::Swap(Button* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Button::InternalSwap(Button* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(value_, other->value_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Button::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Encoder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Encoder::kIdFieldNumber;
const int Encoder::kRawFieldNumber;
const int Encoder::kErrorCodeFieldNumber;
const int Encoder::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Encoder::Encoder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Encoder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Encoder)
}
Encoder::Encoder(const Encoder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Encoder)
}

void Encoder::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Encoder::~Encoder() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Encoder)
  SharedDtor();
}

void Encoder::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Encoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Encoder::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Encoder& Encoder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Encoder.base);
  return *internal_default_instance();
}


void Encoder::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Encoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Encoder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Encoder.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Encoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Encoder)
  return false;
#undef DO_
}

void Encoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 raw = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw(), output);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Encoder.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Encoder)
}

::google::protobuf::uint8* Encoder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 raw = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw(), target);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Encoder.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Encoder)
  return target;
}

size_t Encoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Encoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 4;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 raw = 2;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw());
    }

    // optional uint32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Encoder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  const Encoder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Encoder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Encoder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Encoder)
    MergeFrom(*source);
  }
}

void Encoder::MergeFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      raw_ = from.raw_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Encoder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Encoder::CopyFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Encoder::Swap(Encoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Encoder::InternalSwap(Encoder* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(raw_, other->raw_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Encoder::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VFMotor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VFMotor::kIdFieldNumber;
const int VFMotor::kWhichFieldNumber;
const int VFMotor::kPositionCntsFieldNumber;
const int VFMotor::kSetPointCntsFieldNumber;
const int VFMotor::kRateRpmFieldNumber;
const int VFMotor::kErrorCodeFieldNumber;
const int VFMotor::kErrorMsgFieldNumber;
const int VFMotor::kEventFieldNumber;
const int VFMotor::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VFMotor::VFMotor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.VFMotor)
}
VFMotor::VFMotor(const VFMotor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&id_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.VFMotor)
}

void VFMotor::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(flag_));
}

VFMotor::~VFMotor() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.VFMotor)
  SharedDtor();
}

void VFMotor::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VFMotor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VFMotor::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VFMotor& VFMotor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotor.base);
  return *internal_default_instance();
}


void VFMotor::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.VFMotor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_) -
        reinterpret_cast<char*>(&id_)) + sizeof(event_));
  }
  flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VFMotor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.VFMotor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.VFMotor.LR which = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::VFMotor_LR_IsValid(value)) {
            set_which(static_cast< ::frl::device::wireformat::VFMotor_LR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_cnts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_position_cnts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_cnts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 set_point_cnts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_set_point_cnts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_point_cnts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rate_rpm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rate_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.VFMotor.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.VFMotor.Event event = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::VFMotor_Event_IsValid(value)) {
            set_event(static_cast< ::frl::device::wireformat::VFMotor_Event >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.VFMotor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.VFMotor)
  return false;
#undef DO_
}

void VFMotor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.VFMotor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .frl.device.wireformat.VFMotor.LR which = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->which(), output);
  }

  // optional uint32 position_cnts = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position_cnts(), output);
  }

  // optional uint32 set_point_cnts = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->set_point_cnts(), output);
  }

  // optional float rate_rpm = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rate_rpm(), output);
  }

  // optional uint32 error_code = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->error_code(), output);
  }

  // optional string error_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.VFMotor.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->error_msg(), output);
  }

  // optional .frl.device.wireformat.VFMotor.Event event = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->event(), output);
  }

  // optional bool flag = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.VFMotor)
}

::google::protobuf::uint8* VFMotor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.VFMotor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .frl.device.wireformat.VFMotor.LR which = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->which(), target);
  }

  // optional uint32 position_cnts = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position_cnts(), target);
  }

  // optional uint32 set_point_cnts = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->set_point_cnts(), target);
  }

  // optional float rate_rpm = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rate_rpm(), target);
  }

  // optional uint32 error_code = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->error_code(), target);
  }

  // optional string error_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.VFMotor.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->error_msg(), target);
  }

  // optional .frl.device.wireformat.VFMotor.Event event = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->event(), target);
  }

  // optional bool flag = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.VFMotor)
  return target;
}

size_t VFMotor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.VFMotor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 7;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional .frl.device.wireformat.VFMotor.LR which = 2;
    if (has_which()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->which());
    }

    // optional uint32 position_cnts = 3;
    if (has_position_cnts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_cnts());
    }

    // optional uint32 set_point_cnts = 4;
    if (has_set_point_cnts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->set_point_cnts());
    }

    // optional float rate_rpm = 5;
    if (has_rate_rpm()) {
      total_size += 1 + 4;
    }

    // optional uint32 error_code = 6;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .frl.device.wireformat.VFMotor.Event event = 8;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

  }
  // optional bool flag = 9;
  if (has_flag()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VFMotor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.VFMotor)
  GOOGLE_DCHECK_NE(&from, this);
  const VFMotor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VFMotor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.VFMotor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.VFMotor)
    MergeFrom(*source);
  }
}

void VFMotor::MergeFrom(const VFMotor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.VFMotor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      which_ = from.which_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_cnts_ = from.position_cnts_;
    }
    if (cached_has_bits & 0x00000010u) {
      set_point_cnts_ = from.set_point_cnts_;
    }
    if (cached_has_bits & 0x00000020u) {
      rate_rpm_ = from.rate_rpm_;
    }
    if (cached_has_bits & 0x00000040u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      event_ = from.event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_flag(from.flag());
  }
}

void VFMotor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.VFMotor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFMotor::CopyFrom(const VFMotor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.VFMotor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFMotor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void VFMotor::Swap(VFMotor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VFMotor::InternalSwap(VFMotor* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(which_, other->which_);
  swap(position_cnts_, other->position_cnts_);
  swap(set_point_cnts_, other->set_point_cnts_);
  swap(rate_rpm_, other->rate_rpm_);
  swap(error_code_, other->error_code_);
  swap(event_, other->event_);
  swap(flag_, other->flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VFMotor::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Timer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timer::kIdFieldNumber;
const int Timer::kSrcFieldNumber;
const int Timer::kStatusFieldNumber;
const int Timer::kErrorCodeFieldNumber;
const int Timer::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timer::Timer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Timer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.Timer)
}
Timer::Timer(const Timer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.Timer)
}

void Timer::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

Timer::~Timer() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.Timer)
  SharedDtor();
}

void Timer::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Timer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Timer::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timer& Timer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_Timer.base);
  return *internal_default_instance();
}


void Timer::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.Timer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Timer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.Timer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.Timer.Source src = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::Timer_Source_IsValid(value)) {
            set_src(static_cast< ::frl::device::wireformat::Timer_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.Timer.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::Timer_Status_IsValid(value)) {
            set_status(static_cast< ::frl::device::wireformat::Timer_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.Timer.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.Timer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.Timer)
  return false;
#undef DO_
}

void Timer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.Timer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .frl.device.wireformat.Timer.Source src = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->src(), output);
  }

  // optional .frl.device.wireformat.Timer.Status status = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional uint32 error_code = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error_code(), output);
  }

  // optional string error_msg = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Timer.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.Timer)
}

::google::protobuf::uint8* Timer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.Timer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .frl.device.wireformat.Timer.Source src = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->src(), target);
  }

  // optional .frl.device.wireformat.Timer.Status status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional uint32 error_code = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->error_code(), target);
  }

  // optional string error_msg = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.Timer.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.Timer)
  return target;
}

size_t Timer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.Timer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional string error_msg = 5;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional .frl.device.wireformat.Timer.Source src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
    }

    // optional .frl.device.wireformat.Timer.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.Timer)
  GOOGLE_DCHECK_NE(&from, this);
  const Timer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.Timer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.Timer)
    MergeFrom(*source);
  }
}

void Timer::MergeFrom(const Timer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.Timer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      src_ = from.src_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Timer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.Timer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timer::CopyFrom(const Timer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.Timer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Timer::Swap(Timer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timer::InternalSwap(Timer* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(src_, other->src_);
  swap(status_, other->status_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Timer::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainBoard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainBoard::kIdFieldNumber;
const int MainBoard::kStatusFieldNumber;
const int MainBoard::kErrorCodeFieldNumber;
const int MainBoard::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainBoard::MainBoard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MainBoard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.MainBoard)
}
MainBoard::MainBoard(const MainBoard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_msg()) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.MainBoard)
}

void MainBoard::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
}

MainBoard::~MainBoard() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.MainBoard)
  SharedDtor();
}

void MainBoard::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MainBoard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MainBoard::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainBoard& MainBoard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MainBoard.base);
  return *internal_default_instance();
}


void MainBoard::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.MainBoard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.MainBoard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .frl.device.wireformat.MainBoard.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::MainBoard_Status_IsValid(value)) {
            set_status(static_cast< ::frl::device::wireformat::MainBoard_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.MainBoard.error_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.MainBoard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.MainBoard)
  return false;
#undef DO_
}

void MainBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.MainBoard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .frl.device.wireformat.MainBoard.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.MainBoard.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.MainBoard)
}

::google::protobuf::uint8* MainBoard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.MainBoard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .frl.device.wireformat.MainBoard.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint32 error_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.MainBoard.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.MainBoard)
  return target;
}

size_t MainBoard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:frl.device.wireformat.MainBoard)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_status()) {
    // required .frl.device.wireformat.MainBoard.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t MainBoard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.MainBoard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .frl.device.wireformat.MainBoard.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string error_msg = 4;
  if (has_error_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // optional uint32 error_code = 3;
  if (has_error_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainBoard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.MainBoard)
  GOOGLE_DCHECK_NE(&from, this);
  const MainBoard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainBoard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.MainBoard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.MainBoard)
    MergeFrom(*source);
  }
}

void MainBoard::MergeFrom(const MainBoard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.MainBoard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainBoard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.MainBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainBoard::CopyFrom(const MainBoard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.MainBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainBoard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void MainBoard::Swap(MainBoard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainBoard::InternalSwap(MainBoard* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(status_, other->status_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MainBoard::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
  ::frl::device::wireformat::_DeviceInfo_default_instance_._instance.get_mutable()->serial_ = const_cast< ::frl::device::wireformat::DeviceSerial*>(
      ::frl::device::wireformat::DeviceSerial::internal_default_instance());
  ::frl::device::wireformat::_DeviceInfo_default_instance_._instance.get_mutable()->fw_ver_ = const_cast< ::frl::device::wireformat::FwVersion*>(
      ::frl::device::wireformat::FwVersion::internal_default_instance());
  ::frl::device::wireformat::_DeviceInfo_default_instance_._instance.get_mutable()->p_ver_ = const_cast< ::frl::device::wireformat::ProtocolVersion*>(
      ::frl::device::wireformat::ProtocolVersion::internal_default_instance());
  ::frl::device::wireformat::_DeviceInfo_default_instance_._instance.get_mutable()->mfg_date_ = const_cast< ::frl::device::wireformat::MfgDate*>(
      ::frl::device::wireformat::MfgDate::internal_default_instance());
  ::frl::device::wireformat::_DeviceInfo_default_instance_._instance.get_mutable()->hw_ver_ = const_cast< ::frl::device::wireformat::HwVersion*>(
      ::frl::device::wireformat::HwVersion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kSerialFieldNumber;
const int DeviceInfo::kFwVerFieldNumber;
const int DeviceInfo::kPVerFieldNumber;
const int DeviceInfo::kMfgDateFieldNumber;
const int DeviceInfo::kHwVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_serial()) {
    serial_ = new ::frl::device::wireformat::DeviceSerial(*from.serial_);
  } else {
    serial_ = NULL;
  }
  if (from.has_fw_ver()) {
    fw_ver_ = new ::frl::device::wireformat::FwVersion(*from.fw_ver_);
  } else {
    fw_ver_ = NULL;
  }
  if (from.has_p_ver()) {
    p_ver_ = new ::frl::device::wireformat::ProtocolVersion(*from.p_ver_);
  } else {
    p_ver_ = NULL;
  }
  if (from.has_mfg_date()) {
    mfg_date_ = new ::frl::device::wireformat::MfgDate(*from.mfg_date_);
  } else {
    mfg_date_ = NULL;
  }
  if (from.has_hw_ver()) {
    hw_ver_ = new ::frl::device::wireformat::HwVersion(*from.hw_ver_);
  } else {
    hw_ver_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hw_ver_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(hw_ver_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (this != internal_default_instance()) delete serial_;
  if (this != internal_default_instance()) delete fw_ver_;
  if (this != internal_default_instance()) delete p_ver_;
  if (this != internal_default_instance()) delete mfg_date_;
  if (this != internal_default_instance()) delete hw_ver_;
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceInfo.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(serial_ != NULL);
      serial_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fw_ver_ != NULL);
      fw_ver_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(p_ver_ != NULL);
      p_ver_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mfg_date_ != NULL);
      mfg_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hw_ver_ != NULL);
      hw_ver_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .frl.device.wireformat.DeviceSerial serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.FwVersion fw_ver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fw_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.ProtocolVersion p_ver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.MfgDate mfg_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mfg_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.HwVersion hw_ver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hw_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .frl.device.wireformat.DeviceSerial serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_serial(), output);
  }

  // optional .frl.device.wireformat.FwVersion fw_ver = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_fw_ver(), output);
  }

  // optional .frl.device.wireformat.ProtocolVersion p_ver = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_p_ver(), output);
  }

  // optional .frl.device.wireformat.MfgDate mfg_date = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_mfg_date(), output);
  }

  // optional .frl.device.wireformat.HwVersion hw_ver = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_hw_ver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .frl.device.wireformat.DeviceSerial serial = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_serial(), deterministic, target);
  }

  // optional .frl.device.wireformat.FwVersion fw_ver = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_fw_ver(), deterministic, target);
  }

  // optional .frl.device.wireformat.ProtocolVersion p_ver = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_p_ver(), deterministic, target);
  }

  // optional .frl.device.wireformat.MfgDate mfg_date = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_mfg_date(), deterministic, target);
  }

  // optional .frl.device.wireformat.HwVersion hw_ver = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_hw_ver(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .frl.device.wireformat.DeviceSerial serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serial_);
    }

    // optional .frl.device.wireformat.FwVersion fw_ver = 2;
    if (has_fw_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fw_ver_);
    }

    // optional .frl.device.wireformat.ProtocolVersion p_ver = 3;
    if (has_p_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *p_ver_);
    }

    // optional .frl.device.wireformat.MfgDate mfg_date = 4;
    if (has_mfg_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mfg_date_);
    }

    // optional .frl.device.wireformat.HwVersion hw_ver = 5;
    if (has_hw_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hw_ver_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_serial()->::frl::device::wireformat::DeviceSerial::MergeFrom(from.serial());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fw_ver()->::frl::device::wireformat::FwVersion::MergeFrom(from.fw_ver());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_p_ver()->::frl::device::wireformat::ProtocolVersion::MergeFrom(from.p_ver());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_mfg_date()->::frl::device::wireformat::MfgDate::MergeFrom(from.mfg_date());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hw_ver()->::frl::device::wireformat::HwVersion::MergeFrom(from.hw_ver());
    }
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  swap(serial_, other->serial_);
  swap(fw_ver_, other->fw_ver_);
  swap(p_ver_, other->p_ver_);
  swap(mfg_date_, other->mfg_date_);
  swap(hw_ver_, other->hw_ver_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FwVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FwVersion::kMajorFieldNumber;
const int FwVersion::kMinorFieldNumber;
const int FwVersion::kShaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FwVersion::FwVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FwVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.FwVersion)
}
FwVersion::FwVersion(const FwVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.FwVersion)
}

void FwVersion::SharedCtor() {
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

FwVersion::~FwVersion() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.FwVersion)
  SharedDtor();
}

void FwVersion::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FwVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FwVersion::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FwVersion& FwVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FwVersion.base);
  return *internal_default_instance();
}


void FwVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.FwVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sha_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minor_) -
        reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FwVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.FwVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.FwVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.FwVersion)
  return false;
#undef DO_
}

void FwVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.FwVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.FwVersion)
}

::google::protobuf::uint8* FwVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.FwVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.FwVersion)
  return target;
}

size_t FwVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.FwVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes sha = 3;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }

    // optional uint32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FwVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.FwVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const FwVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FwVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.FwVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.FwVersion)
    MergeFrom(*source);
  }
}

void FwVersion::MergeFrom(const FwVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.FwVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000004u) {
      minor_ = from.minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FwVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.FwVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FwVersion::CopyFrom(const FwVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.FwVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FwVersion::IsInitialized() const {
  return true;
}

void FwVersion::Swap(FwVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FwVersion::InternalSwap(FwVersion* other) {
  using std::swap;
  sha_.Swap(&other->sha_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_, other->major_);
  swap(minor_, other->minor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FwVersion::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HwVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HwVersion::kMajorFieldNumber;
const int HwVersion::kMinorFieldNumber;
const int HwVersion::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HwVersion::HwVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_HwVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.HwVersion)
}
HwVersion::HwVersion(const HwVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.HwVersion)
}

void HwVersion::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

HwVersion::~HwVersion() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.HwVersion)
  SharedDtor();
}

void HwVersion::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HwVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HwVersion::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HwVersion& HwVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_HwVersion.base);
  return *internal_default_instance();
}


void HwVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.HwVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minor_) -
        reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HwVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.HwVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frl.device.wireformat.HwVersion.model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.HwVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.HwVersion)
  return false;
#undef DO_
}

void HwVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.HwVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  // optional string model = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.HwVersion.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.HwVersion)
}

::google::protobuf::uint8* HwVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.HwVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  // optional string model = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frl.device.wireformat.HwVersion.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.HwVersion)
  return target;
}

size_t HwVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.HwVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional uint32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }

    // optional uint32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HwVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.HwVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const HwVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HwVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.HwVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.HwVersion)
    MergeFrom(*source);
  }
}

void HwVersion::MergeFrom(const HwVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.HwVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000002u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000004u) {
      minor_ = from.minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HwVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.HwVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HwVersion::CopyFrom(const HwVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.HwVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HwVersion::IsInitialized() const {
  return true;
}

void HwVersion::Swap(HwVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HwVersion::InternalSwap(HwVersion* other) {
  using std::swap;
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_, other->major_);
  swap(minor_, other->minor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HwVersion::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtocolVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolVersion::kMajorFieldNumber;
const int ProtocolVersion::kMinorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolVersion::ProtocolVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ProtocolVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.ProtocolVersion)
}
ProtocolVersion::ProtocolVersion(const ProtocolVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.ProtocolVersion)
}

void ProtocolVersion::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

ProtocolVersion::~ProtocolVersion() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.ProtocolVersion)
  SharedDtor();
}

void ProtocolVersion::SharedDtor() {
}

void ProtocolVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtocolVersion::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtocolVersion& ProtocolVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ProtocolVersion.base);
  return *internal_default_instance();
}


void ProtocolVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.ProtocolVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&major_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minor_) -
        reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtocolVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.ProtocolVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.ProtocolVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.ProtocolVersion)
  return false;
#undef DO_
}

void ProtocolVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.ProtocolVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.ProtocolVersion)
}

::google::protobuf::uint8* ProtocolVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.ProtocolVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 major = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // optional uint32 minor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.ProtocolVersion)
  return target;
}

size_t ProtocolVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.ProtocolVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }

    // optional uint32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.ProtocolVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.ProtocolVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.ProtocolVersion)
    MergeFrom(*source);
  }
}

void ProtocolVersion::MergeFrom(const ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.ProtocolVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      major_ = from.major_;
    }
    if (cached_has_bits & 0x00000002u) {
      minor_ = from.minor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtocolVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolVersion::CopyFrom(const ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersion::IsInitialized() const {
  return true;
}

void ProtocolVersion::Swap(ProtocolVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolVersion::InternalSwap(ProtocolVersion* other) {
  using std::swap;
  swap(major_, other->major_);
  swap(minor_, other->minor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtocolVersion::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MfgDate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MfgDate::kHourFieldNumber;
const int MfgDate::kMinFieldNumber;
const int MfgDate::kDayFieldNumber;
const int MfgDate::kMonthFieldNumber;
const int MfgDate::kYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MfgDate::MfgDate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MfgDate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.MfgDate)
}
MfgDate::MfgDate(const MfgDate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hour_, &from.hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&hour_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.MfgDate)
}

void MfgDate::SharedCtor() {
  ::memset(&hour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&hour_)) + sizeof(year_));
}

MfgDate::~MfgDate() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.MfgDate)
  SharedDtor();
}

void MfgDate::SharedDtor() {
}

void MfgDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MfgDate::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MfgDate& MfgDate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_MfgDate.base);
  return *internal_default_instance();
}


void MfgDate::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.MfgDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&hour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_) -
        reinterpret_cast<char*>(&hour_)) + sizeof(year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MfgDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.MfgDate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hour = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 month = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.MfgDate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.MfgDate)
  return false;
#undef DO_
}

void MfgDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.MfgDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hour = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hour(), output);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // optional uint32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // optional uint32 month = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->month(), output);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->year(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.MfgDate)
}

::google::protobuf::uint8* MfgDate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.MfgDate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hour = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hour(), target);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min(), target);
  }

  // optional uint32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  // optional uint32 month = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->month(), target);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->year(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.MfgDate)
  return target;
}

size_t MfgDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.MfgDate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 hour = 1;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 month = 4;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MfgDate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.MfgDate)
  GOOGLE_DCHECK_NE(&from, this);
  const MfgDate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MfgDate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.MfgDate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.MfgDate)
    MergeFrom(*source);
  }
}

void MfgDate::MergeFrom(const MfgDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.MfgDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MfgDate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.MfgDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MfgDate::CopyFrom(const MfgDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.MfgDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MfgDate::IsInitialized() const {
  return true;
}

void MfgDate::Swap(MfgDate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MfgDate::InternalSwap(MfgDate* other) {
  using std::swap;
  swap(hour_, other->hour_);
  swap(min_, other->min_);
  swap(day_, other->day_);
  swap(month_, other->month_);
  swap(year_, other->year_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MfgDate::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceSerial::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceSerial::kHexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceSerial::DeviceSerial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceSerial.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.DeviceSerial)
}
DeviceSerial::DeviceSerial(const DeviceSerial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hex()) {
    hex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.DeviceSerial)
}

void DeviceSerial::SharedCtor() {
  hex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceSerial::~DeviceSerial() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.DeviceSerial)
  SharedDtor();
}

void DeviceSerial::SharedDtor() {
  hex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceSerial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceSerial::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceSerial& DeviceSerial::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DeviceSerial.base);
  return *internal_default_instance();
}


void DeviceSerial::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.DeviceSerial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hex_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceSerial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.DeviceSerial)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes hex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.DeviceSerial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.DeviceSerial)
  return false;
#undef DO_
}

void DeviceSerial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.DeviceSerial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes hex = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.DeviceSerial)
}

::google::protobuf::uint8* DeviceSerial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.DeviceSerial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes hex = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.DeviceSerial)
  return target;
}

size_t DeviceSerial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.DeviceSerial)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes hex = 2;
  if (has_hex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceSerial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.DeviceSerial)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceSerial* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceSerial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.DeviceSerial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.DeviceSerial)
    MergeFrom(*source);
  }
}

void DeviceSerial::MergeFrom(const DeviceSerial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.DeviceSerial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hex()) {
    set_has_hex();
    hex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
}

void DeviceSerial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.DeviceSerial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSerial::CopyFrom(const DeviceSerial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.DeviceSerial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSerial::IsInitialized() const {
  return true;
}

void DeviceSerial::Swap(DeviceSerial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceSerial::InternalSwap(DeviceSerial* other) {
  using std::swap;
  hex_.Swap(&other->hex_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceSerial::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ToDeviceMsg::InitAsDefaultInstance() {
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_display_cfgs_ = const_cast< ::frl::device::wireformat::DispDriverCfgs*>(
      ::frl::device::wireformat::DispDriverCfgs::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_gyro_cfgs_ = const_cast< ::frl::device::wireformat::GyroCfgs*>(
      ::frl::device::wireformat::GyroCfgs::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_acc_cfgs_ = const_cast< ::frl::device::wireformat::AccCfgs*>(
      ::frl::device::wireformat::AccCfgs::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_baro_cfgs_ = const_cast< ::frl::device::wireformat::BaroCfgs*>(
      ::frl::device::wireformat::BaroCfgs::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_fan_cfgs_ = const_cast< ::frl::device::wireformat::FanCfgs*>(
      ::frl::device::wireformat::FanCfgs::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_timer_cfg_ = const_cast< ::frl::device::wireformat::TimerCfg*>(
      ::frl::device::wireformat::TimerCfg::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_trig_cfg_ = const_cast< ::frl::device::wireformat::TrigCfg*>(
      ::frl::device::wireformat::TrigCfg::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_sync_cfg_ = const_cast< ::frl::device::wireformat::SyncCfg*>(
      ::frl::device::wireformat::SyncCfg::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_serial_ = const_cast< ::frl::device::wireformat::DeviceSerial*>(
      ::frl::device::wireformat::DeviceSerial::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_vfmotor_cfgs_ = const_cast< ::frl::device::wireformat::VFMotorCfgs*>(
      ::frl::device::wireformat::VFMotorCfgs::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.set_vfmotor_cmd_ = const_cast< ::frl::device::wireformat::VFMotorCmds*>(
      ::frl::device::wireformat::VFMotorCmds::internal_default_instance());
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_display_cfgs_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_gyro_cfgs_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_acc_cfgs_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_baro_cfgs_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_fans_cfgs_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_timer_cfg_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_trig_cfg_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_sync_cfg_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_device_serial_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_board_info_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_protocol_version_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_fw_version_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_hw_version_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_mfg_date_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_vfmotor_states_ = false;
  ::frl::device::wireformat::_ToDeviceMsg_default_instance_.get_vfmotor_cfgs_ = false;
}
void ToDeviceMsg::set_allocated_set_display_cfgs(::frl::device::wireformat::DispDriverCfgs* set_display_cfgs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_display_cfgs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_display_cfgs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_display_cfgs, submessage_arena);
    }
    set_has_set_display_cfgs();
    Cmd_.set_display_cfgs_ = set_display_cfgs;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_display_cfgs)
}
void ToDeviceMsg::set_allocated_set_gyro_cfgs(::frl::device::wireformat::GyroCfgs* set_gyro_cfgs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_gyro_cfgs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_gyro_cfgs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_gyro_cfgs, submessage_arena);
    }
    set_has_set_gyro_cfgs();
    Cmd_.set_gyro_cfgs_ = set_gyro_cfgs;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_gyro_cfgs)
}
void ToDeviceMsg::set_allocated_set_acc_cfgs(::frl::device::wireformat::AccCfgs* set_acc_cfgs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_acc_cfgs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_acc_cfgs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_acc_cfgs, submessage_arena);
    }
    set_has_set_acc_cfgs();
    Cmd_.set_acc_cfgs_ = set_acc_cfgs;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_acc_cfgs)
}
void ToDeviceMsg::set_allocated_set_baro_cfgs(::frl::device::wireformat::BaroCfgs* set_baro_cfgs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_baro_cfgs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_baro_cfgs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_baro_cfgs, submessage_arena);
    }
    set_has_set_baro_cfgs();
    Cmd_.set_baro_cfgs_ = set_baro_cfgs;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_baro_cfgs)
}
void ToDeviceMsg::set_allocated_set_fan_cfgs(::frl::device::wireformat::FanCfgs* set_fan_cfgs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_fan_cfgs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_fan_cfgs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_fan_cfgs, submessage_arena);
    }
    set_has_set_fan_cfgs();
    Cmd_.set_fan_cfgs_ = set_fan_cfgs;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_fan_cfgs)
}
void ToDeviceMsg::set_allocated_set_timer_cfg(::frl::device::wireformat::TimerCfg* set_timer_cfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_timer_cfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_timer_cfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_timer_cfg, submessage_arena);
    }
    set_has_set_timer_cfg();
    Cmd_.set_timer_cfg_ = set_timer_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_timer_cfg)
}
void ToDeviceMsg::set_allocated_set_trig_cfg(::frl::device::wireformat::TrigCfg* set_trig_cfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_trig_cfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_trig_cfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_trig_cfg, submessage_arena);
    }
    set_has_set_trig_cfg();
    Cmd_.set_trig_cfg_ = set_trig_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_trig_cfg)
}
void ToDeviceMsg::set_allocated_set_sync_cfg(::frl::device::wireformat::SyncCfg* set_sync_cfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_sync_cfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_sync_cfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_sync_cfg, submessage_arena);
    }
    set_has_set_sync_cfg();
    Cmd_.set_sync_cfg_ = set_sync_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_sync_cfg)
}
void ToDeviceMsg::set_allocated_set_serial(::frl::device::wireformat::DeviceSerial* set_serial) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_serial) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_serial = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_serial, submessage_arena);
    }
    set_has_set_serial();
    Cmd_.set_serial_ = set_serial;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_serial)
}
void ToDeviceMsg::set_allocated_set_vfmotor_cfgs(::frl::device::wireformat::VFMotorCfgs* set_vfmotor_cfgs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_vfmotor_cfgs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_vfmotor_cfgs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_vfmotor_cfgs, submessage_arena);
    }
    set_has_set_vfmotor_cfgs();
    Cmd_.set_vfmotor_cfgs_ = set_vfmotor_cfgs;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cfgs)
}
void ToDeviceMsg::set_allocated_set_vfmotor_cmd(::frl::device::wireformat::VFMotorCmds* set_vfmotor_cmd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Cmd();
  if (set_vfmotor_cmd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_vfmotor_cmd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_vfmotor_cmd, submessage_arena);
    }
    set_has_set_vfmotor_cmd();
    Cmd_.set_vfmotor_cmd_ = set_vfmotor_cmd;
  }
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cmd)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToDeviceMsg::kCmdIdFieldNumber;
const int ToDeviceMsg::kSetDisplayCfgsFieldNumber;
const int ToDeviceMsg::kSetGyroCfgsFieldNumber;
const int ToDeviceMsg::kSetAccCfgsFieldNumber;
const int ToDeviceMsg::kSetBaroCfgsFieldNumber;
const int ToDeviceMsg::kSetFanCfgsFieldNumber;
const int ToDeviceMsg::kSetTimerCfgFieldNumber;
const int ToDeviceMsg::kSetTrigCfgFieldNumber;
const int ToDeviceMsg::kSetSyncCfgFieldNumber;
const int ToDeviceMsg::kSetSerialFieldNumber;
const int ToDeviceMsg::kSetVfmotorCfgsFieldNumber;
const int ToDeviceMsg::kSetVfmotorCmdFieldNumber;
const int ToDeviceMsg::kGetDisplayCfgsFieldNumber;
const int ToDeviceMsg::kGetGyroCfgsFieldNumber;
const int ToDeviceMsg::kGetAccCfgsFieldNumber;
const int ToDeviceMsg::kGetBaroCfgsFieldNumber;
const int ToDeviceMsg::kGetFansCfgsFieldNumber;
const int ToDeviceMsg::kGetTimerCfgFieldNumber;
const int ToDeviceMsg::kGetTrigCfgFieldNumber;
const int ToDeviceMsg::kGetSyncCfgFieldNumber;
const int ToDeviceMsg::kGetDeviceSerialFieldNumber;
const int ToDeviceMsg::kGetBoardInfoFieldNumber;
const int ToDeviceMsg::kGetProtocolVersionFieldNumber;
const int ToDeviceMsg::kGetFwVersionFieldNumber;
const int ToDeviceMsg::kGetHwVersionFieldNumber;
const int ToDeviceMsg::kGetMfgDateFieldNumber;
const int ToDeviceMsg::kGetVfmotorStatesFieldNumber;
const int ToDeviceMsg::kGetVfmotorCfgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToDeviceMsg::ToDeviceMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ToDeviceMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.ToDeviceMsg)
}
ToDeviceMsg::ToDeviceMsg(const ToDeviceMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_id_ = from.cmd_id_;
  clear_has_Cmd();
  switch (from.Cmd_case()) {
    case kSetDisplayCfgs: {
      mutable_set_display_cfgs()->::frl::device::wireformat::DispDriverCfgs::MergeFrom(from.set_display_cfgs());
      break;
    }
    case kSetGyroCfgs: {
      mutable_set_gyro_cfgs()->::frl::device::wireformat::GyroCfgs::MergeFrom(from.set_gyro_cfgs());
      break;
    }
    case kSetAccCfgs: {
      mutable_set_acc_cfgs()->::frl::device::wireformat::AccCfgs::MergeFrom(from.set_acc_cfgs());
      break;
    }
    case kSetBaroCfgs: {
      mutable_set_baro_cfgs()->::frl::device::wireformat::BaroCfgs::MergeFrom(from.set_baro_cfgs());
      break;
    }
    case kSetFanCfgs: {
      mutable_set_fan_cfgs()->::frl::device::wireformat::FanCfgs::MergeFrom(from.set_fan_cfgs());
      break;
    }
    case kSetTimerCfg: {
      mutable_set_timer_cfg()->::frl::device::wireformat::TimerCfg::MergeFrom(from.set_timer_cfg());
      break;
    }
    case kSetTrigCfg: {
      mutable_set_trig_cfg()->::frl::device::wireformat::TrigCfg::MergeFrom(from.set_trig_cfg());
      break;
    }
    case kSetSyncCfg: {
      mutable_set_sync_cfg()->::frl::device::wireformat::SyncCfg::MergeFrom(from.set_sync_cfg());
      break;
    }
    case kSetSerial: {
      mutable_set_serial()->::frl::device::wireformat::DeviceSerial::MergeFrom(from.set_serial());
      break;
    }
    case kSetVfmotorCfgs: {
      mutable_set_vfmotor_cfgs()->::frl::device::wireformat::VFMotorCfgs::MergeFrom(from.set_vfmotor_cfgs());
      break;
    }
    case kSetVfmotorCmd: {
      mutable_set_vfmotor_cmd()->::frl::device::wireformat::VFMotorCmds::MergeFrom(from.set_vfmotor_cmd());
      break;
    }
    case kGetDisplayCfgs: {
      set_get_display_cfgs(from.get_display_cfgs());
      break;
    }
    case kGetGyroCfgs: {
      set_get_gyro_cfgs(from.get_gyro_cfgs());
      break;
    }
    case kGetAccCfgs: {
      set_get_acc_cfgs(from.get_acc_cfgs());
      break;
    }
    case kGetBaroCfgs: {
      set_get_baro_cfgs(from.get_baro_cfgs());
      break;
    }
    case kGetFansCfgs: {
      set_get_fans_cfgs(from.get_fans_cfgs());
      break;
    }
    case kGetTimerCfg: {
      set_get_timer_cfg(from.get_timer_cfg());
      break;
    }
    case kGetTrigCfg: {
      set_get_trig_cfg(from.get_trig_cfg());
      break;
    }
    case kGetSyncCfg: {
      set_get_sync_cfg(from.get_sync_cfg());
      break;
    }
    case kGetDeviceSerial: {
      set_get_device_serial(from.get_device_serial());
      break;
    }
    case kGetBoardInfo: {
      set_get_board_info(from.get_board_info());
      break;
    }
    case kGetProtocolVersion: {
      set_get_protocol_version(from.get_protocol_version());
      break;
    }
    case kGetFwVersion: {
      set_get_fw_version(from.get_fw_version());
      break;
    }
    case kGetHwVersion: {
      set_get_hw_version(from.get_hw_version());
      break;
    }
    case kGetMfgDate: {
      set_get_mfg_date(from.get_mfg_date());
      break;
    }
    case kGetVfmotorStates: {
      set_get_vfmotor_states(from.get_vfmotor_states());
      break;
    }
    case kGetVfmotorCfgs: {
      set_get_vfmotor_cfgs(from.get_vfmotor_cfgs());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.ToDeviceMsg)
}

void ToDeviceMsg::SharedCtor() {
  cmd_id_ = 0u;
  clear_has_Cmd();
}

ToDeviceMsg::~ToDeviceMsg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.ToDeviceMsg)
  SharedDtor();
}

void ToDeviceMsg::SharedDtor() {
  if (has_Cmd()) {
    clear_Cmd();
  }
}

void ToDeviceMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ToDeviceMsg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToDeviceMsg& ToDeviceMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ToDeviceMsg.base);
  return *internal_default_instance();
}


void ToDeviceMsg::clear_Cmd() {
// @@protoc_insertion_point(one_of_clear_start:frl.device.wireformat.ToDeviceMsg)
  switch (Cmd_case()) {
    case kSetDisplayCfgs: {
      delete Cmd_.set_display_cfgs_;
      break;
    }
    case kSetGyroCfgs: {
      delete Cmd_.set_gyro_cfgs_;
      break;
    }
    case kSetAccCfgs: {
      delete Cmd_.set_acc_cfgs_;
      break;
    }
    case kSetBaroCfgs: {
      delete Cmd_.set_baro_cfgs_;
      break;
    }
    case kSetFanCfgs: {
      delete Cmd_.set_fan_cfgs_;
      break;
    }
    case kSetTimerCfg: {
      delete Cmd_.set_timer_cfg_;
      break;
    }
    case kSetTrigCfg: {
      delete Cmd_.set_trig_cfg_;
      break;
    }
    case kSetSyncCfg: {
      delete Cmd_.set_sync_cfg_;
      break;
    }
    case kSetSerial: {
      delete Cmd_.set_serial_;
      break;
    }
    case kSetVfmotorCfgs: {
      delete Cmd_.set_vfmotor_cfgs_;
      break;
    }
    case kSetVfmotorCmd: {
      delete Cmd_.set_vfmotor_cmd_;
      break;
    }
    case kGetDisplayCfgs: {
      // No need to clear
      break;
    }
    case kGetGyroCfgs: {
      // No need to clear
      break;
    }
    case kGetAccCfgs: {
      // No need to clear
      break;
    }
    case kGetBaroCfgs: {
      // No need to clear
      break;
    }
    case kGetFansCfgs: {
      // No need to clear
      break;
    }
    case kGetTimerCfg: {
      // No need to clear
      break;
    }
    case kGetTrigCfg: {
      // No need to clear
      break;
    }
    case kGetSyncCfg: {
      // No need to clear
      break;
    }
    case kGetDeviceSerial: {
      // No need to clear
      break;
    }
    case kGetBoardInfo: {
      // No need to clear
      break;
    }
    case kGetProtocolVersion: {
      // No need to clear
      break;
    }
    case kGetFwVersion: {
      // No need to clear
      break;
    }
    case kGetHwVersion: {
      // No need to clear
      break;
    }
    case kGetMfgDate: {
      // No need to clear
      break;
    }
    case kGetVfmotorStates: {
      // No need to clear
      break;
    }
    case kGetVfmotorCfgs: {
      // No need to clear
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_NOT_SET;
}


void ToDeviceMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.ToDeviceMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_id_ = 0u;
  clear_Cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToDeviceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.ToDeviceMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cmd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.DispDriverCfgs set_display_cfgs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_display_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.GyroCfgs set_gyro_cfgs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_gyro_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.AccCfgs set_acc_cfgs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_acc_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.BaroCfgs set_baro_cfgs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_baro_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.FanCfgs set_fan_cfgs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_fan_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.TimerCfg set_timer_cfg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_timer_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.TrigCfg set_trig_cfg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_trig_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.SyncCfg set_sync_cfg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_sync_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.DeviceSerial set_serial = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.VFMotorCfgs set_vfmotor_cfgs = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_vfmotor_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.VFMotorCmds set_vfmotor_cmd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_vfmotor_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_display_cfgs = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_display_cfgs_)));
          set_has_get_display_cfgs();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_gyro_cfgs = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_gyro_cfgs_)));
          set_has_get_gyro_cfgs();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_acc_cfgs = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_acc_cfgs_)));
          set_has_get_acc_cfgs();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_baro_cfgs = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_baro_cfgs_)));
          set_has_get_baro_cfgs();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_fans_cfgs = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_fans_cfgs_)));
          set_has_get_fans_cfgs();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_timer_cfg = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_timer_cfg_)));
          set_has_get_timer_cfg();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_trig_cfg = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_trig_cfg_)));
          set_has_get_trig_cfg();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_sync_cfg = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_sync_cfg_)));
          set_has_get_sync_cfg();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_device_serial = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_device_serial_)));
          set_has_get_device_serial();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_board_info = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_board_info_)));
          set_has_get_board_info();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_protocol_version = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_protocol_version_)));
          set_has_get_protocol_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_fw_version = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_fw_version_)));
          set_has_get_fw_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_hw_version = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_hw_version_)));
          set_has_get_hw_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_mfg_date = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_mfg_date_)));
          set_has_get_mfg_date();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_vfmotor_states = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_vfmotor_states_)));
          set_has_get_vfmotor_states();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_vfmotor_cfgs = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          clear_Cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Cmd_.get_vfmotor_cfgs_)));
          set_has_get_vfmotor_cfgs();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.ToDeviceMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.ToDeviceMsg)
  return false;
#undef DO_
}

void ToDeviceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.ToDeviceMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cmd_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_id(), output);
  }

  switch (Cmd_case()) {
    case kSetDisplayCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_set_display_cfgs(), output);
      break;
    case kSetGyroCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_set_gyro_cfgs(), output);
      break;
    case kSetAccCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_set_acc_cfgs(), output);
      break;
    case kSetBaroCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_set_baro_cfgs(), output);
      break;
    case kSetFanCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_set_fan_cfgs(), output);
      break;
    case kSetTimerCfg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_set_timer_cfg(), output);
      break;
    case kSetTrigCfg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_set_trig_cfg(), output);
      break;
    case kSetSyncCfg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_set_sync_cfg(), output);
      break;
    case kSetSerial:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_set_serial(), output);
      break;
    case kSetVfmotorCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_set_vfmotor_cfgs(), output);
      break;
    case kSetVfmotorCmd:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_set_vfmotor_cmd(), output);
      break;
    case kGetDisplayCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->get_display_cfgs(), output);
      break;
    case kGetGyroCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->get_gyro_cfgs(), output);
      break;
    case kGetAccCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->get_acc_cfgs(), output);
      break;
    case kGetBaroCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->get_baro_cfgs(), output);
      break;
    case kGetFansCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->get_fans_cfgs(), output);
      break;
    case kGetTimerCfg:
      ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->get_timer_cfg(), output);
      break;
    case kGetTrigCfg:
      ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->get_trig_cfg(), output);
      break;
    case kGetSyncCfg:
      ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->get_sync_cfg(), output);
      break;
    case kGetDeviceSerial:
      ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->get_device_serial(), output);
      break;
    case kGetBoardInfo:
      ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->get_board_info(), output);
      break;
    case kGetProtocolVersion:
      ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->get_protocol_version(), output);
      break;
    case kGetFwVersion:
      ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->get_fw_version(), output);
      break;
    case kGetHwVersion:
      ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->get_hw_version(), output);
      break;
    case kGetMfgDate:
      ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->get_mfg_date(), output);
      break;
    case kGetVfmotorStates:
      ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->get_vfmotor_states(), output);
      break;
    case kGetVfmotorCfgs:
      ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->get_vfmotor_cfgs(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.ToDeviceMsg)
}

::google::protobuf::uint8* ToDeviceMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.ToDeviceMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cmd_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_id(), target);
  }

  switch (Cmd_case()) {
    case kSetDisplayCfgs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_set_display_cfgs(), deterministic, target);
      break;
    case kSetGyroCfgs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_set_gyro_cfgs(), deterministic, target);
      break;
    case kSetAccCfgs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_set_acc_cfgs(), deterministic, target);
      break;
    case kSetBaroCfgs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_set_baro_cfgs(), deterministic, target);
      break;
    case kSetFanCfgs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_set_fan_cfgs(), deterministic, target);
      break;
    case kSetTimerCfg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_set_timer_cfg(), deterministic, target);
      break;
    case kSetTrigCfg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_set_trig_cfg(), deterministic, target);
      break;
    case kSetSyncCfg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_set_sync_cfg(), deterministic, target);
      break;
    case kSetSerial:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_set_serial(), deterministic, target);
      break;
    case kSetVfmotorCfgs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_set_vfmotor_cfgs(), deterministic, target);
      break;
    case kSetVfmotorCmd:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_set_vfmotor_cmd(), deterministic, target);
      break;
    case kGetDisplayCfgs:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->get_display_cfgs(), target);
      break;
    case kGetGyroCfgs:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->get_gyro_cfgs(), target);
      break;
    case kGetAccCfgs:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->get_acc_cfgs(), target);
      break;
    case kGetBaroCfgs:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->get_baro_cfgs(), target);
      break;
    case kGetFansCfgs:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->get_fans_cfgs(), target);
      break;
    case kGetTimerCfg:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->get_timer_cfg(), target);
      break;
    case kGetTrigCfg:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->get_trig_cfg(), target);
      break;
    case kGetSyncCfg:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->get_sync_cfg(), target);
      break;
    case kGetDeviceSerial:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->get_device_serial(), target);
      break;
    case kGetBoardInfo:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->get_board_info(), target);
      break;
    case kGetProtocolVersion:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->get_protocol_version(), target);
      break;
    case kGetFwVersion:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->get_fw_version(), target);
      break;
    case kGetHwVersion:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->get_hw_version(), target);
      break;
    case kGetMfgDate:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->get_mfg_date(), target);
      break;
    case kGetVfmotorStates:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->get_vfmotor_states(), target);
      break;
    case kGetVfmotorCfgs:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->get_vfmotor_cfgs(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.ToDeviceMsg)
  return target;
}

size_t ToDeviceMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.ToDeviceMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 cmd_id = 1;
  if (has_cmd_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd_id());
  }

  switch (Cmd_case()) {
    // optional .frl.device.wireformat.DispDriverCfgs set_display_cfgs = 2;
    case kSetDisplayCfgs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_display_cfgs_);
      break;
    }
    // optional .frl.device.wireformat.GyroCfgs set_gyro_cfgs = 3;
    case kSetGyroCfgs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_gyro_cfgs_);
      break;
    }
    // optional .frl.device.wireformat.AccCfgs set_acc_cfgs = 4;
    case kSetAccCfgs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_acc_cfgs_);
      break;
    }
    // optional .frl.device.wireformat.BaroCfgs set_baro_cfgs = 5;
    case kSetBaroCfgs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_baro_cfgs_);
      break;
    }
    // optional .frl.device.wireformat.FanCfgs set_fan_cfgs = 6;
    case kSetFanCfgs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_fan_cfgs_);
      break;
    }
    // optional .frl.device.wireformat.TimerCfg set_timer_cfg = 7;
    case kSetTimerCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_timer_cfg_);
      break;
    }
    // optional .frl.device.wireformat.TrigCfg set_trig_cfg = 8;
    case kSetTrigCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_trig_cfg_);
      break;
    }
    // optional .frl.device.wireformat.SyncCfg set_sync_cfg = 9;
    case kSetSyncCfg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_sync_cfg_);
      break;
    }
    // optional .frl.device.wireformat.DeviceSerial set_serial = 10;
    case kSetSerial: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_serial_);
      break;
    }
    // optional .frl.device.wireformat.VFMotorCfgs set_vfmotor_cfgs = 11;
    case kSetVfmotorCfgs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_vfmotor_cfgs_);
      break;
    }
    // optional .frl.device.wireformat.VFMotorCmds set_vfmotor_cmd = 12;
    case kSetVfmotorCmd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Cmd_.set_vfmotor_cmd_);
      break;
    }
    // optional bool get_display_cfgs = 21;
    case kGetDisplayCfgs: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_gyro_cfgs = 22;
    case kGetGyroCfgs: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_acc_cfgs = 23;
    case kGetAccCfgs: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_baro_cfgs = 24;
    case kGetBaroCfgs: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_fans_cfgs = 25;
    case kGetFansCfgs: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_timer_cfg = 26;
    case kGetTimerCfg: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_trig_cfg = 27;
    case kGetTrigCfg: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_sync_cfg = 28;
    case kGetSyncCfg: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_device_serial = 29;
    case kGetDeviceSerial: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_board_info = 30;
    case kGetBoardInfo: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_protocol_version = 31;
    case kGetProtocolVersion: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_fw_version = 32;
    case kGetFwVersion: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_hw_version = 33;
    case kGetHwVersion: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_mfg_date = 34;
    case kGetMfgDate: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_vfmotor_states = 35;
    case kGetVfmotorStates: {
      total_size += 2 + 1;
      break;
    }
    // optional bool get_vfmotor_cfgs = 36;
    case kGetVfmotorCfgs: {
      total_size += 2 + 1;
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToDeviceMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.ToDeviceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ToDeviceMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToDeviceMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.ToDeviceMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.ToDeviceMsg)
    MergeFrom(*source);
  }
}

void ToDeviceMsg::MergeFrom(const ToDeviceMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.ToDeviceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd_id()) {
    set_cmd_id(from.cmd_id());
  }
  switch (from.Cmd_case()) {
    case kSetDisplayCfgs: {
      mutable_set_display_cfgs()->::frl::device::wireformat::DispDriverCfgs::MergeFrom(from.set_display_cfgs());
      break;
    }
    case kSetGyroCfgs: {
      mutable_set_gyro_cfgs()->::frl::device::wireformat::GyroCfgs::MergeFrom(from.set_gyro_cfgs());
      break;
    }
    case kSetAccCfgs: {
      mutable_set_acc_cfgs()->::frl::device::wireformat::AccCfgs::MergeFrom(from.set_acc_cfgs());
      break;
    }
    case kSetBaroCfgs: {
      mutable_set_baro_cfgs()->::frl::device::wireformat::BaroCfgs::MergeFrom(from.set_baro_cfgs());
      break;
    }
    case kSetFanCfgs: {
      mutable_set_fan_cfgs()->::frl::device::wireformat::FanCfgs::MergeFrom(from.set_fan_cfgs());
      break;
    }
    case kSetTimerCfg: {
      mutable_set_timer_cfg()->::frl::device::wireformat::TimerCfg::MergeFrom(from.set_timer_cfg());
      break;
    }
    case kSetTrigCfg: {
      mutable_set_trig_cfg()->::frl::device::wireformat::TrigCfg::MergeFrom(from.set_trig_cfg());
      break;
    }
    case kSetSyncCfg: {
      mutable_set_sync_cfg()->::frl::device::wireformat::SyncCfg::MergeFrom(from.set_sync_cfg());
      break;
    }
    case kSetSerial: {
      mutable_set_serial()->::frl::device::wireformat::DeviceSerial::MergeFrom(from.set_serial());
      break;
    }
    case kSetVfmotorCfgs: {
      mutable_set_vfmotor_cfgs()->::frl::device::wireformat::VFMotorCfgs::MergeFrom(from.set_vfmotor_cfgs());
      break;
    }
    case kSetVfmotorCmd: {
      mutable_set_vfmotor_cmd()->::frl::device::wireformat::VFMotorCmds::MergeFrom(from.set_vfmotor_cmd());
      break;
    }
    case kGetDisplayCfgs: {
      set_get_display_cfgs(from.get_display_cfgs());
      break;
    }
    case kGetGyroCfgs: {
      set_get_gyro_cfgs(from.get_gyro_cfgs());
      break;
    }
    case kGetAccCfgs: {
      set_get_acc_cfgs(from.get_acc_cfgs());
      break;
    }
    case kGetBaroCfgs: {
      set_get_baro_cfgs(from.get_baro_cfgs());
      break;
    }
    case kGetFansCfgs: {
      set_get_fans_cfgs(from.get_fans_cfgs());
      break;
    }
    case kGetTimerCfg: {
      set_get_timer_cfg(from.get_timer_cfg());
      break;
    }
    case kGetTrigCfg: {
      set_get_trig_cfg(from.get_trig_cfg());
      break;
    }
    case kGetSyncCfg: {
      set_get_sync_cfg(from.get_sync_cfg());
      break;
    }
    case kGetDeviceSerial: {
      set_get_device_serial(from.get_device_serial());
      break;
    }
    case kGetBoardInfo: {
      set_get_board_info(from.get_board_info());
      break;
    }
    case kGetProtocolVersion: {
      set_get_protocol_version(from.get_protocol_version());
      break;
    }
    case kGetFwVersion: {
      set_get_fw_version(from.get_fw_version());
      break;
    }
    case kGetHwVersion: {
      set_get_hw_version(from.get_hw_version());
      break;
    }
    case kGetMfgDate: {
      set_get_mfg_date(from.get_mfg_date());
      break;
    }
    case kGetVfmotorStates: {
      set_get_vfmotor_states(from.get_vfmotor_states());
      break;
    }
    case kGetVfmotorCfgs: {
      set_get_vfmotor_cfgs(from.get_vfmotor_cfgs());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
}

void ToDeviceMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.ToDeviceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToDeviceMsg::CopyFrom(const ToDeviceMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.ToDeviceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToDeviceMsg::IsInitialized() const {
  switch (Cmd_case()) {
    case kSetDisplayCfgs: {
      if (has_set_display_cfgs()) {
        if (!this->set_display_cfgs().IsInitialized()) return false;
      }
      break;
    }
    case kSetGyroCfgs: {
      if (has_set_gyro_cfgs()) {
        if (!this->set_gyro_cfgs().IsInitialized()) return false;
      }
      break;
    }
    case kSetAccCfgs: {
      if (has_set_acc_cfgs()) {
        if (!this->set_acc_cfgs().IsInitialized()) return false;
      }
      break;
    }
    case kSetBaroCfgs: {
      if (has_set_baro_cfgs()) {
        if (!this->set_baro_cfgs().IsInitialized()) return false;
      }
      break;
    }
    case kSetFanCfgs: {
      if (has_set_fan_cfgs()) {
        if (!this->set_fan_cfgs().IsInitialized()) return false;
      }
      break;
    }
    case kSetTimerCfg: {
      if (has_set_timer_cfg()) {
        if (!this->set_timer_cfg().IsInitialized()) return false;
      }
      break;
    }
    case kSetTrigCfg: {
      if (has_set_trig_cfg()) {
        if (!this->set_trig_cfg().IsInitialized()) return false;
      }
      break;
    }
    case kSetSyncCfg: {
      if (has_set_sync_cfg()) {
        if (!this->set_sync_cfg().IsInitialized()) return false;
      }
      break;
    }
    case kSetSerial: {
      break;
    }
    case kSetVfmotorCfgs: {
      break;
    }
    case kSetVfmotorCmd: {
      break;
    }
    case kGetDisplayCfgs: {
      break;
    }
    case kGetGyroCfgs: {
      break;
    }
    case kGetAccCfgs: {
      break;
    }
    case kGetBaroCfgs: {
      break;
    }
    case kGetFansCfgs: {
      break;
    }
    case kGetTimerCfg: {
      break;
    }
    case kGetTrigCfg: {
      break;
    }
    case kGetSyncCfg: {
      break;
    }
    case kGetDeviceSerial: {
      break;
    }
    case kGetBoardInfo: {
      break;
    }
    case kGetProtocolVersion: {
      break;
    }
    case kGetFwVersion: {
      break;
    }
    case kGetHwVersion: {
      break;
    }
    case kGetMfgDate: {
      break;
    }
    case kGetVfmotorStates: {
      break;
    }
    case kGetVfmotorCfgs: {
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ToDeviceMsg::Swap(ToDeviceMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToDeviceMsg::InternalSwap(ToDeviceMsg* other) {
  using std::swap;
  swap(cmd_id_, other->cmd_id_);
  swap(Cmd_, other->Cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ToDeviceMsg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplyMsg::InitAsDefaultInstance() {
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->timer_ = const_cast< ::frl::device::wireformat::TimerCfg*>(
      ::frl::device::wireformat::TimerCfg::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->info_ = const_cast< ::frl::device::wireformat::DeviceInfo*>(
      ::frl::device::wireformat::DeviceInfo::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->fw_ver_ = const_cast< ::frl::device::wireformat::FwVersion*>(
      ::frl::device::wireformat::FwVersion::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->hw_ver_ = const_cast< ::frl::device::wireformat::HwVersion*>(
      ::frl::device::wireformat::HwVersion::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->p_ver_ = const_cast< ::frl::device::wireformat::ProtocolVersion*>(
      ::frl::device::wireformat::ProtocolVersion::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->mfg_date_ = const_cast< ::frl::device::wireformat::MfgDate*>(
      ::frl::device::wireformat::MfgDate::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->serial_ = const_cast< ::frl::device::wireformat::DeviceSerial*>(
      ::frl::device::wireformat::DeviceSerial::internal_default_instance());
  ::frl::device::wireformat::_ReplyMsg_default_instance_._instance.get_mutable()->display_ = const_cast< ::frl::device::wireformat::DispDriverCfgs*>(
      ::frl::device::wireformat::DispDriverCfgs::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplyMsg::kCmdIdFieldNumber;
const int ReplyMsg::kAckFieldNumber;
const int ReplyMsg::kGyrosFieldNumber;
const int ReplyMsg::kAccsFieldNumber;
const int ReplyMsg::kBaroFieldNumber;
const int ReplyMsg::kFansFieldNumber;
const int ReplyMsg::kTimerFieldNumber;
const int ReplyMsg::kTrigsFieldNumber;
const int ReplyMsg::kSyncsFieldNumber;
const int ReplyMsg::kInfoFieldNumber;
const int ReplyMsg::kFwVerFieldNumber;
const int ReplyMsg::kHwVerFieldNumber;
const int ReplyMsg::kPVerFieldNumber;
const int ReplyMsg::kMfgDateFieldNumber;
const int ReplyMsg::kSerialFieldNumber;
const int ReplyMsg::kVfsFieldNumber;
const int ReplyMsg::kDisplayFieldNumber;
const int ReplyMsg::kVfmotorCfgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplyMsg::ReplyMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ReplyMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.ReplyMsg)
}
ReplyMsg::ReplyMsg(const ReplyMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      gyros_(from.gyros_),
      accs_(from.accs_),
      baro_(from.baro_),
      fans_(from.fans_),
      trigs_(from.trigs_),
      syncs_(from.syncs_),
      vfs_(from.vfs_),
      vfmotor_cfg_(from.vfmotor_cfg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timer()) {
    timer_ = new ::frl::device::wireformat::TimerCfg(*from.timer_);
  } else {
    timer_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::frl::device::wireformat::DeviceInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_fw_ver()) {
    fw_ver_ = new ::frl::device::wireformat::FwVersion(*from.fw_ver_);
  } else {
    fw_ver_ = NULL;
  }
  if (from.has_hw_ver()) {
    hw_ver_ = new ::frl::device::wireformat::HwVersion(*from.hw_ver_);
  } else {
    hw_ver_ = NULL;
  }
  if (from.has_p_ver()) {
    p_ver_ = new ::frl::device::wireformat::ProtocolVersion(*from.p_ver_);
  } else {
    p_ver_ = NULL;
  }
  if (from.has_mfg_date()) {
    mfg_date_ = new ::frl::device::wireformat::MfgDate(*from.mfg_date_);
  } else {
    mfg_date_ = NULL;
  }
  if (from.has_serial()) {
    serial_ = new ::frl::device::wireformat::DeviceSerial(*from.serial_);
  } else {
    serial_ = NULL;
  }
  if (from.has_display()) {
    display_ = new ::frl::device::wireformat::DispDriverCfgs(*from.display_);
  } else {
    display_ = NULL;
  }
  ::memcpy(&cmd_id_, &from.cmd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&cmd_id_)) + sizeof(ack_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.ReplyMsg)
}

void ReplyMsg::SharedCtor() {
  ::memset(&timer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&timer_)) + sizeof(ack_));
}

ReplyMsg::~ReplyMsg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.ReplyMsg)
  SharedDtor();
}

void ReplyMsg::SharedDtor() {
  if (this != internal_default_instance()) delete timer_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete fw_ver_;
  if (this != internal_default_instance()) delete hw_ver_;
  if (this != internal_default_instance()) delete p_ver_;
  if (this != internal_default_instance()) delete mfg_date_;
  if (this != internal_default_instance()) delete serial_;
  if (this != internal_default_instance()) delete display_;
}

void ReplyMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReplyMsg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplyMsg& ReplyMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_ReplyMsg.base);
  return *internal_default_instance();
}


void ReplyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.ReplyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gyros_.Clear();
  accs_.Clear();
  baro_.Clear();
  fans_.Clear();
  trigs_.Clear();
  syncs_.Clear();
  vfs_.Clear();
  vfmotor_cfg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timer_ != NULL);
      timer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fw_ver_ != NULL);
      fw_ver_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hw_ver_ != NULL);
      hw_ver_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(p_ver_ != NULL);
      p_ver_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mfg_date_ != NULL);
      mfg_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(serial_ != NULL);
      serial_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(display_ != NULL);
      display_->Clear();
    }
  }
  if (cached_has_bits & 768u) {
    ::memset(&cmd_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ack_) -
        reinterpret_cast<char*>(&cmd_id_)) + sizeof(ack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.ReplyMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cmd_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cmd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.GyroCfg gyros = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gyros()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.AccCfg accs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.BaroCfg baro = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_baro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.FanCfg fans = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.TimerCfg timer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.TrigCfg trigs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trigs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.SyncCfg syncs = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_syncs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.DeviceInfo info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.FwVersion fw_ver = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fw_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.HwVersion hw_ver = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hw_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.ProtocolVersion p_ver = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_ver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.MfgDate mfg_date = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mfg_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.DeviceSerial serial = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.VFMotor vfs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vfs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.DispDriverCfgs display = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.VFMotorCfgs vfmotor_cfg = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vfmotor_cfg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.ReplyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.ReplyMsg)
  return false;
#undef DO_
}

void ReplyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.ReplyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cmd_id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd_id(), output);
  }

  // optional bool ack = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ack(), output);
  }

  // repeated .frl.device.wireformat.GyroCfg gyros = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gyros_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->gyros(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.AccCfg accs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->accs(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.BaroCfg baro = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->baro_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->baro(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.FanCfg fans = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->fans(static_cast<int>(i)),
      output);
  }

  // optional .frl.device.wireformat.TimerCfg timer = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_timer(), output);
  }

  // repeated .frl.device.wireformat.TrigCfg trigs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->trigs(static_cast<int>(i)),
      output);
  }

  // repeated .frl.device.wireformat.SyncCfg syncs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syncs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->syncs(static_cast<int>(i)),
      output);
  }

  // optional .frl.device.wireformat.DeviceInfo info = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_info(), output);
  }

  // optional .frl.device.wireformat.FwVersion fw_ver = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_fw_ver(), output);
  }

  // optional .frl.device.wireformat.HwVersion hw_ver = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_hw_ver(), output);
  }

  // optional .frl.device.wireformat.ProtocolVersion p_ver = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_p_ver(), output);
  }

  // optional .frl.device.wireformat.MfgDate mfg_date = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_mfg_date(), output);
  }

  // optional .frl.device.wireformat.DeviceSerial serial = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_serial(), output);
  }

  // repeated .frl.device.wireformat.VFMotor vfs = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vfs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->vfs(static_cast<int>(i)),
      output);
  }

  // optional .frl.device.wireformat.DispDriverCfgs display = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_display(), output);
  }

  // repeated .frl.device.wireformat.VFMotorCfgs vfmotor_cfg = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vfmotor_cfg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->vfmotor_cfg(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.ReplyMsg)
}

::google::protobuf::uint8* ReplyMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.ReplyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cmd_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd_id(), target);
  }

  // optional bool ack = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ack(), target);
  }

  // repeated .frl.device.wireformat.GyroCfg gyros = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gyros_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->gyros(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.AccCfg accs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->accs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.BaroCfg baro = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->baro_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->baro(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.FanCfg fans = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->fans(static_cast<int>(i)), deterministic, target);
  }

  // optional .frl.device.wireformat.TimerCfg timer = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_timer(), deterministic, target);
  }

  // repeated .frl.device.wireformat.TrigCfg trigs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trigs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->trigs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .frl.device.wireformat.SyncCfg syncs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syncs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->syncs(static_cast<int>(i)), deterministic, target);
  }

  // optional .frl.device.wireformat.DeviceInfo info = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_info(), deterministic, target);
  }

  // optional .frl.device.wireformat.FwVersion fw_ver = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_fw_ver(), deterministic, target);
  }

  // optional .frl.device.wireformat.HwVersion hw_ver = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_hw_ver(), deterministic, target);
  }

  // optional .frl.device.wireformat.ProtocolVersion p_ver = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_p_ver(), deterministic, target);
  }

  // optional .frl.device.wireformat.MfgDate mfg_date = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_mfg_date(), deterministic, target);
  }

  // optional .frl.device.wireformat.DeviceSerial serial = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_serial(), deterministic, target);
  }

  // repeated .frl.device.wireformat.VFMotor vfs = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vfs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->vfs(static_cast<int>(i)), deterministic, target);
  }

  // optional .frl.device.wireformat.DispDriverCfgs display = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_display(), deterministic, target);
  }

  // repeated .frl.device.wireformat.VFMotorCfgs vfmotor_cfg = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vfmotor_cfg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->vfmotor_cfg(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.ReplyMsg)
  return target;
}

size_t ReplyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.ReplyMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 cmd_id = 1;
  if (has_cmd_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cmd_id());
  }
  // repeated .frl.device.wireformat.GyroCfg gyros = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->gyros_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gyros(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.AccCfg accs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->accs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.BaroCfg baro = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->baro_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->baro(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.FanCfg fans = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->fans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fans(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.TrigCfg trigs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->trigs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trigs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.SyncCfg syncs = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->syncs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->syncs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.VFMotor vfs = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->vfs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vfs(static_cast<int>(i)));
    }
  }

  // repeated .frl.device.wireformat.VFMotorCfgs vfmotor_cfg = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->vfmotor_cfg_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vfmotor_cfg(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .frl.device.wireformat.TimerCfg timer = 7;
    if (has_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timer_);
    }

    // optional .frl.device.wireformat.DeviceInfo info = 10;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .frl.device.wireformat.FwVersion fw_ver = 11;
    if (has_fw_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fw_ver_);
    }

    // optional .frl.device.wireformat.HwVersion hw_ver = 12;
    if (has_hw_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hw_ver_);
    }

    // optional .frl.device.wireformat.ProtocolVersion p_ver = 13;
    if (has_p_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *p_ver_);
    }

    // optional .frl.device.wireformat.MfgDate mfg_date = 14;
    if (has_mfg_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mfg_date_);
    }

    // optional .frl.device.wireformat.DeviceSerial serial = 15;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serial_);
    }

    // optional .frl.device.wireformat.DispDriverCfgs display = 17;
    if (has_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *display_);
    }

  }
  // optional bool ack = 2;
  if (has_ack()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.ReplyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplyMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.ReplyMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.ReplyMsg)
    MergeFrom(*source);
  }
}

void ReplyMsg::MergeFrom(const ReplyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.ReplyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gyros_.MergeFrom(from.gyros_);
  accs_.MergeFrom(from.accs_);
  baro_.MergeFrom(from.baro_);
  fans_.MergeFrom(from.fans_);
  trigs_.MergeFrom(from.trigs_);
  syncs_.MergeFrom(from.syncs_);
  vfs_.MergeFrom(from.vfs_);
  vfmotor_cfg_.MergeFrom(from.vfmotor_cfg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timer()->::frl::device::wireformat::TimerCfg::MergeFrom(from.timer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::frl::device::wireformat::DeviceInfo::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fw_ver()->::frl::device::wireformat::FwVersion::MergeFrom(from.fw_ver());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_hw_ver()->::frl::device::wireformat::HwVersion::MergeFrom(from.hw_ver());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_p_ver()->::frl::device::wireformat::ProtocolVersion::MergeFrom(from.p_ver());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_mfg_date()->::frl::device::wireformat::MfgDate::MergeFrom(from.mfg_date());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_serial()->::frl::device::wireformat::DeviceSerial::MergeFrom(from.serial());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_display()->::frl::device::wireformat::DispDriverCfgs::MergeFrom(from.display());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      cmd_id_ = from.cmd_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      ack_ = from.ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplyMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.ReplyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyMsg::CopyFrom(const ReplyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.ReplyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->gyros())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->accs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->baro())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fans())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trigs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->syncs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vfs())) return false;
  if (has_timer()) {
    if (!this->timer_->IsInitialized()) return false;
  }
  if (has_display()) {
    if (!this->display_->IsInitialized()) return false;
  }
  return true;
}

void ReplyMsg::Swap(ReplyMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplyMsg::InternalSwap(ReplyMsg* other) {
  using std::swap;
  CastToBase(&gyros_)->InternalSwap(CastToBase(&other->gyros_));
  CastToBase(&accs_)->InternalSwap(CastToBase(&other->accs_));
  CastToBase(&baro_)->InternalSwap(CastToBase(&other->baro_));
  CastToBase(&fans_)->InternalSwap(CastToBase(&other->fans_));
  CastToBase(&trigs_)->InternalSwap(CastToBase(&other->trigs_));
  CastToBase(&syncs_)->InternalSwap(CastToBase(&other->syncs_));
  CastToBase(&vfs_)->InternalSwap(CastToBase(&other->vfs_));
  CastToBase(&vfmotor_cfg_)->InternalSwap(CastToBase(&other->vfmotor_cfg_));
  swap(timer_, other->timer_);
  swap(info_, other->info_);
  swap(fw_ver_, other->fw_ver_);
  swap(hw_ver_, other->hw_ver_);
  swap(p_ver_, other->p_ver_);
  swap(mfg_date_, other->mfg_date_);
  swap(serial_, other->serial_);
  swap(display_, other->display_);
  swap(cmd_id_, other->cmd_id_);
  swap(ack_, other->ack_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReplyMsg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DispDriverCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispDriverCfg::kIdFieldNumber;
const int DispDriverCfg::kActiveFieldNumber;
const int DispDriverCfg::kBrightnessFieldNumber;
const int DispDriverCfg::kModeFieldNumber;
const int DispDriverCfg::kPersistenceFieldNumber;
const int DispDriverCfg::kOnOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispDriverCfg::DispDriverCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.DispDriverCfg)
}
DispDriverCfg::DispDriverCfg(const DispDriverCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_offset_) -
    reinterpret_cast<char*>(&id_)) + sizeof(on_offset_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.DispDriverCfg)
}

void DispDriverCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_offset_) -
      reinterpret_cast<char*>(&id_)) + sizeof(on_offset_));
}

DispDriverCfg::~DispDriverCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.DispDriverCfg)
  SharedDtor();
}

void DispDriverCfg::SharedDtor() {
}

void DispDriverCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DispDriverCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispDriverCfg& DispDriverCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfg.base);
  return *internal_default_instance();
}


void DispDriverCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.DispDriverCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&on_offset_) -
        reinterpret_cast<char*>(&id_)) + sizeof(on_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DispDriverCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.DispDriverCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 brightness = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_brightness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.DispDriverCfg.DispDriverMode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::DispDriverCfg_DispDriverMode_IsValid(value)) {
            set_mode(static_cast< ::frl::device::wireformat::DispDriverCfg_DispDriverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 persistence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_persistence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persistence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 on_offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_on_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &on_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.DispDriverCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.DispDriverCfg)
  return false;
#undef DO_
}

void DispDriverCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.DispDriverCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool active = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // optional uint32 brightness = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->brightness(), output);
  }

  // optional .frl.device.wireformat.DispDriverCfg.DispDriverMode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // optional uint32 persistence = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->persistence(), output);
  }

  // optional uint32 on_offset = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->on_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.DispDriverCfg)
}

::google::protobuf::uint8* DispDriverCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.DispDriverCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // optional uint32 brightness = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->brightness(), target);
  }

  // optional .frl.device.wireformat.DispDriverCfg.DispDriverMode mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // optional uint32 persistence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->persistence(), target);
  }

  // optional uint32 on_offset = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->on_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.DispDriverCfg)
  return target;
}

size_t DispDriverCfg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:frl.device.wireformat.DispDriverCfg)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_active()) {
    // required bool active = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DispDriverCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.DispDriverCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required bool active = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional uint32 brightness = 3;
    if (has_brightness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->brightness());
    }

    // optional .frl.device.wireformat.DispDriverCfg.DispDriverMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 persistence = 5;
    if (has_persistence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persistence());
    }

    // optional uint32 on_offset = 6;
    if (has_on_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->on_offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispDriverCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.DispDriverCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const DispDriverCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispDriverCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.DispDriverCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.DispDriverCfg)
    MergeFrom(*source);
  }
}

void DispDriverCfg::MergeFrom(const DispDriverCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.DispDriverCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000004u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      persistence_ = from.persistence_;
    }
    if (cached_has_bits & 0x00000020u) {
      on_offset_ = from.on_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DispDriverCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.DispDriverCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispDriverCfg::CopyFrom(const DispDriverCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.DispDriverCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispDriverCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DispDriverCfg::Swap(DispDriverCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispDriverCfg::InternalSwap(DispDriverCfg* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(active_, other->active_);
  swap(brightness_, other->brightness_);
  swap(mode_, other->mode_);
  swap(persistence_, other->persistence_);
  swap(on_offset_, other->on_offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DispDriverCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DispDriverCfgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispDriverCfgs::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispDriverCfgs::DispDriverCfgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.DispDriverCfgs)
}
DispDriverCfgs::DispDriverCfgs(const DispDriverCfgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.DispDriverCfgs)
}

void DispDriverCfgs::SharedCtor() {
}

DispDriverCfgs::~DispDriverCfgs() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.DispDriverCfgs)
  SharedDtor();
}

void DispDriverCfgs::SharedDtor() {
}

void DispDriverCfgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DispDriverCfgs::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispDriverCfgs& DispDriverCfgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_DispDriverCfgs.base);
  return *internal_default_instance();
}


void DispDriverCfgs::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.DispDriverCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DispDriverCfgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.DispDriverCfgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.DispDriverCfg array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.DispDriverCfgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.DispDriverCfgs)
  return false;
#undef DO_
}

void DispDriverCfgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.DispDriverCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.DispDriverCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.DispDriverCfgs)
}

::google::protobuf::uint8* DispDriverCfgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.DispDriverCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.DispDriverCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.DispDriverCfgs)
  return target;
}

size_t DispDriverCfgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.DispDriverCfgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.DispDriverCfg array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispDriverCfgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.DispDriverCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  const DispDriverCfgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispDriverCfgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.DispDriverCfgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.DispDriverCfgs)
    MergeFrom(*source);
  }
}

void DispDriverCfgs::MergeFrom(const DispDriverCfgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.DispDriverCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void DispDriverCfgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.DispDriverCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispDriverCfgs::CopyFrom(const DispDriverCfgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.DispDriverCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispDriverCfgs::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->array())) return false;
  return true;
}

void DispDriverCfgs::Swap(DispDriverCfgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispDriverCfgs::InternalSwap(DispDriverCfgs* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DispDriverCfgs::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GyroCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GyroCfg::kIdFieldNumber;
const int GyroCfg::kStreamingFieldNumber;
const int GyroCfg::kOdrHzFieldNumber;
const int GyroCfg::kRangeDpsFieldNumber;
const int GyroCfg::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GyroCfg::GyroCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.GyroCfg)
}
GyroCfg::GyroCfg(const GyroCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.GyroCfg)
}

void GyroCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mode_));
}

GyroCfg::~GyroCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.GyroCfg)
  SharedDtor();
}

void GyroCfg::SharedDtor() {
}

void GyroCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GyroCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GyroCfg& GyroCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfg.base);
  return *internal_default_instance();
}


void GyroCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.GyroCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GyroCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.GyroCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 odr_hz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_odr_hz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &odr_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 range_dps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_range_dps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_dps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.GyroCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.GyroCfg)
  return false;
#undef DO_
}

void GyroCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.GyroCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool streaming = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->streaming(), output);
  }

  // optional uint32 odr_hz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->odr_hz(), output);
  }

  // optional uint32 range_dps = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->range_dps(), output);
  }

  // optional uint32 mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.GyroCfg)
}

::google::protobuf::uint8* GyroCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.GyroCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool streaming = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->streaming(), target);
  }

  // optional uint32 odr_hz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->odr_hz(), target);
  }

  // optional uint32 range_dps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->range_dps(), target);
  }

  // optional uint32 mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.GyroCfg)
  return target;
}

size_t GyroCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.GyroCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bool streaming = 2;
    if (has_streaming()) {
      total_size += 1 + 1;
    }

    // optional uint32 odr_hz = 3;
    if (has_odr_hz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->odr_hz());
    }

    // optional uint32 range_dps = 4;
    if (has_range_dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_dps());
    }

    // optional uint32 mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GyroCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.GyroCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const GyroCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GyroCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.GyroCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.GyroCfg)
    MergeFrom(*source);
  }
}

void GyroCfg::MergeFrom(const GyroCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.GyroCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      streaming_ = from.streaming_;
    }
    if (cached_has_bits & 0x00000004u) {
      odr_hz_ = from.odr_hz_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_dps_ = from.range_dps_;
    }
    if (cached_has_bits & 0x00000010u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GyroCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.GyroCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GyroCfg::CopyFrom(const GyroCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.GyroCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GyroCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GyroCfg::Swap(GyroCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GyroCfg::InternalSwap(GyroCfg* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(streaming_, other->streaming_);
  swap(odr_hz_, other->odr_hz_);
  swap(range_dps_, other->range_dps_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GyroCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GyroCfgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GyroCfgs::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GyroCfgs::GyroCfgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.GyroCfgs)
}
GyroCfgs::GyroCfgs(const GyroCfgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.GyroCfgs)
}

void GyroCfgs::SharedCtor() {
}

GyroCfgs::~GyroCfgs() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.GyroCfgs)
  SharedDtor();
}

void GyroCfgs::SharedDtor() {
}

void GyroCfgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GyroCfgs::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GyroCfgs& GyroCfgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_GyroCfgs.base);
  return *internal_default_instance();
}


void GyroCfgs::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.GyroCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GyroCfgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.GyroCfgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.GyroCfg array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.GyroCfgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.GyroCfgs)
  return false;
#undef DO_
}

void GyroCfgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.GyroCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.GyroCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.GyroCfgs)
}

::google::protobuf::uint8* GyroCfgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.GyroCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.GyroCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.GyroCfgs)
  return target;
}

size_t GyroCfgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.GyroCfgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.GyroCfg array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GyroCfgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.GyroCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  const GyroCfgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GyroCfgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.GyroCfgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.GyroCfgs)
    MergeFrom(*source);
  }
}

void GyroCfgs::MergeFrom(const GyroCfgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.GyroCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void GyroCfgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.GyroCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GyroCfgs::CopyFrom(const GyroCfgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.GyroCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GyroCfgs::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->array())) return false;
  return true;
}

void GyroCfgs::Swap(GyroCfgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GyroCfgs::InternalSwap(GyroCfgs* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GyroCfgs::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccCfg::kIdFieldNumber;
const int AccCfg::kStreamingFieldNumber;
const int AccCfg::kOdrHzFieldNumber;
const int AccCfg::kRangeGFieldNumber;
const int AccCfg::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccCfg::AccCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.AccCfg)
}
AccCfg::AccCfg(const AccCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.AccCfg)
}

void AccCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mode_));
}

AccCfg::~AccCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.AccCfg)
  SharedDtor();
}

void AccCfg::SharedDtor() {
}

void AccCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccCfg& AccCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfg.base);
  return *internal_default_instance();
}


void AccCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.AccCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.AccCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 odr_hz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_odr_hz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &odr_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 range_g = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_range_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.AccCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.AccCfg)
  return false;
#undef DO_
}

void AccCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.AccCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool streaming = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->streaming(), output);
  }

  // optional uint32 odr_hz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->odr_hz(), output);
  }

  // optional uint32 range_g = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->range_g(), output);
  }

  // optional uint32 mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.AccCfg)
}

::google::protobuf::uint8* AccCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.AccCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool streaming = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->streaming(), target);
  }

  // optional uint32 odr_hz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->odr_hz(), target);
  }

  // optional uint32 range_g = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->range_g(), target);
  }

  // optional uint32 mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.AccCfg)
  return target;
}

size_t AccCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.AccCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bool streaming = 2;
    if (has_streaming()) {
      total_size += 1 + 1;
    }

    // optional uint32 odr_hz = 3;
    if (has_odr_hz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->odr_hz());
    }

    // optional uint32 range_g = 4;
    if (has_range_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_g());
    }

    // optional uint32 mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.AccCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const AccCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.AccCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.AccCfg)
    MergeFrom(*source);
  }
}

void AccCfg::MergeFrom(const AccCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.AccCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      streaming_ = from.streaming_;
    }
    if (cached_has_bits & 0x00000004u) {
      odr_hz_ = from.odr_hz_;
    }
    if (cached_has_bits & 0x00000008u) {
      range_g_ = from.range_g_;
    }
    if (cached_has_bits & 0x00000010u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.AccCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccCfg::CopyFrom(const AccCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.AccCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AccCfg::Swap(AccCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccCfg::InternalSwap(AccCfg* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(streaming_, other->streaming_);
  swap(odr_hz_, other->odr_hz_);
  swap(range_g_, other->range_g_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AccCfgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccCfgs::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccCfgs::AccCfgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.AccCfgs)
}
AccCfgs::AccCfgs(const AccCfgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.AccCfgs)
}

void AccCfgs::SharedCtor() {
}

AccCfgs::~AccCfgs() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.AccCfgs)
  SharedDtor();
}

void AccCfgs::SharedDtor() {
}

void AccCfgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AccCfgs::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccCfgs& AccCfgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_AccCfgs.base);
  return *internal_default_instance();
}


void AccCfgs::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.AccCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccCfgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.AccCfgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.AccCfg array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.AccCfgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.AccCfgs)
  return false;
#undef DO_
}

void AccCfgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.AccCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.AccCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.AccCfgs)
}

::google::protobuf::uint8* AccCfgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.AccCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.AccCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.AccCfgs)
  return target;
}

size_t AccCfgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.AccCfgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.AccCfg array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccCfgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.AccCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  const AccCfgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccCfgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.AccCfgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.AccCfgs)
    MergeFrom(*source);
  }
}

void AccCfgs::MergeFrom(const AccCfgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.AccCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void AccCfgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.AccCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccCfgs::CopyFrom(const AccCfgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.AccCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccCfgs::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->array())) return false;
  return true;
}

void AccCfgs::Swap(AccCfgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccCfgs::InternalSwap(AccCfgs* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AccCfgs::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaroCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaroCfg::kIdFieldNumber;
const int BaroCfg::kStreamingFieldNumber;
const int BaroCfg::kRawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaroCfg::BaroCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.BaroCfg)
}
BaroCfg::BaroCfg(const BaroCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      raw_(from.raw_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&streaming_) -
    reinterpret_cast<char*>(&id_)) + sizeof(streaming_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.BaroCfg)
}

void BaroCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streaming_) -
      reinterpret_cast<char*>(&id_)) + sizeof(streaming_));
}

BaroCfg::~BaroCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.BaroCfg)
  SharedDtor();
}

void BaroCfg::SharedDtor() {
}

void BaroCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BaroCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaroCfg& BaroCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfg.base);
  return *internal_default_instance();
}


void BaroCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.BaroCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streaming_) -
        reinterpret_cast<char*>(&id_)) + sizeof(streaming_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaroCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.BaroCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 raw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_raw())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_raw())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.BaroCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.BaroCfg)
  return false;
#undef DO_
}

void BaroCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.BaroCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool streaming = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->streaming(), output);
  }

  // repeated uint32 raw = 3;
  for (int i = 0, n = this->raw_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->raw(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.BaroCfg)
}

::google::protobuf::uint8* BaroCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.BaroCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool streaming = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->streaming(), target);
  }

  // repeated uint32 raw = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->raw_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.BaroCfg)
  return target;
}

size_t BaroCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.BaroCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // repeated uint32 raw = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->raw_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->raw_size());
    total_size += data_size;
  }

  // optional bool streaming = 2;
  if (has_streaming()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaroCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.BaroCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const BaroCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaroCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.BaroCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.BaroCfg)
    MergeFrom(*source);
  }
}

void BaroCfg::MergeFrom(const BaroCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.BaroCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_.MergeFrom(from.raw_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      streaming_ = from.streaming_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaroCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.BaroCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaroCfg::CopyFrom(const BaroCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.BaroCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaroCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BaroCfg::Swap(BaroCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaroCfg::InternalSwap(BaroCfg* other) {
  using std::swap;
  raw_.InternalSwap(&other->raw_);
  swap(id_, other->id_);
  swap(streaming_, other->streaming_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BaroCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaroCfgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaroCfgs::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaroCfgs::BaroCfgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.BaroCfgs)
}
BaroCfgs::BaroCfgs(const BaroCfgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.BaroCfgs)
}

void BaroCfgs::SharedCtor() {
}

BaroCfgs::~BaroCfgs() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.BaroCfgs)
  SharedDtor();
}

void BaroCfgs::SharedDtor() {
}

void BaroCfgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BaroCfgs::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaroCfgs& BaroCfgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_BaroCfgs.base);
  return *internal_default_instance();
}


void BaroCfgs::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.BaroCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaroCfgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.BaroCfgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.BaroCfg array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.BaroCfgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.BaroCfgs)
  return false;
#undef DO_
}

void BaroCfgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.BaroCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.BaroCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.BaroCfgs)
}

::google::protobuf::uint8* BaroCfgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.BaroCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.BaroCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.BaroCfgs)
  return target;
}

size_t BaroCfgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.BaroCfgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.BaroCfg array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaroCfgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.BaroCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  const BaroCfgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaroCfgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.BaroCfgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.BaroCfgs)
    MergeFrom(*source);
  }
}

void BaroCfgs::MergeFrom(const BaroCfgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.BaroCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void BaroCfgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.BaroCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaroCfgs::CopyFrom(const BaroCfgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.BaroCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaroCfgs::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->array())) return false;
  return true;
}

void BaroCfgs::Swap(BaroCfgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaroCfgs::InternalSwap(BaroCfgs* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BaroCfgs::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FanCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FanCfg::kIdFieldNumber;
const int FanCfg::kActiveFieldNumber;
const int FanCfg::kStreamingFieldNumber;
const int FanCfg::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FanCfg::FanCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.FanCfg)
}
FanCfg::FanCfg(const FanCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.FanCfg)
}

void FanCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_));
}

FanCfg::~FanCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.FanCfg)
  SharedDtor();
}

void FanCfg::SharedDtor() {
}

void FanCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FanCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FanCfg& FanCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfg.base);
  return *internal_default_instance();
}


void FanCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.FanCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FanCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.FanCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.FanCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.FanCfg)
  return false;
#undef DO_
}

void FanCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.FanCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool active = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // optional bool streaming = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->streaming(), output);
  }

  // optional uint32 speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.FanCfg)
}

::google::protobuf::uint8* FanCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.FanCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // optional bool streaming = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->streaming(), target);
  }

  // optional uint32 speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.FanCfg)
  return target;
}

size_t FanCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.FanCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool streaming = 3;
    if (has_streaming()) {
      total_size += 1 + 1;
    }

    // optional uint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FanCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.FanCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const FanCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FanCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.FanCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.FanCfg)
    MergeFrom(*source);
  }
}

void FanCfg::MergeFrom(const FanCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.FanCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000004u) {
      streaming_ = from.streaming_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FanCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.FanCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanCfg::CopyFrom(const FanCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.FanCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FanCfg::Swap(FanCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FanCfg::InternalSwap(FanCfg* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(active_, other->active_);
  swap(streaming_, other->streaming_);
  swap(speed_, other->speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FanCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FanCfgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FanCfgs::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FanCfgs::FanCfgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.FanCfgs)
}
FanCfgs::FanCfgs(const FanCfgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.FanCfgs)
}

void FanCfgs::SharedCtor() {
}

FanCfgs::~FanCfgs() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.FanCfgs)
  SharedDtor();
}

void FanCfgs::SharedDtor() {
}

void FanCfgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FanCfgs::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FanCfgs& FanCfgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_FanCfgs.base);
  return *internal_default_instance();
}


void FanCfgs::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.FanCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FanCfgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.FanCfgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.FanCfg array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.FanCfgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.FanCfgs)
  return false;
#undef DO_
}

void FanCfgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.FanCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.FanCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.FanCfgs)
}

::google::protobuf::uint8* FanCfgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.FanCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.FanCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.FanCfgs)
  return target;
}

size_t FanCfgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.FanCfgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.FanCfg array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FanCfgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.FanCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  const FanCfgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FanCfgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.FanCfgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.FanCfgs)
    MergeFrom(*source);
  }
}

void FanCfgs::MergeFrom(const FanCfgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.FanCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void FanCfgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.FanCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanCfgs::CopyFrom(const FanCfgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.FanCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanCfgs::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->array())) return false;
  return true;
}

void FanCfgs::Swap(FanCfgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FanCfgs::InternalSwap(FanCfgs* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FanCfgs::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimerCfg::InitAsDefaultInstance() {
  ::frl::device::wireformat::_TimerCfg_default_instance_._instance.get_mutable()->time_ = const_cast< ::frl::device::wireformat::TaiTime*>(
      ::frl::device::wireformat::TaiTime::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimerCfg::kIdFieldNumber;
const int TimerCfg::kSourceFieldNumber;
const int TimerCfg::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimerCfg::TimerCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TimerCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.TimerCfg)
}
TimerCfg::TimerCfg(const TimerCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::frl::device::wireformat::TaiTime(*from.time_);
  } else {
    time_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&id_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.TimerCfg)
}

void TimerCfg::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&time_)) + sizeof(source_));
}

TimerCfg::~TimerCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.TimerCfg)
  SharedDtor();
}

void TimerCfg::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void TimerCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimerCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimerCfg& TimerCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TimerCfg.base);
  return *internal_default_instance();
}


void TimerCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.TimerCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != NULL);
    time_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_) -
        reinterpret_cast<char*>(&id_)) + sizeof(source_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimerCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.TimerCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.TimerCfg.Source source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::TimerCfg_Source_IsValid(value)) {
            set_source(static_cast< ::frl::device::wireformat::TimerCfg_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.TaiTime time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.TimerCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.TimerCfg)
  return false;
#undef DO_
}

void TimerCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.TimerCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .frl.device.wireformat.TimerCfg.Source source = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  // optional .frl.device.wireformat.TaiTime time = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.TimerCfg)
}

::google::protobuf::uint8* TimerCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.TimerCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .frl.device.wireformat.TimerCfg.Source source = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source(), target);
  }

  // optional .frl.device.wireformat.TaiTime time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_time(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.TimerCfg)
  return target;
}

size_t TimerCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.TimerCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional .frl.device.wireformat.TaiTime time = 3;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // optional .frl.device.wireformat.TimerCfg.Source source = 2;
  if (has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.TimerCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimerCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.TimerCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.TimerCfg)
    MergeFrom(*source);
  }
}

void TimerCfg::MergeFrom(const TimerCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.TimerCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time()->::frl::device::wireformat::TaiTime::MergeFrom(from.time());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimerCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.TimerCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerCfg::CopyFrom(const TimerCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.TimerCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void TimerCfg::Swap(TimerCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimerCfg::InternalSwap(TimerCfg* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(id_, other->id_);
  swap(source_, other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimerCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrigCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrigCfg::kIdFieldNumber;
const int TrigCfg::kTrigChCfgsFieldNumber;
const int TrigCfg::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrigCfg::TrigCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.TrigCfg)
}
TrigCfg::TrigCfg(const TrigCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trig_ch_cfgs_(from.trig_ch_cfgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.TrigCfg)
}

void TrigCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&id_)) + sizeof(action_));
}

TrigCfg::~TrigCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.TrigCfg)
  SharedDtor();
}

void TrigCfg::SharedDtor() {
}

void TrigCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrigCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrigCfg& TrigCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigCfg.base);
  return *internal_default_instance();
}


void TrigCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.TrigCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trig_ch_cfgs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&id_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrigCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.TrigCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.TrigChCfg trig_ch_cfgs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trig_ch_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.TrigCfg.Action action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::TrigCfg_Action_IsValid(value)) {
            set_action(static_cast< ::frl::device::wireformat::TrigCfg_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.TrigCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.TrigCfg)
  return false;
#undef DO_
}

void TrigCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.TrigCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .frl.device.wireformat.TrigChCfg trig_ch_cfgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trig_ch_cfgs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trig_ch_cfgs(static_cast<int>(i)),
      output);
  }

  // optional .frl.device.wireformat.TrigCfg.Action action = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.TrigCfg)
}

::google::protobuf::uint8* TrigCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.TrigCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .frl.device.wireformat.TrigChCfg trig_ch_cfgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trig_ch_cfgs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trig_ch_cfgs(static_cast<int>(i)), deterministic, target);
  }

  // optional .frl.device.wireformat.TrigCfg.Action action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.TrigCfg)
  return target;
}

size_t TrigCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.TrigCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // repeated .frl.device.wireformat.TrigChCfg trig_ch_cfgs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trig_ch_cfgs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trig_ch_cfgs(static_cast<int>(i)));
    }
  }

  // optional .frl.device.wireformat.TrigCfg.Action action = 3;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrigCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.TrigCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const TrigCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrigCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.TrigCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.TrigCfg)
    MergeFrom(*source);
  }
}

void TrigCfg::MergeFrom(const TrigCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.TrigCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trig_ch_cfgs_.MergeFrom(from.trig_ch_cfgs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrigCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.TrigCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrigCfg::CopyFrom(const TrigCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.TrigCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TrigCfg::Swap(TrigCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrigCfg::InternalSwap(TrigCfg* other) {
  using std::swap;
  CastToBase(&trig_ch_cfgs_)->InternalSwap(CastToBase(&other->trig_ch_cfgs_));
  swap(id_, other->id_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrigCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrigChCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrigChCfg::kChannelFieldNumber;
const int TrigChCfg::kPeriodUsFieldNumber;
const int TrigChCfg::kOffsetUsFieldNumber;
const int TrigChCfg::kMasterFieldNumber;
const int TrigChCfg::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrigChCfg::TrigChCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigChCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.TrigChCfg)
}
TrigChCfg::TrigChCfg(const TrigChCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.TrigChCfg)
}

void TrigChCfg::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(active_));
}

TrigChCfg::~TrigChCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.TrigChCfg)
  SharedDtor();
}

void TrigChCfg::SharedDtor() {
}

void TrigChCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrigChCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrigChCfg& TrigChCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_TrigChCfg.base);
  return *internal_default_instance();
}


void TrigChCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.TrigChCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrigChCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.TrigChCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 period_us = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_period_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offset_us = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offset_us();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 master = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_master();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.TrigChCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.TrigChCfg)
  return false;
#undef DO_
}

void TrigChCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.TrigChCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint32 period_us = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->period_us(), output);
  }

  // optional uint32 offset_us = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset_us(), output);
  }

  // optional uint32 master = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->master(), output);
  }

  // optional bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.TrigChCfg)
}

::google::protobuf::uint8* TrigChCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.TrigChCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint32 period_us = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->period_us(), target);
  }

  // optional uint32 offset_us = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset_us(), target);
  }

  // optional uint32 master = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->master(), target);
  }

  // optional bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.TrigChCfg)
  return target;
}

size_t TrigChCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.TrigChCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 period_us = 2;
    if (has_period_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period_us());
    }

    // optional uint32 offset_us = 3;
    if (has_offset_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_us());
    }

    // optional uint32 master = 4;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->master());
    }

    // optional bool active = 5;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrigChCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.TrigChCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const TrigChCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrigChCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.TrigChCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.TrigChCfg)
    MergeFrom(*source);
  }
}

void TrigChCfg::MergeFrom(const TrigChCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.TrigChCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000002u) {
      period_us_ = from.period_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_us_ = from.offset_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      master_ = from.master_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrigChCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.TrigChCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrigChCfg::CopyFrom(const TrigChCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.TrigChCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigChCfg::IsInitialized() const {
  return true;
}

void TrigChCfg::Swap(TrigChCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrigChCfg::InternalSwap(TrigChCfg* other) {
  using std::swap;
  swap(channel_, other->channel_);
  swap(period_us_, other->period_us_);
  swap(offset_us_, other->offset_us_);
  swap(master_, other->master_);
  swap(active_, other->active_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrigChCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SyncCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncCfg::kIdFieldNumber;
const int SyncCfg::kSyncChCfgsFieldNumber;
const int SyncCfg::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncCfg::SyncCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.SyncCfg)
}
SyncCfg::SyncCfg(const SyncCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sync_ch_cfgs_(from.sync_ch_cfgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.SyncCfg)
}

void SyncCfg::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&id_)) + sizeof(action_));
}

SyncCfg::~SyncCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.SyncCfg)
  SharedDtor();
}

void SyncCfg::SharedDtor() {
}

void SyncCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SyncCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncCfg& SyncCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncCfg.base);
  return *internal_default_instance();
}


void SyncCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.SyncCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sync_ch_cfgs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&id_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.SyncCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .frl.device.wireformat.SyncChCfg sync_ch_cfgs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sync_ch_cfgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.SyncCfg.Action action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::SyncCfg_Action_IsValid(value)) {
            set_action(static_cast< ::frl::device::wireformat::SyncCfg_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.SyncCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.SyncCfg)
  return false;
#undef DO_
}

void SyncCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.SyncCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .frl.device.wireformat.SyncChCfg sync_ch_cfgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sync_ch_cfgs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sync_ch_cfgs(static_cast<int>(i)),
      output);
  }

  // optional .frl.device.wireformat.SyncCfg.Action action = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.SyncCfg)
}

::google::protobuf::uint8* SyncCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.SyncCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .frl.device.wireformat.SyncChCfg sync_ch_cfgs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sync_ch_cfgs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sync_ch_cfgs(static_cast<int>(i)), deterministic, target);
  }

  // optional .frl.device.wireformat.SyncCfg.Action action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.SyncCfg)
  return target;
}

size_t SyncCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.SyncCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // repeated .frl.device.wireformat.SyncChCfg sync_ch_cfgs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sync_ch_cfgs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sync_ch_cfgs(static_cast<int>(i)));
    }
  }

  // optional .frl.device.wireformat.SyncCfg.Action action = 3;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.SyncCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.SyncCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.SyncCfg)
    MergeFrom(*source);
  }
}

void SyncCfg::MergeFrom(const SyncCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.SyncCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sync_ch_cfgs_.MergeFrom(from.sync_ch_cfgs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.SyncCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncCfg::CopyFrom(const SyncCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.SyncCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SyncCfg::Swap(SyncCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncCfg::InternalSwap(SyncCfg* other) {
  using std::swap;
  CastToBase(&sync_ch_cfgs_)->InternalSwap(CastToBase(&other->sync_ch_cfgs_));
  swap(id_, other->id_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SyncCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SyncChCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncChCfg::kChannelFieldNumber;
const int SyncChCfg::kDirFieldNumber;
const int SyncChCfg::kPrescalerFieldNumber;
const int SyncChCfg::kResetCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncChCfg::SyncChCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncChCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.SyncChCfg)
}
SyncChCfg::SyncChCfg(const SyncChCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_cnt_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(reset_cnt_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.SyncChCfg)
}

void SyncChCfg::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_cnt_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(reset_cnt_));
}

SyncChCfg::~SyncChCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.SyncChCfg)
  SharedDtor();
}

void SyncChCfg::SharedDtor() {
}

void SyncChCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SyncChCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncChCfg& SyncChCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_SyncChCfg.base);
  return *internal_default_instance();
}


void SyncChCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.SyncChCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reset_cnt_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(reset_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncChCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.SyncChCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .frl.device.wireformat.SyncChCfg.DIR dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::frl::device::wireformat::SyncChCfg_DIR_IsValid(value)) {
            set_dir(static_cast< ::frl::device::wireformat::SyncChCfg_DIR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prescaler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_prescaler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prescaler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset_cnt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reset_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.SyncChCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.SyncChCfg)
  return false;
#undef DO_
}

void SyncChCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.SyncChCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional .frl.device.wireformat.SyncChCfg.DIR dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dir(), output);
  }

  // optional uint32 prescaler = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prescaler(), output);
  }

  // optional bool reset_cnt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reset_cnt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.SyncChCfg)
}

::google::protobuf::uint8* SyncChCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.SyncChCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional .frl.device.wireformat.SyncChCfg.DIR dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dir(), target);
  }

  // optional uint32 prescaler = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prescaler(), target);
  }

  // optional bool reset_cnt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reset_cnt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.SyncChCfg)
  return target;
}

size_t SyncChCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.SyncChCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .frl.device.wireformat.SyncChCfg.DIR dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional uint32 prescaler = 3;
    if (has_prescaler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prescaler());
    }

    // optional bool reset_cnt = 4;
    if (has_reset_cnt()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncChCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.SyncChCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncChCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncChCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.SyncChCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.SyncChCfg)
    MergeFrom(*source);
  }
}

void SyncChCfg::MergeFrom(const SyncChCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.SyncChCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000002u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000004u) {
      prescaler_ = from.prescaler_;
    }
    if (cached_has_bits & 0x00000008u) {
      reset_cnt_ = from.reset_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncChCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.SyncChCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncChCfg::CopyFrom(const SyncChCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.SyncChCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncChCfg::IsInitialized() const {
  return true;
}

void SyncChCfg::Swap(SyncChCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncChCfg::InternalSwap(SyncChCfg* other) {
  using std::swap;
  swap(channel_, other->channel_);
  swap(dir_, other->dir_);
  swap(prescaler_, other->prescaler_);
  swap(reset_cnt_, other->reset_cnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SyncChCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VFMotorCfg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VFMotorCfg::kPidPFieldNumber;
const int VFMotorCfg::kPidIFieldNumber;
const int VFMotorCfg::kPidDFieldNumber;
const int VFMotorCfg::kSafetyMarginFieldNumber;
const int VFMotorCfg::kStepLimitFieldNumber;
const int VFMotorCfg::kAccelLimitFieldNumber;
const int VFMotorCfg::kWindupLimitFieldNumber;
const int VFMotorCfg::kDriverCurrentFieldNumber;
const int VFMotorCfg::kMicrosteppingFieldNumber;
const int VFMotorCfg::kMinFieldNumber;
const int VFMotorCfg::kMaxFieldNumber;
const int VFMotorCfg::kOffsetFieldNumber;
const int VFMotorCfg::kEnablePidFieldNumber;
const int VFMotorCfg::kEnableMotorFieldNumber;
const int VFMotorCfg::kEnableStallCurFieldNumber;
const int VFMotorCfg::kEnableFlagFieldNumber;
const int VFMotorCfg::kStreamingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VFMotorCfg::VFMotorCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.VFMotorCfg)
}
VFMotorCfg::VFMotorCfg(const VFMotorCfg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pid_p_, &from.pid_p_,
    static_cast<size_t>(reinterpret_cast<char*>(&streaming_) -
    reinterpret_cast<char*>(&pid_p_)) + sizeof(streaming_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.VFMotorCfg)
}

void VFMotorCfg::SharedCtor() {
  ::memset(&pid_p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&streaming_) -
      reinterpret_cast<char*>(&pid_p_)) + sizeof(streaming_));
}

VFMotorCfg::~VFMotorCfg() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.VFMotorCfg)
  SharedDtor();
}

void VFMotorCfg::SharedDtor() {
}

void VFMotorCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VFMotorCfg::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VFMotorCfg& VFMotorCfg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfg.base);
  return *internal_default_instance();
}


void VFMotorCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.VFMotorCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&pid_p_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_current_) -
        reinterpret_cast<char*>(&pid_p_)) + sizeof(driver_current_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&microstepping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_flag_) -
        reinterpret_cast<char*>(&microstepping_)) + sizeof(enable_flag_));
  }
  streaming_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VFMotorCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.VFMotorCfg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pid_P = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_pid_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pid_I = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_pid_i();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pid_D = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pid_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float safety_margin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_safety_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &safety_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float step_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_step_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accel_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 windup_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_windup_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &windup_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 driver_current = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_driver_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &driver_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 microstepping = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_microstepping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &microstepping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offset = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_pid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_enable_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_motor = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_enable_motor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_motor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_stall_cur = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_enable_stall_cur();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_stall_cur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_flag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_enable_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streaming = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.VFMotorCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.VFMotorCfg)
  return false;
#undef DO_
}

void VFMotorCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.VFMotorCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pid_P = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pid_p(), output);
  }

  // optional float pid_I = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pid_i(), output);
  }

  // optional float pid_D = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pid_d(), output);
  }

  // optional float safety_margin = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->safety_margin(), output);
  }

  // optional float step_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->step_limit(), output);
  }

  // optional float accel_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->accel_limit(), output);
  }

  // optional uint32 windup_limit = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->windup_limit(), output);
  }

  // optional uint32 driver_current = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->driver_current(), output);
  }

  // optional uint32 microstepping = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->microstepping(), output);
  }

  // optional uint32 min = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min(), output);
  }

  // optional uint32 max = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max(), output);
  }

  // optional uint32 offset = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->offset(), output);
  }

  // optional bool enable_pid = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_pid(), output);
  }

  // optional bool enable_motor = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_motor(), output);
  }

  // optional bool enable_stall_cur = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_stall_cur(), output);
  }

  // optional bool enable_flag = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_flag(), output);
  }

  // optional bool streaming = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->streaming(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.VFMotorCfg)
}

::google::protobuf::uint8* VFMotorCfg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.VFMotorCfg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pid_P = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pid_p(), target);
  }

  // optional float pid_I = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pid_i(), target);
  }

  // optional float pid_D = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pid_d(), target);
  }

  // optional float safety_margin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->safety_margin(), target);
  }

  // optional float step_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->step_limit(), target);
  }

  // optional float accel_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->accel_limit(), target);
  }

  // optional uint32 windup_limit = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->windup_limit(), target);
  }

  // optional uint32 driver_current = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->driver_current(), target);
  }

  // optional uint32 microstepping = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->microstepping(), target);
  }

  // optional uint32 min = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min(), target);
  }

  // optional uint32 max = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max(), target);
  }

  // optional uint32 offset = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->offset(), target);
  }

  // optional bool enable_pid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enable_pid(), target);
  }

  // optional bool enable_motor = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_motor(), target);
  }

  // optional bool enable_stall_cur = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_stall_cur(), target);
  }

  // optional bool enable_flag = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_flag(), target);
  }

  // optional bool streaming = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->streaming(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.VFMotorCfg)
  return target;
}

size_t VFMotorCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.VFMotorCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float pid_P = 1;
    if (has_pid_p()) {
      total_size += 1 + 4;
    }

    // optional float pid_I = 2;
    if (has_pid_i()) {
      total_size += 1 + 4;
    }

    // optional float pid_D = 3;
    if (has_pid_d()) {
      total_size += 1 + 4;
    }

    // optional float safety_margin = 4;
    if (has_safety_margin()) {
      total_size += 1 + 4;
    }

    // optional float step_limit = 5;
    if (has_step_limit()) {
      total_size += 1 + 4;
    }

    // optional float accel_limit = 6;
    if (has_accel_limit()) {
      total_size += 1 + 4;
    }

    // optional uint32 windup_limit = 7;
    if (has_windup_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->windup_limit());
    }

    // optional uint32 driver_current = 8;
    if (has_driver_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->driver_current());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 microstepping = 9;
    if (has_microstepping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->microstepping());
    }

    // optional uint32 min = 10;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 11;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional uint32 offset = 12;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional bool enable_pid = 13;
    if (has_enable_pid()) {
      total_size += 1 + 1;
    }

    // optional bool enable_motor = 14;
    if (has_enable_motor()) {
      total_size += 1 + 1;
    }

    // optional bool enable_stall_cur = 15;
    if (has_enable_stall_cur()) {
      total_size += 1 + 1;
    }

    // optional bool enable_flag = 16;
    if (has_enable_flag()) {
      total_size += 2 + 1;
    }

  }
  // optional bool streaming = 17;
  if (has_streaming()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VFMotorCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.VFMotorCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const VFMotorCfg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VFMotorCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.VFMotorCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.VFMotorCfg)
    MergeFrom(*source);
  }
}

void VFMotorCfg::MergeFrom(const VFMotorCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.VFMotorCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pid_p_ = from.pid_p_;
    }
    if (cached_has_bits & 0x00000002u) {
      pid_i_ = from.pid_i_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_d_ = from.pid_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      safety_margin_ = from.safety_margin_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_limit_ = from.step_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      accel_limit_ = from.accel_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      windup_limit_ = from.windup_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      driver_current_ = from.driver_current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      microstepping_ = from.microstepping_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000800u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_pid_ = from.enable_pid_;
    }
    if (cached_has_bits & 0x00002000u) {
      enable_motor_ = from.enable_motor_;
    }
    if (cached_has_bits & 0x00004000u) {
      enable_stall_cur_ = from.enable_stall_cur_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_flag_ = from.enable_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_streaming(from.streaming());
  }
}

void VFMotorCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.VFMotorCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFMotorCfg::CopyFrom(const VFMotorCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.VFMotorCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFMotorCfg::IsInitialized() const {
  return true;
}

void VFMotorCfg::Swap(VFMotorCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VFMotorCfg::InternalSwap(VFMotorCfg* other) {
  using std::swap;
  swap(pid_p_, other->pid_p_);
  swap(pid_i_, other->pid_i_);
  swap(pid_d_, other->pid_d_);
  swap(safety_margin_, other->safety_margin_);
  swap(step_limit_, other->step_limit_);
  swap(accel_limit_, other->accel_limit_);
  swap(windup_limit_, other->windup_limit_);
  swap(driver_current_, other->driver_current_);
  swap(microstepping_, other->microstepping_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(offset_, other->offset_);
  swap(enable_pid_, other->enable_pid_);
  swap(enable_motor_, other->enable_motor_);
  swap(enable_stall_cur_, other->enable_stall_cur_);
  swap(enable_flag_, other->enable_flag_);
  swap(streaming_, other->streaming_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VFMotorCfg::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VFMotorCfgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VFMotorCfgs::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VFMotorCfgs::VFMotorCfgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.VFMotorCfgs)
}
VFMotorCfgs::VFMotorCfgs(const VFMotorCfgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.VFMotorCfgs)
}

void VFMotorCfgs::SharedCtor() {
}

VFMotorCfgs::~VFMotorCfgs() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.VFMotorCfgs)
  SharedDtor();
}

void VFMotorCfgs::SharedDtor() {
}

void VFMotorCfgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VFMotorCfgs::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VFMotorCfgs& VFMotorCfgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCfgs.base);
  return *internal_default_instance();
}


void VFMotorCfgs::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.VFMotorCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VFMotorCfgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.VFMotorCfgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.VFMotorCfg array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.VFMotorCfgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.VFMotorCfgs)
  return false;
#undef DO_
}

void VFMotorCfgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.VFMotorCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.VFMotorCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.VFMotorCfgs)
}

::google::protobuf::uint8* VFMotorCfgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.VFMotorCfgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.VFMotorCfg array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.VFMotorCfgs)
  return target;
}

size_t VFMotorCfgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.VFMotorCfgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.VFMotorCfg array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VFMotorCfgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.VFMotorCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  const VFMotorCfgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VFMotorCfgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.VFMotorCfgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.VFMotorCfgs)
    MergeFrom(*source);
  }
}

void VFMotorCfgs::MergeFrom(const VFMotorCfgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.VFMotorCfgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void VFMotorCfgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.VFMotorCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFMotorCfgs::CopyFrom(const VFMotorCfgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.VFMotorCfgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFMotorCfgs::IsInitialized() const {
  return true;
}

void VFMotorCfgs::Swap(VFMotorCfgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VFMotorCfgs::InternalSwap(VFMotorCfgs* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VFMotorCfgs::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VFMotorCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VFMotorCmd::kIdFieldNumber;
const int VFMotorCmd::kSetPointCntsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VFMotorCmd::VFMotorCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCmd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.VFMotorCmd)
}
VFMotorCmd::VFMotorCmd(const VFMotorCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_point_cnts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(set_point_cnts_));
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.VFMotorCmd)
}

void VFMotorCmd::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_point_cnts_) -
      reinterpret_cast<char*>(&id_)) + sizeof(set_point_cnts_));
}

VFMotorCmd::~VFMotorCmd() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.VFMotorCmd)
  SharedDtor();
}

void VFMotorCmd::SharedDtor() {
}

void VFMotorCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VFMotorCmd::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VFMotorCmd& VFMotorCmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCmd.base);
  return *internal_default_instance();
}


void VFMotorCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.VFMotorCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_point_cnts_) -
        reinterpret_cast<char*>(&id_)) + sizeof(set_point_cnts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VFMotorCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.VFMotorCmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 set_point_cnts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_set_point_cnts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &set_point_cnts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.VFMotorCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.VFMotorCmd)
  return false;
#undef DO_
}

void VFMotorCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.VFMotorCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 set_point_cnts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->set_point_cnts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.VFMotorCmd)
}

::google::protobuf::uint8* VFMotorCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.VFMotorCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 set_point_cnts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->set_point_cnts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.VFMotorCmd)
  return target;
}

size_t VFMotorCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.VFMotorCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 set_point_cnts = 2;
    if (has_set_point_cnts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->set_point_cnts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VFMotorCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.VFMotorCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const VFMotorCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VFMotorCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.VFMotorCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.VFMotorCmd)
    MergeFrom(*source);
  }
}

void VFMotorCmd::MergeFrom(const VFMotorCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.VFMotorCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      set_point_cnts_ = from.set_point_cnts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VFMotorCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.VFMotorCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFMotorCmd::CopyFrom(const VFMotorCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.VFMotorCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFMotorCmd::IsInitialized() const {
  return true;
}

void VFMotorCmd::Swap(VFMotorCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VFMotorCmd::InternalSwap(VFMotorCmd* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(set_point_cnts_, other->set_point_cnts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VFMotorCmd::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VFMotorCmds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VFMotorCmds::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VFMotorCmds::VFMotorCmds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCmds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frl.device.wireformat.VFMotorCmds)
}
VFMotorCmds::VFMotorCmds(const VFMotorCmds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      array_(from.array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frl.device.wireformat.VFMotorCmds)
}

void VFMotorCmds::SharedCtor() {
}

VFMotorCmds::~VFMotorCmds() {
  // @@protoc_insertion_point(destructor:frl.device.wireformat.VFMotorCmds)
  SharedDtor();
}

void VFMotorCmds::SharedDtor() {
}

void VFMotorCmds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VFMotorCmds::descriptor() {
  ::protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VFMotorCmds& VFMotorCmds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_p_5fwire_5fprotocol_2eproto::scc_info_VFMotorCmds.base);
  return *internal_default_instance();
}


void VFMotorCmds::Clear() {
// @@protoc_insertion_point(message_clear_start:frl.device.wireformat.VFMotorCmds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VFMotorCmds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frl.device.wireformat.VFMotorCmds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .frl.device.wireformat.VFMotorCmd array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frl.device.wireformat.VFMotorCmds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frl.device.wireformat.VFMotorCmds)
  return false;
#undef DO_
}

void VFMotorCmds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frl.device.wireformat.VFMotorCmds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.VFMotorCmd array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->array(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frl.device.wireformat.VFMotorCmds)
}

::google::protobuf::uint8* VFMotorCmds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frl.device.wireformat.VFMotorCmds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .frl.device.wireformat.VFMotorCmd array = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->array_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->array(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frl.device.wireformat.VFMotorCmds)
  return target;
}

size_t VFMotorCmds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frl.device.wireformat.VFMotorCmds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .frl.device.wireformat.VFMotorCmd array = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->array(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VFMotorCmds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frl.device.wireformat.VFMotorCmds)
  GOOGLE_DCHECK_NE(&from, this);
  const VFMotorCmds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VFMotorCmds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frl.device.wireformat.VFMotorCmds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frl.device.wireformat.VFMotorCmds)
    MergeFrom(*source);
  }
}

void VFMotorCmds::MergeFrom(const VFMotorCmds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frl.device.wireformat.VFMotorCmds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void VFMotorCmds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frl.device.wireformat.VFMotorCmds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFMotorCmds::CopyFrom(const VFMotorCmds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frl.device.wireformat.VFMotorCmds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFMotorCmds::IsInitialized() const {
  return true;
}

void VFMotorCmds::Swap(VFMotorCmds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VFMotorCmds::InternalSwap(VFMotorCmds* other) {
  using std::swap;
  CastToBase(&array_)->InternalSwap(CastToBase(&other->array_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VFMotorCmds::GetMetadata() const {
  protobuf_p_5fwire_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_p_5fwire_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wireformat
}  // namespace device
}  // namespace frl
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::ToHostMsg* Arena::CreateMaybeMessage< ::frl::device::wireformat::ToHostMsg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::ToHostMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::EventMsg* Arena::CreateMaybeMessage< ::frl::device::wireformat::EventMsg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::EventMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::TaiTime* Arena::CreateMaybeMessage< ::frl::device::wireformat::TaiTime >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::TaiTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Acc* Arena::CreateMaybeMessage< ::frl::device::wireformat::Acc >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Acc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Gyro* Arena::CreateMaybeMessage< ::frl::device::wireformat::Gyro >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Gyro >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Mag* Arena::CreateMaybeMessage< ::frl::device::wireformat::Mag >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Mag >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Baro* Arena::CreateMaybeMessage< ::frl::device::wireformat::Baro >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Baro >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Temp* Arena::CreateMaybeMessage< ::frl::device::wireformat::Temp >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Temp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Sync* Arena::CreateMaybeMessage< ::frl::device::wireformat::Sync >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Sync >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::FirstPixel* Arena::CreateMaybeMessage< ::frl::device::wireformat::FirstPixel >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::FirstPixel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Fan* Arena::CreateMaybeMessage< ::frl::device::wireformat::Fan >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Fan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Button* Arena::CreateMaybeMessage< ::frl::device::wireformat::Button >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Button >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Encoder* Arena::CreateMaybeMessage< ::frl::device::wireformat::Encoder >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Encoder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::VFMotor* Arena::CreateMaybeMessage< ::frl::device::wireformat::VFMotor >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::VFMotor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::Timer* Arena::CreateMaybeMessage< ::frl::device::wireformat::Timer >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::Timer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::MainBoard* Arena::CreateMaybeMessage< ::frl::device::wireformat::MainBoard >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::MainBoard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::DeviceInfo* Arena::CreateMaybeMessage< ::frl::device::wireformat::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::DeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::FwVersion* Arena::CreateMaybeMessage< ::frl::device::wireformat::FwVersion >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::FwVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::HwVersion* Arena::CreateMaybeMessage< ::frl::device::wireformat::HwVersion >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::HwVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::ProtocolVersion* Arena::CreateMaybeMessage< ::frl::device::wireformat::ProtocolVersion >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::ProtocolVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::MfgDate* Arena::CreateMaybeMessage< ::frl::device::wireformat::MfgDate >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::MfgDate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::DeviceSerial* Arena::CreateMaybeMessage< ::frl::device::wireformat::DeviceSerial >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::DeviceSerial >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::ToDeviceMsg* Arena::CreateMaybeMessage< ::frl::device::wireformat::ToDeviceMsg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::ToDeviceMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::ReplyMsg* Arena::CreateMaybeMessage< ::frl::device::wireformat::ReplyMsg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::ReplyMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::DispDriverCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::DispDriverCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::DispDriverCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::DispDriverCfgs* Arena::CreateMaybeMessage< ::frl::device::wireformat::DispDriverCfgs >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::DispDriverCfgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::GyroCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::GyroCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::GyroCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::GyroCfgs* Arena::CreateMaybeMessage< ::frl::device::wireformat::GyroCfgs >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::GyroCfgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::AccCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::AccCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::AccCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::AccCfgs* Arena::CreateMaybeMessage< ::frl::device::wireformat::AccCfgs >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::AccCfgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::BaroCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::BaroCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::BaroCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::BaroCfgs* Arena::CreateMaybeMessage< ::frl::device::wireformat::BaroCfgs >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::BaroCfgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::FanCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::FanCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::FanCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::FanCfgs* Arena::CreateMaybeMessage< ::frl::device::wireformat::FanCfgs >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::FanCfgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::TimerCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::TimerCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::TimerCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::TrigCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::TrigCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::TrigCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::TrigChCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::TrigChCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::TrigChCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::SyncCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::SyncCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::SyncCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::SyncChCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::SyncChCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::SyncChCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::VFMotorCfg* Arena::CreateMaybeMessage< ::frl::device::wireformat::VFMotorCfg >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::VFMotorCfg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::VFMotorCfgs* Arena::CreateMaybeMessage< ::frl::device::wireformat::VFMotorCfgs >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::VFMotorCfgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::VFMotorCmd* Arena::CreateMaybeMessage< ::frl::device::wireformat::VFMotorCmd >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::VFMotorCmd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frl::device::wireformat::VFMotorCmds* Arena::CreateMaybeMessage< ::frl::device::wireformat::VFMotorCmds >(Arena* arena) {
  return Arena::CreateInternal< ::frl::device::wireformat::VFMotorCmds >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
