// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p_wire_protocol.proto

#ifndef PROTOBUF_INCLUDED_p_5fwire_5fprotocol_2eproto
#define PROTOBUF_INCLUDED_p_5fwire_5fprotocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_p_5fwire_5fprotocol_2eproto 

namespace protobuf_p_5fwire_5fprotocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[43];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_p_5fwire_5fprotocol_2eproto
namespace frl {
namespace device {
namespace wireformat {
class Acc;
class AccDefaultTypeInternal;
extern AccDefaultTypeInternal _Acc_default_instance_;
class AccCfg;
class AccCfgDefaultTypeInternal;
extern AccCfgDefaultTypeInternal _AccCfg_default_instance_;
class AccCfgs;
class AccCfgsDefaultTypeInternal;
extern AccCfgsDefaultTypeInternal _AccCfgs_default_instance_;
class Baro;
class BaroDefaultTypeInternal;
extern BaroDefaultTypeInternal _Baro_default_instance_;
class BaroCfg;
class BaroCfgDefaultTypeInternal;
extern BaroCfgDefaultTypeInternal _BaroCfg_default_instance_;
class BaroCfgs;
class BaroCfgsDefaultTypeInternal;
extern BaroCfgsDefaultTypeInternal _BaroCfgs_default_instance_;
class Button;
class ButtonDefaultTypeInternal;
extern ButtonDefaultTypeInternal _Button_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceSerial;
class DeviceSerialDefaultTypeInternal;
extern DeviceSerialDefaultTypeInternal _DeviceSerial_default_instance_;
class DispDriverCfg;
class DispDriverCfgDefaultTypeInternal;
extern DispDriverCfgDefaultTypeInternal _DispDriverCfg_default_instance_;
class DispDriverCfgs;
class DispDriverCfgsDefaultTypeInternal;
extern DispDriverCfgsDefaultTypeInternal _DispDriverCfgs_default_instance_;
class Encoder;
class EncoderDefaultTypeInternal;
extern EncoderDefaultTypeInternal _Encoder_default_instance_;
class EventMsg;
class EventMsgDefaultTypeInternal;
extern EventMsgDefaultTypeInternal _EventMsg_default_instance_;
class Fan;
class FanDefaultTypeInternal;
extern FanDefaultTypeInternal _Fan_default_instance_;
class FanCfg;
class FanCfgDefaultTypeInternal;
extern FanCfgDefaultTypeInternal _FanCfg_default_instance_;
class FanCfgs;
class FanCfgsDefaultTypeInternal;
extern FanCfgsDefaultTypeInternal _FanCfgs_default_instance_;
class FirstPixel;
class FirstPixelDefaultTypeInternal;
extern FirstPixelDefaultTypeInternal _FirstPixel_default_instance_;
class FwVersion;
class FwVersionDefaultTypeInternal;
extern FwVersionDefaultTypeInternal _FwVersion_default_instance_;
class Gyro;
class GyroDefaultTypeInternal;
extern GyroDefaultTypeInternal _Gyro_default_instance_;
class GyroCfg;
class GyroCfgDefaultTypeInternal;
extern GyroCfgDefaultTypeInternal _GyroCfg_default_instance_;
class GyroCfgs;
class GyroCfgsDefaultTypeInternal;
extern GyroCfgsDefaultTypeInternal _GyroCfgs_default_instance_;
class HwVersion;
class HwVersionDefaultTypeInternal;
extern HwVersionDefaultTypeInternal _HwVersion_default_instance_;
class Mag;
class MagDefaultTypeInternal;
extern MagDefaultTypeInternal _Mag_default_instance_;
class MainBoard;
class MainBoardDefaultTypeInternal;
extern MainBoardDefaultTypeInternal _MainBoard_default_instance_;
class MfgDate;
class MfgDateDefaultTypeInternal;
extern MfgDateDefaultTypeInternal _MfgDate_default_instance_;
class ProtocolVersion;
class ProtocolVersionDefaultTypeInternal;
extern ProtocolVersionDefaultTypeInternal _ProtocolVersion_default_instance_;
class ReplyMsg;
class ReplyMsgDefaultTypeInternal;
extern ReplyMsgDefaultTypeInternal _ReplyMsg_default_instance_;
class Sync;
class SyncDefaultTypeInternal;
extern SyncDefaultTypeInternal _Sync_default_instance_;
class SyncCfg;
class SyncCfgDefaultTypeInternal;
extern SyncCfgDefaultTypeInternal _SyncCfg_default_instance_;
class SyncChCfg;
class SyncChCfgDefaultTypeInternal;
extern SyncChCfgDefaultTypeInternal _SyncChCfg_default_instance_;
class TaiTime;
class TaiTimeDefaultTypeInternal;
extern TaiTimeDefaultTypeInternal _TaiTime_default_instance_;
class Temp;
class TempDefaultTypeInternal;
extern TempDefaultTypeInternal _Temp_default_instance_;
class Timer;
class TimerDefaultTypeInternal;
extern TimerDefaultTypeInternal _Timer_default_instance_;
class TimerCfg;
class TimerCfgDefaultTypeInternal;
extern TimerCfgDefaultTypeInternal _TimerCfg_default_instance_;
class ToDeviceMsg;
class ToDeviceMsgDefaultTypeInternal;
extern ToDeviceMsgDefaultTypeInternal _ToDeviceMsg_default_instance_;
class ToHostMsg;
class ToHostMsgDefaultTypeInternal;
extern ToHostMsgDefaultTypeInternal _ToHostMsg_default_instance_;
class TrigCfg;
class TrigCfgDefaultTypeInternal;
extern TrigCfgDefaultTypeInternal _TrigCfg_default_instance_;
class TrigChCfg;
class TrigChCfgDefaultTypeInternal;
extern TrigChCfgDefaultTypeInternal _TrigChCfg_default_instance_;
class VFMotor;
class VFMotorDefaultTypeInternal;
extern VFMotorDefaultTypeInternal _VFMotor_default_instance_;
class VFMotorCfg;
class VFMotorCfgDefaultTypeInternal;
extern VFMotorCfgDefaultTypeInternal _VFMotorCfg_default_instance_;
class VFMotorCfgs;
class VFMotorCfgsDefaultTypeInternal;
extern VFMotorCfgsDefaultTypeInternal _VFMotorCfgs_default_instance_;
class VFMotorCmd;
class VFMotorCmdDefaultTypeInternal;
extern VFMotorCmdDefaultTypeInternal _VFMotorCmd_default_instance_;
class VFMotorCmds;
class VFMotorCmdsDefaultTypeInternal;
extern VFMotorCmdsDefaultTypeInternal _VFMotorCmds_default_instance_;
}  // namespace wireformat
}  // namespace device
}  // namespace frl
namespace google {
namespace protobuf {
template<> ::frl::device::wireformat::Acc* Arena::CreateMaybeMessage<::frl::device::wireformat::Acc>(Arena*);
template<> ::frl::device::wireformat::AccCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::AccCfg>(Arena*);
template<> ::frl::device::wireformat::AccCfgs* Arena::CreateMaybeMessage<::frl::device::wireformat::AccCfgs>(Arena*);
template<> ::frl::device::wireformat::Baro* Arena::CreateMaybeMessage<::frl::device::wireformat::Baro>(Arena*);
template<> ::frl::device::wireformat::BaroCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::BaroCfg>(Arena*);
template<> ::frl::device::wireformat::BaroCfgs* Arena::CreateMaybeMessage<::frl::device::wireformat::BaroCfgs>(Arena*);
template<> ::frl::device::wireformat::Button* Arena::CreateMaybeMessage<::frl::device::wireformat::Button>(Arena*);
template<> ::frl::device::wireformat::DeviceInfo* Arena::CreateMaybeMessage<::frl::device::wireformat::DeviceInfo>(Arena*);
template<> ::frl::device::wireformat::DeviceSerial* Arena::CreateMaybeMessage<::frl::device::wireformat::DeviceSerial>(Arena*);
template<> ::frl::device::wireformat::DispDriverCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::DispDriverCfg>(Arena*);
template<> ::frl::device::wireformat::DispDriverCfgs* Arena::CreateMaybeMessage<::frl::device::wireformat::DispDriverCfgs>(Arena*);
template<> ::frl::device::wireformat::Encoder* Arena::CreateMaybeMessage<::frl::device::wireformat::Encoder>(Arena*);
template<> ::frl::device::wireformat::EventMsg* Arena::CreateMaybeMessage<::frl::device::wireformat::EventMsg>(Arena*);
template<> ::frl::device::wireformat::Fan* Arena::CreateMaybeMessage<::frl::device::wireformat::Fan>(Arena*);
template<> ::frl::device::wireformat::FanCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::FanCfg>(Arena*);
template<> ::frl::device::wireformat::FanCfgs* Arena::CreateMaybeMessage<::frl::device::wireformat::FanCfgs>(Arena*);
template<> ::frl::device::wireformat::FirstPixel* Arena::CreateMaybeMessage<::frl::device::wireformat::FirstPixel>(Arena*);
template<> ::frl::device::wireformat::FwVersion* Arena::CreateMaybeMessage<::frl::device::wireformat::FwVersion>(Arena*);
template<> ::frl::device::wireformat::Gyro* Arena::CreateMaybeMessage<::frl::device::wireformat::Gyro>(Arena*);
template<> ::frl::device::wireformat::GyroCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::GyroCfg>(Arena*);
template<> ::frl::device::wireformat::GyroCfgs* Arena::CreateMaybeMessage<::frl::device::wireformat::GyroCfgs>(Arena*);
template<> ::frl::device::wireformat::HwVersion* Arena::CreateMaybeMessage<::frl::device::wireformat::HwVersion>(Arena*);
template<> ::frl::device::wireformat::Mag* Arena::CreateMaybeMessage<::frl::device::wireformat::Mag>(Arena*);
template<> ::frl::device::wireformat::MainBoard* Arena::CreateMaybeMessage<::frl::device::wireformat::MainBoard>(Arena*);
template<> ::frl::device::wireformat::MfgDate* Arena::CreateMaybeMessage<::frl::device::wireformat::MfgDate>(Arena*);
template<> ::frl::device::wireformat::ProtocolVersion* Arena::CreateMaybeMessage<::frl::device::wireformat::ProtocolVersion>(Arena*);
template<> ::frl::device::wireformat::ReplyMsg* Arena::CreateMaybeMessage<::frl::device::wireformat::ReplyMsg>(Arena*);
template<> ::frl::device::wireformat::Sync* Arena::CreateMaybeMessage<::frl::device::wireformat::Sync>(Arena*);
template<> ::frl::device::wireformat::SyncCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::SyncCfg>(Arena*);
template<> ::frl::device::wireformat::SyncChCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::SyncChCfg>(Arena*);
template<> ::frl::device::wireformat::TaiTime* Arena::CreateMaybeMessage<::frl::device::wireformat::TaiTime>(Arena*);
template<> ::frl::device::wireformat::Temp* Arena::CreateMaybeMessage<::frl::device::wireformat::Temp>(Arena*);
template<> ::frl::device::wireformat::Timer* Arena::CreateMaybeMessage<::frl::device::wireformat::Timer>(Arena*);
template<> ::frl::device::wireformat::TimerCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::TimerCfg>(Arena*);
template<> ::frl::device::wireformat::ToDeviceMsg* Arena::CreateMaybeMessage<::frl::device::wireformat::ToDeviceMsg>(Arena*);
template<> ::frl::device::wireformat::ToHostMsg* Arena::CreateMaybeMessage<::frl::device::wireformat::ToHostMsg>(Arena*);
template<> ::frl::device::wireformat::TrigCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::TrigCfg>(Arena*);
template<> ::frl::device::wireformat::TrigChCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::TrigChCfg>(Arena*);
template<> ::frl::device::wireformat::VFMotor* Arena::CreateMaybeMessage<::frl::device::wireformat::VFMotor>(Arena*);
template<> ::frl::device::wireformat::VFMotorCfg* Arena::CreateMaybeMessage<::frl::device::wireformat::VFMotorCfg>(Arena*);
template<> ::frl::device::wireformat::VFMotorCfgs* Arena::CreateMaybeMessage<::frl::device::wireformat::VFMotorCfgs>(Arena*);
template<> ::frl::device::wireformat::VFMotorCmd* Arena::CreateMaybeMessage<::frl::device::wireformat::VFMotorCmd>(Arena*);
template<> ::frl::device::wireformat::VFMotorCmds* Arena::CreateMaybeMessage<::frl::device::wireformat::VFMotorCmds>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace frl {
namespace device {
namespace wireformat {

enum Sync_DIR {
  Sync_DIR_UNKNOWN = 0,
  Sync_DIR_RAISING = 1,
  Sync_DIR_FALLING = 2
};
bool Sync_DIR_IsValid(int value);
const Sync_DIR Sync_DIR_DIR_MIN = Sync_DIR_UNKNOWN;
const Sync_DIR Sync_DIR_DIR_MAX = Sync_DIR_FALLING;
const int Sync_DIR_DIR_ARRAYSIZE = Sync_DIR_DIR_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sync_DIR_descriptor();
inline const ::std::string& Sync_DIR_Name(Sync_DIR value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sync_DIR_descriptor(), value);
}
inline bool Sync_DIR_Parse(
    const ::std::string& name, Sync_DIR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sync_DIR>(
    Sync_DIR_descriptor(), name, value);
}
enum FirstPixel_LR {
  FirstPixel_LR_UNKNOWN = 0,
  FirstPixel_LR_LEFT = 1,
  FirstPixel_LR_RIGHT = 2
};
bool FirstPixel_LR_IsValid(int value);
const FirstPixel_LR FirstPixel_LR_LR_MIN = FirstPixel_LR_UNKNOWN;
const FirstPixel_LR FirstPixel_LR_LR_MAX = FirstPixel_LR_RIGHT;
const int FirstPixel_LR_LR_ARRAYSIZE = FirstPixel_LR_LR_MAX + 1;

const ::google::protobuf::EnumDescriptor* FirstPixel_LR_descriptor();
inline const ::std::string& FirstPixel_LR_Name(FirstPixel_LR value) {
  return ::google::protobuf::internal::NameOfEnum(
    FirstPixel_LR_descriptor(), value);
}
inline bool FirstPixel_LR_Parse(
    const ::std::string& name, FirstPixel_LR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FirstPixel_LR>(
    FirstPixel_LR_descriptor(), name, value);
}
enum VFMotor_LR {
  VFMotor_LR_UNKNOWN = 0,
  VFMotor_LR_LEFT = 1,
  VFMotor_LR_RIGHT = 2
};
bool VFMotor_LR_IsValid(int value);
const VFMotor_LR VFMotor_LR_LR_MIN = VFMotor_LR_UNKNOWN;
const VFMotor_LR VFMotor_LR_LR_MAX = VFMotor_LR_RIGHT;
const int VFMotor_LR_LR_ARRAYSIZE = VFMotor_LR_LR_MAX + 1;

const ::google::protobuf::EnumDescriptor* VFMotor_LR_descriptor();
inline const ::std::string& VFMotor_LR_Name(VFMotor_LR value) {
  return ::google::protobuf::internal::NameOfEnum(
    VFMotor_LR_descriptor(), value);
}
inline bool VFMotor_LR_Parse(
    const ::std::string& name, VFMotor_LR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VFMotor_LR>(
    VFMotor_LR_descriptor(), name, value);
}
enum VFMotor_Event {
  VFMotor_Event_NONE = 0,
  VFMotor_Event_HOMING_COMPLETE = 1
};
bool VFMotor_Event_IsValid(int value);
const VFMotor_Event VFMotor_Event_Event_MIN = VFMotor_Event_NONE;
const VFMotor_Event VFMotor_Event_Event_MAX = VFMotor_Event_HOMING_COMPLETE;
const int VFMotor_Event_Event_ARRAYSIZE = VFMotor_Event_Event_MAX + 1;

const ::google::protobuf::EnumDescriptor* VFMotor_Event_descriptor();
inline const ::std::string& VFMotor_Event_Name(VFMotor_Event value) {
  return ::google::protobuf::internal::NameOfEnum(
    VFMotor_Event_descriptor(), value);
}
inline bool VFMotor_Event_Parse(
    const ::std::string& name, VFMotor_Event* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VFMotor_Event>(
    VFMotor_Event_descriptor(), name, value);
}
enum Timer_Source {
  Timer_Source_UNKNOWN = 0,
  Timer_Source_INTERNAL = 1,
  Timer_Source_EXTRNAL = 2
};
bool Timer_Source_IsValid(int value);
const Timer_Source Timer_Source_Source_MIN = Timer_Source_UNKNOWN;
const Timer_Source Timer_Source_Source_MAX = Timer_Source_EXTRNAL;
const int Timer_Source_Source_ARRAYSIZE = Timer_Source_Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* Timer_Source_descriptor();
inline const ::std::string& Timer_Source_Name(Timer_Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    Timer_Source_descriptor(), value);
}
inline bool Timer_Source_Parse(
    const ::std::string& name, Timer_Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Timer_Source>(
    Timer_Source_descriptor(), name, value);
}
enum Timer_Status {
  Timer_Status_UNDEFINED = 0,
  Timer_Status_ADJUSTING = 1,
  Timer_Status_TRACKING = 2
};
bool Timer_Status_IsValid(int value);
const Timer_Status Timer_Status_Status_MIN = Timer_Status_UNDEFINED;
const Timer_Status Timer_Status_Status_MAX = Timer_Status_TRACKING;
const int Timer_Status_Status_ARRAYSIZE = Timer_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Timer_Status_descriptor();
inline const ::std::string& Timer_Status_Name(Timer_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Timer_Status_descriptor(), value);
}
inline bool Timer_Status_Parse(
    const ::std::string& name, Timer_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Timer_Status>(
    Timer_Status_descriptor(), name, value);
}
enum MainBoard_Status {
  MainBoard_Status_UNKNOWN = 0,
  MainBoard_Status_BOOTING = 1,
  MainBoard_Status_OK = 2,
  MainBoard_Status_TERMINATING = 3
};
bool MainBoard_Status_IsValid(int value);
const MainBoard_Status MainBoard_Status_Status_MIN = MainBoard_Status_UNKNOWN;
const MainBoard_Status MainBoard_Status_Status_MAX = MainBoard_Status_TERMINATING;
const int MainBoard_Status_Status_ARRAYSIZE = MainBoard_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* MainBoard_Status_descriptor();
inline const ::std::string& MainBoard_Status_Name(MainBoard_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    MainBoard_Status_descriptor(), value);
}
inline bool MainBoard_Status_Parse(
    const ::std::string& name, MainBoard_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MainBoard_Status>(
    MainBoard_Status_descriptor(), name, value);
}
enum DispDriverCfg_DispDriverMode {
  DispDriverCfg_DispDriverMode_GLOBAL = 0,
  DispDriverCfg_DispDriverMode_ROLLING = 1
};
bool DispDriverCfg_DispDriverMode_IsValid(int value);
const DispDriverCfg_DispDriverMode DispDriverCfg_DispDriverMode_DispDriverMode_MIN = DispDriverCfg_DispDriverMode_GLOBAL;
const DispDriverCfg_DispDriverMode DispDriverCfg_DispDriverMode_DispDriverMode_MAX = DispDriverCfg_DispDriverMode_ROLLING;
const int DispDriverCfg_DispDriverMode_DispDriverMode_ARRAYSIZE = DispDriverCfg_DispDriverMode_DispDriverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DispDriverCfg_DispDriverMode_descriptor();
inline const ::std::string& DispDriverCfg_DispDriverMode_Name(DispDriverCfg_DispDriverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DispDriverCfg_DispDriverMode_descriptor(), value);
}
inline bool DispDriverCfg_DispDriverMode_Parse(
    const ::std::string& name, DispDriverCfg_DispDriverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DispDriverCfg_DispDriverMode>(
    DispDriverCfg_DispDriverMode_descriptor(), name, value);
}
enum TimerCfg_Source {
  TimerCfg_Source_UNKNOWN = 0,
  TimerCfg_Source_INTERNAL = 1,
  TimerCfg_Source_EXTERNAL = 2
};
bool TimerCfg_Source_IsValid(int value);
const TimerCfg_Source TimerCfg_Source_Source_MIN = TimerCfg_Source_UNKNOWN;
const TimerCfg_Source TimerCfg_Source_Source_MAX = TimerCfg_Source_EXTERNAL;
const int TimerCfg_Source_Source_ARRAYSIZE = TimerCfg_Source_Source_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimerCfg_Source_descriptor();
inline const ::std::string& TimerCfg_Source_Name(TimerCfg_Source value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimerCfg_Source_descriptor(), value);
}
inline bool TimerCfg_Source_Parse(
    const ::std::string& name, TimerCfg_Source* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimerCfg_Source>(
    TimerCfg_Source_descriptor(), name, value);
}
enum TrigCfg_Action {
  TrigCfg_Action_START_ALL_ACTIVE = 0,
  TrigCfg_Action_STOP_ALL_ACTIVE = 1
};
bool TrigCfg_Action_IsValid(int value);
const TrigCfg_Action TrigCfg_Action_Action_MIN = TrigCfg_Action_START_ALL_ACTIVE;
const TrigCfg_Action TrigCfg_Action_Action_MAX = TrigCfg_Action_STOP_ALL_ACTIVE;
const int TrigCfg_Action_Action_ARRAYSIZE = TrigCfg_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrigCfg_Action_descriptor();
inline const ::std::string& TrigCfg_Action_Name(TrigCfg_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrigCfg_Action_descriptor(), value);
}
inline bool TrigCfg_Action_Parse(
    const ::std::string& name, TrigCfg_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrigCfg_Action>(
    TrigCfg_Action_descriptor(), name, value);
}
enum SyncCfg_Action {
  SyncCfg_Action_START_ALL_ACTIVE = 0,
  SyncCfg_Action_STOP_ALL_ACTIVE = 1
};
bool SyncCfg_Action_IsValid(int value);
const SyncCfg_Action SyncCfg_Action_Action_MIN = SyncCfg_Action_START_ALL_ACTIVE;
const SyncCfg_Action SyncCfg_Action_Action_MAX = SyncCfg_Action_STOP_ALL_ACTIVE;
const int SyncCfg_Action_Action_ARRAYSIZE = SyncCfg_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncCfg_Action_descriptor();
inline const ::std::string& SyncCfg_Action_Name(SyncCfg_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncCfg_Action_descriptor(), value);
}
inline bool SyncCfg_Action_Parse(
    const ::std::string& name, SyncCfg_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncCfg_Action>(
    SyncCfg_Action_descriptor(), name, value);
}
enum SyncChCfg_DIR {
  SyncChCfg_DIR_NOTACTIVE = 0,
  SyncChCfg_DIR_RAISING = 1,
  SyncChCfg_DIR_FALLING = 2,
  SyncChCfg_DIR_BOTH = 3
};
bool SyncChCfg_DIR_IsValid(int value);
const SyncChCfg_DIR SyncChCfg_DIR_DIR_MIN = SyncChCfg_DIR_NOTACTIVE;
const SyncChCfg_DIR SyncChCfg_DIR_DIR_MAX = SyncChCfg_DIR_BOTH;
const int SyncChCfg_DIR_DIR_ARRAYSIZE = SyncChCfg_DIR_DIR_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncChCfg_DIR_descriptor();
inline const ::std::string& SyncChCfg_DIR_Name(SyncChCfg_DIR value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncChCfg_DIR_descriptor(), value);
}
inline bool SyncChCfg_DIR_Parse(
    const ::std::string& name, SyncChCfg_DIR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncChCfg_DIR>(
    SyncChCfg_DIR_descriptor(), name, value);
}
// ===================================================================

class ToHostMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.ToHostMsg) */ {
 public:
  ToHostMsg();
  virtual ~ToHostMsg();

  ToHostMsg(const ToHostMsg& from);

  inline ToHostMsg& operator=(const ToHostMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToHostMsg(ToHostMsg&& from) noexcept
    : ToHostMsg() {
    *this = ::std::move(from);
  }

  inline ToHostMsg& operator=(ToHostMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToHostMsg& default_instance();

  enum PayloadCase {
    kTel = 1,
    kReply = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToHostMsg* internal_default_instance() {
    return reinterpret_cast<const ToHostMsg*>(
               &_ToHostMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ToHostMsg* other);
  friend void swap(ToHostMsg& a, ToHostMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToHostMsg* New() const final {
    return CreateMaybeMessage<ToHostMsg>(NULL);
  }

  ToHostMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToHostMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToHostMsg& from);
  void MergeFrom(const ToHostMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToHostMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .frl.device.wireformat.EventMsg tel = 1;
  bool has_tel() const;
  void clear_tel();
  static const int kTelFieldNumber = 1;
  private:
  const ::frl::device::wireformat::EventMsg& _internal_tel() const;
  public:
  const ::frl::device::wireformat::EventMsg& tel() const;
  ::frl::device::wireformat::EventMsg* release_tel();
  ::frl::device::wireformat::EventMsg* mutable_tel();
  void set_allocated_tel(::frl::device::wireformat::EventMsg* tel);

  // optional .frl.device.wireformat.ReplyMsg reply = 2;
  bool has_reply() const;
  void clear_reply();
  static const int kReplyFieldNumber = 2;
  private:
  const ::frl::device::wireformat::ReplyMsg& _internal_reply() const;
  public:
  const ::frl::device::wireformat::ReplyMsg& reply() const;
  ::frl::device::wireformat::ReplyMsg* release_reply();
  ::frl::device::wireformat::ReplyMsg* mutable_reply();
  void set_allocated_reply(::frl::device::wireformat::ReplyMsg* reply);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:frl.device.wireformat.ToHostMsg)
 private:
  void set_has_tel();
  void set_has_reply();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union PayloadUnion {
    PayloadUnion() {}
    ::frl::device::wireformat::EventMsg* tel_;
    ::frl::device::wireformat::ReplyMsg* reply_;
  } payload_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.EventMsg) */ {
 public:
  EventMsg();
  virtual ~EventMsg();

  EventMsg(const EventMsg& from);

  inline EventMsg& operator=(const EventMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventMsg(EventMsg&& from) noexcept
    : EventMsg() {
    *this = ::std::move(from);
  }

  inline EventMsg& operator=(EventMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMsg* internal_default_instance() {
    return reinterpret_cast<const EventMsg*>(
               &_EventMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EventMsg* other);
  friend void swap(EventMsg& a, EventMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventMsg* New() const final {
    return CreateMaybeMessage<EventMsg>(NULL);
  }

  EventMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventMsg& from);
  void MergeFrom(const EventMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.Acc accs = 2;
  int accs_size() const;
  void clear_accs();
  static const int kAccsFieldNumber = 2;
  ::frl::device::wireformat::Acc* mutable_accs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Acc >*
      mutable_accs();
  const ::frl::device::wireformat::Acc& accs(int index) const;
  ::frl::device::wireformat::Acc* add_accs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Acc >&
      accs() const;

  // repeated .frl.device.wireformat.Gyro gyros = 3;
  int gyros_size() const;
  void clear_gyros();
  static const int kGyrosFieldNumber = 3;
  ::frl::device::wireformat::Gyro* mutable_gyros(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Gyro >*
      mutable_gyros();
  const ::frl::device::wireformat::Gyro& gyros(int index) const;
  ::frl::device::wireformat::Gyro* add_gyros();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Gyro >&
      gyros() const;

  // repeated .frl.device.wireformat.Mag mags = 4;
  int mags_size() const;
  void clear_mags();
  static const int kMagsFieldNumber = 4;
  ::frl::device::wireformat::Mag* mutable_mags(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Mag >*
      mutable_mags();
  const ::frl::device::wireformat::Mag& mags(int index) const;
  ::frl::device::wireformat::Mag* add_mags();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Mag >&
      mags() const;

  // repeated .frl.device.wireformat.Temp temps = 5;
  int temps_size() const;
  void clear_temps();
  static const int kTempsFieldNumber = 5;
  ::frl::device::wireformat::Temp* mutable_temps(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Temp >*
      mutable_temps();
  const ::frl::device::wireformat::Temp& temps(int index) const;
  ::frl::device::wireformat::Temp* add_temps();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Temp >&
      temps() const;

  // repeated .frl.device.wireformat.Baro baros = 6;
  int baros_size() const;
  void clear_baros();
  static const int kBarosFieldNumber = 6;
  ::frl::device::wireformat::Baro* mutable_baros(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Baro >*
      mutable_baros();
  const ::frl::device::wireformat::Baro& baros(int index) const;
  ::frl::device::wireformat::Baro* add_baros();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Baro >&
      baros() const;

  // repeated .frl.device.wireformat.Sync syncs = 7;
  int syncs_size() const;
  void clear_syncs();
  static const int kSyncsFieldNumber = 7;
  ::frl::device::wireformat::Sync* mutable_syncs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Sync >*
      mutable_syncs();
  const ::frl::device::wireformat::Sync& syncs(int index) const;
  ::frl::device::wireformat::Sync* add_syncs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Sync >&
      syncs() const;

  // repeated .frl.device.wireformat.FirstPixel fps = 8;
  int fps_size() const;
  void clear_fps();
  static const int kFpsFieldNumber = 8;
  ::frl::device::wireformat::FirstPixel* mutable_fps(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FirstPixel >*
      mutable_fps();
  const ::frl::device::wireformat::FirstPixel& fps(int index) const;
  ::frl::device::wireformat::FirstPixel* add_fps();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FirstPixel >&
      fps() const;

  // repeated .frl.device.wireformat.Fan fans = 9;
  int fans_size() const;
  void clear_fans();
  static const int kFansFieldNumber = 9;
  ::frl::device::wireformat::Fan* mutable_fans(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Fan >*
      mutable_fans();
  const ::frl::device::wireformat::Fan& fans(int index) const;
  ::frl::device::wireformat::Fan* add_fans();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Fan >&
      fans() const;

  // repeated .frl.device.wireformat.Button buttons = 10;
  int buttons_size() const;
  void clear_buttons();
  static const int kButtonsFieldNumber = 10;
  ::frl::device::wireformat::Button* mutable_buttons(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Button >*
      mutable_buttons();
  const ::frl::device::wireformat::Button& buttons(int index) const;
  ::frl::device::wireformat::Button* add_buttons();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Button >&
      buttons() const;

  // repeated .frl.device.wireformat.Encoder encoders = 11;
  int encoders_size() const;
  void clear_encoders();
  static const int kEncodersFieldNumber = 11;
  ::frl::device::wireformat::Encoder* mutable_encoders(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Encoder >*
      mutable_encoders();
  const ::frl::device::wireformat::Encoder& encoders(int index) const;
  ::frl::device::wireformat::Encoder* add_encoders();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Encoder >&
      encoders() const;

  // repeated .frl.device.wireformat.VFMotor vfs = 12;
  int vfs_size() const;
  void clear_vfs();
  static const int kVfsFieldNumber = 12;
  ::frl::device::wireformat::VFMotor* mutable_vfs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >*
      mutable_vfs();
  const ::frl::device::wireformat::VFMotor& vfs(int index) const;
  ::frl::device::wireformat::VFMotor* add_vfs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >&
      vfs() const;

  // repeated .frl.device.wireformat.MainBoard mbs = 13;
  int mbs_size() const;
  void clear_mbs();
  static const int kMbsFieldNumber = 13;
  ::frl::device::wireformat::MainBoard* mutable_mbs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::MainBoard >*
      mutable_mbs();
  const ::frl::device::wireformat::MainBoard& mbs(int index) const;
  ::frl::device::wireformat::MainBoard* add_mbs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::MainBoard >&
      mbs() const;

  // repeated .frl.device.wireformat.Timer timer = 14;
  int timer_size() const;
  void clear_timer();
  static const int kTimerFieldNumber = 14;
  ::frl::device::wireformat::Timer* mutable_timer(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Timer >*
      mutable_timer();
  const ::frl::device::wireformat::Timer& timer(int index) const;
  ::frl::device::wireformat::Timer* add_timer();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Timer >&
      timer() const;

  // optional .frl.device.wireformat.TaiTime ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  private:
  const ::frl::device::wireformat::TaiTime& _internal_ts() const;
  public:
  const ::frl::device::wireformat::TaiTime& ts() const;
  ::frl::device::wireformat::TaiTime* release_ts();
  ::frl::device::wireformat::TaiTime* mutable_ts();
  void set_allocated_ts(::frl::device::wireformat::TaiTime* ts);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.EventMsg)
 private:
  void set_has_ts();
  void clear_has_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Acc > accs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Gyro > gyros_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Mag > mags_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Temp > temps_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Baro > baros_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Sync > syncs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FirstPixel > fps_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Fan > fans_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Button > buttons_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Encoder > encoders_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor > vfs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::MainBoard > mbs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Timer > timer_;
  ::frl::device::wireformat::TaiTime* ts_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaiTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.TaiTime) */ {
 public:
  TaiTime();
  virtual ~TaiTime();

  TaiTime(const TaiTime& from);

  inline TaiTime& operator=(const TaiTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaiTime(TaiTime&& from) noexcept
    : TaiTime() {
    *this = ::std::move(from);
  }

  inline TaiTime& operator=(TaiTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaiTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaiTime* internal_default_instance() {
    return reinterpret_cast<const TaiTime*>(
               &_TaiTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaiTime* other);
  friend void swap(TaiTime& a, TaiTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaiTime* New() const final {
    return CreateMaybeMessage<TaiTime>(NULL);
  }

  TaiTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaiTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaiTime& from);
  void MergeFrom(const TaiTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaiTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  ::google::protobuf::uint64 s() const;
  void set_s(::google::protobuf::uint64 value);

  // optional uint32 ns = 2;
  bool has_ns() const;
  void clear_ns();
  static const int kNsFieldNumber = 2;
  ::google::protobuf::uint32 ns() const;
  void set_ns(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.TaiTime)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_ns();
  void clear_has_ns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 s_;
  ::google::protobuf::uint32 ns_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Acc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Acc) */ {
 public:
  Acc();
  virtual ~Acc();

  Acc(const Acc& from);

  inline Acc& operator=(const Acc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Acc(Acc&& from) noexcept
    : Acc() {
    *this = ::std::move(from);
  }

  inline Acc& operator=(Acc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Acc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acc* internal_default_instance() {
    return reinterpret_cast<const Acc*>(
               &_Acc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Acc* other);
  friend void swap(Acc& a, Acc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Acc* New() const final {
    return CreateMaybeMessage<Acc>(NULL);
  }

  Acc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Acc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Acc& from);
  void MergeFrom(const Acc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 6;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 6;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw_x = 2;
  bool has_raw_x() const;
  void clear_raw_x();
  static const int kRawXFieldNumber = 2;
  ::google::protobuf::uint32 raw_x() const;
  void set_raw_x(::google::protobuf::uint32 value);

  // optional uint32 raw_y = 3;
  bool has_raw_y() const;
  void clear_raw_y();
  static const int kRawYFieldNumber = 3;
  ::google::protobuf::uint32 raw_y() const;
  void set_raw_y(::google::protobuf::uint32 value);

  // optional uint32 raw_z = 4;
  bool has_raw_z() const;
  void clear_raw_z();
  static const int kRawZFieldNumber = 4;
  ::google::protobuf::uint32 raw_z() const;
  void set_raw_z(::google::protobuf::uint32 value);

  // optional uint32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Acc)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw_x();
  void clear_has_raw_x();
  void set_has_raw_y();
  void clear_has_raw_y();
  void set_has_raw_z();
  void clear_has_raw_z();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_x_;
  ::google::protobuf::uint32 raw_y_;
  ::google::protobuf::uint32 raw_z_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gyro : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Gyro) */ {
 public:
  Gyro();
  virtual ~Gyro();

  Gyro(const Gyro& from);

  inline Gyro& operator=(const Gyro& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gyro(Gyro&& from) noexcept
    : Gyro() {
    *this = ::std::move(from);
  }

  inline Gyro& operator=(Gyro&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gyro& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gyro* internal_default_instance() {
    return reinterpret_cast<const Gyro*>(
               &_Gyro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Gyro* other);
  friend void swap(Gyro& a, Gyro& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gyro* New() const final {
    return CreateMaybeMessage<Gyro>(NULL);
  }

  Gyro* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gyro>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gyro& from);
  void MergeFrom(const Gyro& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gyro* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 6;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 6;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw_x = 2;
  bool has_raw_x() const;
  void clear_raw_x();
  static const int kRawXFieldNumber = 2;
  ::google::protobuf::uint32 raw_x() const;
  void set_raw_x(::google::protobuf::uint32 value);

  // optional uint32 raw_y = 3;
  bool has_raw_y() const;
  void clear_raw_y();
  static const int kRawYFieldNumber = 3;
  ::google::protobuf::uint32 raw_y() const;
  void set_raw_y(::google::protobuf::uint32 value);

  // optional uint32 raw_z = 4;
  bool has_raw_z() const;
  void clear_raw_z();
  static const int kRawZFieldNumber = 4;
  ::google::protobuf::uint32 raw_z() const;
  void set_raw_z(::google::protobuf::uint32 value);

  // optional uint32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Gyro)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw_x();
  void clear_has_raw_x();
  void set_has_raw_y();
  void clear_has_raw_y();
  void set_has_raw_z();
  void clear_has_raw_z();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_x_;
  ::google::protobuf::uint32 raw_y_;
  ::google::protobuf::uint32 raw_z_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Mag) */ {
 public:
  Mag();
  virtual ~Mag();

  Mag(const Mag& from);

  inline Mag& operator=(const Mag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mag(Mag&& from) noexcept
    : Mag() {
    *this = ::std::move(from);
  }

  inline Mag& operator=(Mag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mag* internal_default_instance() {
    return reinterpret_cast<const Mag*>(
               &_Mag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Mag* other);
  friend void swap(Mag& a, Mag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mag* New() const final {
    return CreateMaybeMessage<Mag>(NULL);
  }

  Mag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mag& from);
  void MergeFrom(const Mag& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 6;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 6;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw_x = 2;
  bool has_raw_x() const;
  void clear_raw_x();
  static const int kRawXFieldNumber = 2;
  ::google::protobuf::uint32 raw_x() const;
  void set_raw_x(::google::protobuf::uint32 value);

  // optional uint32 raw_y = 3;
  bool has_raw_y() const;
  void clear_raw_y();
  static const int kRawYFieldNumber = 3;
  ::google::protobuf::uint32 raw_y() const;
  void set_raw_y(::google::protobuf::uint32 value);

  // optional uint32 raw_z = 4;
  bool has_raw_z() const;
  void clear_raw_z();
  static const int kRawZFieldNumber = 4;
  ::google::protobuf::uint32 raw_z() const;
  void set_raw_z(::google::protobuf::uint32 value);

  // optional uint32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Mag)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw_x();
  void clear_has_raw_x();
  void set_has_raw_y();
  void clear_has_raw_y();
  void set_has_raw_z();
  void clear_has_raw_z();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_x_;
  ::google::protobuf::uint32 raw_y_;
  ::google::protobuf::uint32 raw_z_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Baro : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Baro) */ {
 public:
  Baro();
  virtual ~Baro();

  Baro(const Baro& from);

  inline Baro& operator=(const Baro& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Baro(Baro&& from) noexcept
    : Baro() {
    *this = ::std::move(from);
  }

  inline Baro& operator=(Baro&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Baro& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Baro* internal_default_instance() {
    return reinterpret_cast<const Baro*>(
               &_Baro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Baro* other);
  friend void swap(Baro& a, Baro& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Baro* New() const final {
    return CreateMaybeMessage<Baro>(NULL);
  }

  Baro* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Baro>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Baro& from);
  void MergeFrom(const Baro& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Baro* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 4;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw = 2;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 2;
  ::google::protobuf::uint32 raw() const;
  void set_raw(::google::protobuf::uint32 value);

  // optional uint32 error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Baro)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw();
  void clear_has_raw();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Temp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Temp) */ {
 public:
  Temp();
  virtual ~Temp();

  Temp(const Temp& from);

  inline Temp& operator=(const Temp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Temp(Temp&& from) noexcept
    : Temp() {
    *this = ::std::move(from);
  }

  inline Temp& operator=(Temp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Temp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Temp* internal_default_instance() {
    return reinterpret_cast<const Temp*>(
               &_Temp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Temp* other);
  friend void swap(Temp& a, Temp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Temp* New() const final {
    return CreateMaybeMessage<Temp>(NULL);
  }

  Temp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Temp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Temp& from);
  void MergeFrom(const Temp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Temp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 4;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw = 2;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 2;
  ::google::protobuf::uint32 raw() const;
  void set_raw(::google::protobuf::uint32 value);

  // optional uint32 error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Temp)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw();
  void clear_has_raw();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Sync) */ {
 public:
  Sync();
  virtual ~Sync();

  Sync(const Sync& from);

  inline Sync& operator=(const Sync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sync(Sync&& from) noexcept
    : Sync() {
    *this = ::std::move(from);
  }

  inline Sync& operator=(Sync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sync* internal_default_instance() {
    return reinterpret_cast<const Sync*>(
               &_Sync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Sync* other);
  friend void swap(Sync& a, Sync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sync* New() const final {
    return CreateMaybeMessage<Sync>(NULL);
  }

  Sync* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sync>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sync& from);
  void MergeFrom(const Sync& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Sync_DIR DIR;
  static const DIR UNKNOWN =
    Sync_DIR_UNKNOWN;
  static const DIR RAISING =
    Sync_DIR_RAISING;
  static const DIR FALLING =
    Sync_DIR_FALLING;
  static inline bool DIR_IsValid(int value) {
    return Sync_DIR_IsValid(value);
  }
  static const DIR DIR_MIN =
    Sync_DIR_DIR_MIN;
  static const DIR DIR_MAX =
    Sync_DIR_DIR_MAX;
  static const int DIR_ARRAYSIZE =
    Sync_DIR_DIR_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DIR_descriptor() {
    return Sync_DIR_descriptor();
  }
  static inline const ::std::string& DIR_Name(DIR value) {
    return Sync_DIR_Name(value);
  }
  static inline bool DIR_Parse(const ::std::string& name,
      DIR* value) {
    return Sync_DIR_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string error_msg = 6;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 6;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 channel = 2;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.Sync.DIR dir = 3;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  ::frl::device::wireformat::Sync_DIR dir() const;
  void set_dir(::frl::device::wireformat::Sync_DIR value);

  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Sync)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_channel();
  void clear_has_channel();
  void set_has_dir();
  void clear_has_dir();
  void set_has_count();
  void clear_has_count();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 channel_;
  int dir_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirstPixel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.FirstPixel) */ {
 public:
  FirstPixel();
  virtual ~FirstPixel();

  FirstPixel(const FirstPixel& from);

  inline FirstPixel& operator=(const FirstPixel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirstPixel(FirstPixel&& from) noexcept
    : FirstPixel() {
    *this = ::std::move(from);
  }

  inline FirstPixel& operator=(FirstPixel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstPixel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirstPixel* internal_default_instance() {
    return reinterpret_cast<const FirstPixel*>(
               &_FirstPixel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FirstPixel* other);
  friend void swap(FirstPixel& a, FirstPixel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirstPixel* New() const final {
    return CreateMaybeMessage<FirstPixel>(NULL);
  }

  FirstPixel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirstPixel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirstPixel& from);
  void MergeFrom(const FirstPixel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirstPixel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FirstPixel_LR LR;
  static const LR UNKNOWN =
    FirstPixel_LR_UNKNOWN;
  static const LR LEFT =
    FirstPixel_LR_LEFT;
  static const LR RIGHT =
    FirstPixel_LR_RIGHT;
  static inline bool LR_IsValid(int value) {
    return FirstPixel_LR_IsValid(value);
  }
  static const LR LR_MIN =
    FirstPixel_LR_LR_MIN;
  static const LR LR_MAX =
    FirstPixel_LR_LR_MAX;
  static const int LR_ARRAYSIZE =
    FirstPixel_LR_LR_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LR_descriptor() {
    return FirstPixel_LR_descriptor();
  }
  static inline const ::std::string& LR_Name(LR value) {
    return FirstPixel_LR_Name(value);
  }
  static inline bool LR_Parse(const ::std::string& name,
      LR* value) {
    return FirstPixel_LR_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string error_msg = 6;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 6;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.FirstPixel.LR which = 2;
  bool has_which() const;
  void clear_which();
  static const int kWhichFieldNumber = 2;
  ::frl::device::wireformat::FirstPixel_LR which() const;
  void set_which(::frl::device::wireformat::FirstPixel_LR value);

  // optional uint32 value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint32 error_code = 5;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.FirstPixel)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_which();
  void clear_has_which();
  void set_has_value();
  void clear_has_value();
  void set_has_count();
  void clear_has_count();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  int which_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Fan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Fan) */ {
 public:
  Fan();
  virtual ~Fan();

  Fan(const Fan& from);

  inline Fan& operator=(const Fan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fan(Fan&& from) noexcept
    : Fan() {
    *this = ::std::move(from);
  }

  inline Fan& operator=(Fan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fan* internal_default_instance() {
    return reinterpret_cast<const Fan*>(
               &_Fan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Fan* other);
  friend void swap(Fan& a, Fan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fan* New() const final {
    return CreateMaybeMessage<Fan>(NULL);
  }

  Fan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fan& from);
  void MergeFrom(const Fan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 4;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw_speed = 2;
  bool has_raw_speed() const;
  void clear_raw_speed();
  static const int kRawSpeedFieldNumber = 2;
  ::google::protobuf::uint32 raw_speed() const;
  void set_raw_speed(::google::protobuf::uint32 value);

  // optional uint32 error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Fan)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw_speed();
  void clear_has_raw_speed();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_speed_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Button : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Button) */ {
 public:
  Button();
  virtual ~Button();

  Button(const Button& from);

  inline Button& operator=(const Button& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Button(Button&& from) noexcept
    : Button() {
    *this = ::std::move(from);
  }

  inline Button& operator=(Button&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Button& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Button* internal_default_instance() {
    return reinterpret_cast<const Button*>(
               &_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Button* other);
  friend void swap(Button& a, Button& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Button* New() const final {
    return CreateMaybeMessage<Button>(NULL);
  }

  Button* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Button>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Button& from);
  void MergeFrom(const Button& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Button* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 4;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional bool value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // optional uint32 error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Button)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_value();
  void clear_has_value();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  bool value_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Encoder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Encoder) */ {
 public:
  Encoder();
  virtual ~Encoder();

  Encoder(const Encoder& from);

  inline Encoder& operator=(const Encoder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encoder(Encoder&& from) noexcept
    : Encoder() {
    *this = ::std::move(from);
  }

  inline Encoder& operator=(Encoder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encoder* internal_default_instance() {
    return reinterpret_cast<const Encoder*>(
               &_Encoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Encoder* other);
  friend void swap(Encoder& a, Encoder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encoder* New() const final {
    return CreateMaybeMessage<Encoder>(NULL);
  }

  Encoder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Encoder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Encoder& from);
  void MergeFrom(const Encoder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 4;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 raw = 2;
  bool has_raw() const;
  void clear_raw();
  static const int kRawFieldNumber = 2;
  ::google::protobuf::uint32 raw() const;
  void set_raw(::google::protobuf::uint32 value);

  // optional uint32 error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Encoder)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_raw();
  void clear_has_raw();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 raw_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VFMotor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.VFMotor) */ {
 public:
  VFMotor();
  virtual ~VFMotor();

  VFMotor(const VFMotor& from);

  inline VFMotor& operator=(const VFMotor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VFMotor(VFMotor&& from) noexcept
    : VFMotor() {
    *this = ::std::move(from);
  }

  inline VFMotor& operator=(VFMotor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VFMotor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VFMotor* internal_default_instance() {
    return reinterpret_cast<const VFMotor*>(
               &_VFMotor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(VFMotor* other);
  friend void swap(VFMotor& a, VFMotor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VFMotor* New() const final {
    return CreateMaybeMessage<VFMotor>(NULL);
  }

  VFMotor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VFMotor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VFMotor& from);
  void MergeFrom(const VFMotor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VFMotor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VFMotor_LR LR;
  static const LR UNKNOWN =
    VFMotor_LR_UNKNOWN;
  static const LR LEFT =
    VFMotor_LR_LEFT;
  static const LR RIGHT =
    VFMotor_LR_RIGHT;
  static inline bool LR_IsValid(int value) {
    return VFMotor_LR_IsValid(value);
  }
  static const LR LR_MIN =
    VFMotor_LR_LR_MIN;
  static const LR LR_MAX =
    VFMotor_LR_LR_MAX;
  static const int LR_ARRAYSIZE =
    VFMotor_LR_LR_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LR_descriptor() {
    return VFMotor_LR_descriptor();
  }
  static inline const ::std::string& LR_Name(LR value) {
    return VFMotor_LR_Name(value);
  }
  static inline bool LR_Parse(const ::std::string& name,
      LR* value) {
    return VFMotor_LR_Parse(name, value);
  }

  typedef VFMotor_Event Event;
  static const Event NONE =
    VFMotor_Event_NONE;
  static const Event HOMING_COMPLETE =
    VFMotor_Event_HOMING_COMPLETE;
  static inline bool Event_IsValid(int value) {
    return VFMotor_Event_IsValid(value);
  }
  static const Event Event_MIN =
    VFMotor_Event_Event_MIN;
  static const Event Event_MAX =
    VFMotor_Event_Event_MAX;
  static const int Event_ARRAYSIZE =
    VFMotor_Event_Event_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Event_descriptor() {
    return VFMotor_Event_descriptor();
  }
  static inline const ::std::string& Event_Name(Event value) {
    return VFMotor_Event_Name(value);
  }
  static inline bool Event_Parse(const ::std::string& name,
      Event* value) {
    return VFMotor_Event_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string error_msg = 7;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 7;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.VFMotor.LR which = 2;
  bool has_which() const;
  void clear_which();
  static const int kWhichFieldNumber = 2;
  ::frl::device::wireformat::VFMotor_LR which() const;
  void set_which(::frl::device::wireformat::VFMotor_LR value);

  // optional uint32 position_cnts = 3;
  bool has_position_cnts() const;
  void clear_position_cnts();
  static const int kPositionCntsFieldNumber = 3;
  ::google::protobuf::uint32 position_cnts() const;
  void set_position_cnts(::google::protobuf::uint32 value);

  // optional uint32 set_point_cnts = 4;
  bool has_set_point_cnts() const;
  void clear_set_point_cnts();
  static const int kSetPointCntsFieldNumber = 4;
  ::google::protobuf::uint32 set_point_cnts() const;
  void set_set_point_cnts(::google::protobuf::uint32 value);

  // optional float rate_rpm = 5;
  bool has_rate_rpm() const;
  void clear_rate_rpm();
  static const int kRateRpmFieldNumber = 5;
  float rate_rpm() const;
  void set_rate_rpm(float value);

  // optional uint32 error_code = 6;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 6;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.VFMotor.Event event = 8;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 8;
  ::frl::device::wireformat::VFMotor_Event event() const;
  void set_event(::frl::device::wireformat::VFMotor_Event value);

  // optional bool flag = 9;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 9;
  bool flag() const;
  void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.VFMotor)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_which();
  void clear_has_which();
  void set_has_position_cnts();
  void clear_has_position_cnts();
  void set_has_set_point_cnts();
  void clear_has_set_point_cnts();
  void set_has_rate_rpm();
  void clear_has_rate_rpm();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();
  void set_has_event();
  void clear_has_event();
  void set_has_flag();
  void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  int which_;
  ::google::protobuf::uint32 position_cnts_;
  ::google::protobuf::uint32 set_point_cnts_;
  float rate_rpm_;
  ::google::protobuf::uint32 error_code_;
  int event_;
  bool flag_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.Timer) */ {
 public:
  Timer();
  virtual ~Timer();

  Timer(const Timer& from);

  inline Timer& operator=(const Timer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timer(Timer&& from) noexcept
    : Timer() {
    *this = ::std::move(from);
  }

  inline Timer& operator=(Timer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timer* internal_default_instance() {
    return reinterpret_cast<const Timer*>(
               &_Timer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Timer* other);
  friend void swap(Timer& a, Timer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timer* New() const final {
    return CreateMaybeMessage<Timer>(NULL);
  }

  Timer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timer& from);
  void MergeFrom(const Timer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Timer_Source Source;
  static const Source UNKNOWN =
    Timer_Source_UNKNOWN;
  static const Source INTERNAL =
    Timer_Source_INTERNAL;
  static const Source EXTRNAL =
    Timer_Source_EXTRNAL;
  static inline bool Source_IsValid(int value) {
    return Timer_Source_IsValid(value);
  }
  static const Source Source_MIN =
    Timer_Source_Source_MIN;
  static const Source Source_MAX =
    Timer_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    Timer_Source_Source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Source_descriptor() {
    return Timer_Source_descriptor();
  }
  static inline const ::std::string& Source_Name(Source value) {
    return Timer_Source_Name(value);
  }
  static inline bool Source_Parse(const ::std::string& name,
      Source* value) {
    return Timer_Source_Parse(name, value);
  }

  typedef Timer_Status Status;
  static const Status UNDEFINED =
    Timer_Status_UNDEFINED;
  static const Status ADJUSTING =
    Timer_Status_ADJUSTING;
  static const Status TRACKING =
    Timer_Status_TRACKING;
  static inline bool Status_IsValid(int value) {
    return Timer_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Timer_Status_Status_MIN;
  static const Status Status_MAX =
    Timer_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Timer_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Timer_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Timer_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Timer_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string error_msg = 5;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 5;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.Timer.Source src = 2;
  bool has_src() const;
  void clear_src();
  static const int kSrcFieldNumber = 2;
  ::frl::device::wireformat::Timer_Source src() const;
  void set_src(::frl::device::wireformat::Timer_Source value);

  // optional .frl.device.wireformat.Timer.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::frl::device::wireformat::Timer_Status status() const;
  void set_status(::frl::device::wireformat::Timer_Status value);

  // optional uint32 error_code = 4;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.Timer)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_src();
  void clear_has_src();
  void set_has_status();
  void clear_has_status();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  int src_;
  int status_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MainBoard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.MainBoard) */ {
 public:
  MainBoard();
  virtual ~MainBoard();

  MainBoard(const MainBoard& from);

  inline MainBoard& operator=(const MainBoard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MainBoard(MainBoard&& from) noexcept
    : MainBoard() {
    *this = ::std::move(from);
  }

  inline MainBoard& operator=(MainBoard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainBoard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MainBoard* internal_default_instance() {
    return reinterpret_cast<const MainBoard*>(
               &_MainBoard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(MainBoard* other);
  friend void swap(MainBoard& a, MainBoard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MainBoard* New() const final {
    return CreateMaybeMessage<MainBoard>(NULL);
  }

  MainBoard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MainBoard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MainBoard& from);
  void MergeFrom(const MainBoard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainBoard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MainBoard_Status Status;
  static const Status UNKNOWN =
    MainBoard_Status_UNKNOWN;
  static const Status BOOTING =
    MainBoard_Status_BOOTING;
  static const Status OK =
    MainBoard_Status_OK;
  static const Status TERMINATING =
    MainBoard_Status_TERMINATING;
  static inline bool Status_IsValid(int value) {
    return MainBoard_Status_IsValid(value);
  }
  static const Status Status_MIN =
    MainBoard_Status_Status_MIN;
  static const Status Status_MAX =
    MainBoard_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    MainBoard_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return MainBoard_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return MainBoard_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return MainBoard_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string error_msg = 4;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required .frl.device.wireformat.MainBoard.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::frl::device::wireformat::MainBoard_Status status() const;
  void set_status(::frl::device::wireformat::MainBoard_Status value);

  // optional uint32 error_code = 3;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.MainBoard)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_status();
  void clear_has_status();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_error_msg();
  void clear_has_error_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::uint32 id_;
  int status_;
  ::google::protobuf::uint32 error_code_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .frl.device.wireformat.DeviceSerial serial = 1;
  bool has_serial() const;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  private:
  const ::frl::device::wireformat::DeviceSerial& _internal_serial() const;
  public:
  const ::frl::device::wireformat::DeviceSerial& serial() const;
  ::frl::device::wireformat::DeviceSerial* release_serial();
  ::frl::device::wireformat::DeviceSerial* mutable_serial();
  void set_allocated_serial(::frl::device::wireformat::DeviceSerial* serial);

  // optional .frl.device.wireformat.FwVersion fw_ver = 2;
  bool has_fw_ver() const;
  void clear_fw_ver();
  static const int kFwVerFieldNumber = 2;
  private:
  const ::frl::device::wireformat::FwVersion& _internal_fw_ver() const;
  public:
  const ::frl::device::wireformat::FwVersion& fw_ver() const;
  ::frl::device::wireformat::FwVersion* release_fw_ver();
  ::frl::device::wireformat::FwVersion* mutable_fw_ver();
  void set_allocated_fw_ver(::frl::device::wireformat::FwVersion* fw_ver);

  // optional .frl.device.wireformat.ProtocolVersion p_ver = 3;
  bool has_p_ver() const;
  void clear_p_ver();
  static const int kPVerFieldNumber = 3;
  private:
  const ::frl::device::wireformat::ProtocolVersion& _internal_p_ver() const;
  public:
  const ::frl::device::wireformat::ProtocolVersion& p_ver() const;
  ::frl::device::wireformat::ProtocolVersion* release_p_ver();
  ::frl::device::wireformat::ProtocolVersion* mutable_p_ver();
  void set_allocated_p_ver(::frl::device::wireformat::ProtocolVersion* p_ver);

  // optional .frl.device.wireformat.MfgDate mfg_date = 4;
  bool has_mfg_date() const;
  void clear_mfg_date();
  static const int kMfgDateFieldNumber = 4;
  private:
  const ::frl::device::wireformat::MfgDate& _internal_mfg_date() const;
  public:
  const ::frl::device::wireformat::MfgDate& mfg_date() const;
  ::frl::device::wireformat::MfgDate* release_mfg_date();
  ::frl::device::wireformat::MfgDate* mutable_mfg_date();
  void set_allocated_mfg_date(::frl::device::wireformat::MfgDate* mfg_date);

  // optional .frl.device.wireformat.HwVersion hw_ver = 5;
  bool has_hw_ver() const;
  void clear_hw_ver();
  static const int kHwVerFieldNumber = 5;
  private:
  const ::frl::device::wireformat::HwVersion& _internal_hw_ver() const;
  public:
  const ::frl::device::wireformat::HwVersion& hw_ver() const;
  ::frl::device::wireformat::HwVersion* release_hw_ver();
  ::frl::device::wireformat::HwVersion* mutable_hw_ver();
  void set_allocated_hw_ver(::frl::device::wireformat::HwVersion* hw_ver);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.DeviceInfo)
 private:
  void set_has_serial();
  void clear_has_serial();
  void set_has_fw_ver();
  void clear_has_fw_ver();
  void set_has_p_ver();
  void clear_has_p_ver();
  void set_has_mfg_date();
  void clear_has_mfg_date();
  void set_has_hw_ver();
  void clear_has_hw_ver();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::frl::device::wireformat::DeviceSerial* serial_;
  ::frl::device::wireformat::FwVersion* fw_ver_;
  ::frl::device::wireformat::ProtocolVersion* p_ver_;
  ::frl::device::wireformat::MfgDate* mfg_date_;
  ::frl::device::wireformat::HwVersion* hw_ver_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FwVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.FwVersion) */ {
 public:
  FwVersion();
  virtual ~FwVersion();

  FwVersion(const FwVersion& from);

  inline FwVersion& operator=(const FwVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FwVersion(FwVersion&& from) noexcept
    : FwVersion() {
    *this = ::std::move(from);
  }

  inline FwVersion& operator=(FwVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FwVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FwVersion* internal_default_instance() {
    return reinterpret_cast<const FwVersion*>(
               &_FwVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(FwVersion* other);
  friend void swap(FwVersion& a, FwVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FwVersion* New() const final {
    return CreateMaybeMessage<FwVersion>(NULL);
  }

  FwVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FwVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FwVersion& from);
  void MergeFrom(const FwVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FwVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sha = 3;
  bool has_sha() const;
  void clear_sha();
  static const int kShaFieldNumber = 3;
  const ::std::string& sha() const;
  void set_sha(const ::std::string& value);
  #if LANG_CXX11
  void set_sha(::std::string&& value);
  #endif
  void set_sha(const char* value);
  void set_sha(const void* value, size_t size);
  ::std::string* mutable_sha();
  ::std::string* release_sha();
  void set_allocated_sha(::std::string* sha);

  // optional uint32 major = 1;
  bool has_major() const;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::uint32 major() const;
  void set_major(::google::protobuf::uint32 value);

  // optional uint32 minor = 2;
  bool has_minor() const;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::uint32 minor() const;
  void set_minor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.FwVersion)
 private:
  void set_has_major();
  void clear_has_major();
  void set_has_minor();
  void clear_has_minor();
  void set_has_sha();
  void clear_has_sha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sha_;
  ::google::protobuf::uint32 major_;
  ::google::protobuf::uint32 minor_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HwVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.HwVersion) */ {
 public:
  HwVersion();
  virtual ~HwVersion();

  HwVersion(const HwVersion& from);

  inline HwVersion& operator=(const HwVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HwVersion(HwVersion&& from) noexcept
    : HwVersion() {
    *this = ::std::move(from);
  }

  inline HwVersion& operator=(HwVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HwVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HwVersion* internal_default_instance() {
    return reinterpret_cast<const HwVersion*>(
               &_HwVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(HwVersion* other);
  friend void swap(HwVersion& a, HwVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HwVersion* New() const final {
    return CreateMaybeMessage<HwVersion>(NULL);
  }

  HwVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HwVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HwVersion& from);
  void MergeFrom(const HwVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HwVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model = 3;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional uint32 major = 1;
  bool has_major() const;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::uint32 major() const;
  void set_major(::google::protobuf::uint32 value);

  // optional uint32 minor = 2;
  bool has_minor() const;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::uint32 minor() const;
  void set_minor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.HwVersion)
 private:
  void set_has_major();
  void clear_has_major();
  void set_has_minor();
  void clear_has_minor();
  void set_has_model();
  void clear_has_model();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::uint32 major_;
  ::google::protobuf::uint32 minor_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtocolVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.ProtocolVersion) */ {
 public:
  ProtocolVersion();
  virtual ~ProtocolVersion();

  ProtocolVersion(const ProtocolVersion& from);

  inline ProtocolVersion& operator=(const ProtocolVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtocolVersion(ProtocolVersion&& from) noexcept
    : ProtocolVersion() {
    *this = ::std::move(from);
  }

  inline ProtocolVersion& operator=(ProtocolVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolVersion* internal_default_instance() {
    return reinterpret_cast<const ProtocolVersion*>(
               &_ProtocolVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ProtocolVersion* other);
  friend void swap(ProtocolVersion& a, ProtocolVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtocolVersion* New() const final {
    return CreateMaybeMessage<ProtocolVersion>(NULL);
  }

  ProtocolVersion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolVersion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtocolVersion& from);
  void MergeFrom(const ProtocolVersion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 major = 1;
  bool has_major() const;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::uint32 major() const;
  void set_major(::google::protobuf::uint32 value);

  // optional uint32 minor = 2;
  bool has_minor() const;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::uint32 minor() const;
  void set_minor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.ProtocolVersion)
 private:
  void set_has_major();
  void clear_has_major();
  void set_has_minor();
  void clear_has_minor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 major_;
  ::google::protobuf::uint32 minor_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MfgDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.MfgDate) */ {
 public:
  MfgDate();
  virtual ~MfgDate();

  MfgDate(const MfgDate& from);

  inline MfgDate& operator=(const MfgDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MfgDate(MfgDate&& from) noexcept
    : MfgDate() {
    *this = ::std::move(from);
  }

  inline MfgDate& operator=(MfgDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MfgDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MfgDate* internal_default_instance() {
    return reinterpret_cast<const MfgDate*>(
               &_MfgDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MfgDate* other);
  friend void swap(MfgDate& a, MfgDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MfgDate* New() const final {
    return CreateMaybeMessage<MfgDate>(NULL);
  }

  MfgDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MfgDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MfgDate& from);
  void MergeFrom(const MfgDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MfgDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hour = 1;
  bool has_hour() const;
  void clear_hour();
  static const int kHourFieldNumber = 1;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // optional uint32 min = 2;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // optional uint32 day = 3;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // optional uint32 month = 4;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 4;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // optional uint32 year = 5;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 5;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.MfgDate)
 private:
  void set_has_hour();
  void clear_has_hour();
  void set_has_min();
  void clear_has_min();
  void set_has_day();
  void clear_has_day();
  void set_has_month();
  void clear_has_month();
  void set_has_year();
  void clear_has_year();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 year_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceSerial : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.DeviceSerial) */ {
 public:
  DeviceSerial();
  virtual ~DeviceSerial();

  DeviceSerial(const DeviceSerial& from);

  inline DeviceSerial& operator=(const DeviceSerial& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceSerial(DeviceSerial&& from) noexcept
    : DeviceSerial() {
    *this = ::std::move(from);
  }

  inline DeviceSerial& operator=(DeviceSerial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceSerial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceSerial* internal_default_instance() {
    return reinterpret_cast<const DeviceSerial*>(
               &_DeviceSerial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DeviceSerial* other);
  friend void swap(DeviceSerial& a, DeviceSerial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceSerial* New() const final {
    return CreateMaybeMessage<DeviceSerial>(NULL);
  }

  DeviceSerial* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSerial>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceSerial& from);
  void MergeFrom(const DeviceSerial& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSerial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hex = 2;
  bool has_hex() const;
  void clear_hex();
  static const int kHexFieldNumber = 2;
  const ::std::string& hex() const;
  void set_hex(const ::std::string& value);
  #if LANG_CXX11
  void set_hex(::std::string&& value);
  #endif
  void set_hex(const char* value);
  void set_hex(const void* value, size_t size);
  ::std::string* mutable_hex();
  ::std::string* release_hex();
  void set_allocated_hex(::std::string* hex);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.DeviceSerial)
 private:
  void set_has_hex();
  void clear_has_hex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hex_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToDeviceMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.ToDeviceMsg) */ {
 public:
  ToDeviceMsg();
  virtual ~ToDeviceMsg();

  ToDeviceMsg(const ToDeviceMsg& from);

  inline ToDeviceMsg& operator=(const ToDeviceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToDeviceMsg(ToDeviceMsg&& from) noexcept
    : ToDeviceMsg() {
    *this = ::std::move(from);
  }

  inline ToDeviceMsg& operator=(ToDeviceMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToDeviceMsg& default_instance();

  enum CmdCase {
    kSetDisplayCfgs = 2,
    kSetGyroCfgs = 3,
    kSetAccCfgs = 4,
    kSetBaroCfgs = 5,
    kSetFanCfgs = 6,
    kSetTimerCfg = 7,
    kSetTrigCfg = 8,
    kSetSyncCfg = 9,
    kSetSerial = 10,
    kSetVfmotorCfgs = 11,
    kSetVfmotorCmd = 12,
    kGetDisplayCfgs = 21,
    kGetGyroCfgs = 22,
    kGetAccCfgs = 23,
    kGetBaroCfgs = 24,
    kGetFansCfgs = 25,
    kGetTimerCfg = 26,
    kGetTrigCfg = 27,
    kGetSyncCfg = 28,
    kGetDeviceSerial = 29,
    kGetBoardInfo = 30,
    kGetProtocolVersion = 31,
    kGetFwVersion = 32,
    kGetHwVersion = 33,
    kGetMfgDate = 34,
    kGetVfmotorStates = 35,
    kGetVfmotorCfgs = 36,
    CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToDeviceMsg* internal_default_instance() {
    return reinterpret_cast<const ToDeviceMsg*>(
               &_ToDeviceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ToDeviceMsg* other);
  friend void swap(ToDeviceMsg& a, ToDeviceMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToDeviceMsg* New() const final {
    return CreateMaybeMessage<ToDeviceMsg>(NULL);
  }

  ToDeviceMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToDeviceMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToDeviceMsg& from);
  void MergeFrom(const ToDeviceMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToDeviceMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmd_id() const;
  void set_cmd_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.DispDriverCfgs set_display_cfgs = 2;
  bool has_set_display_cfgs() const;
  void clear_set_display_cfgs();
  static const int kSetDisplayCfgsFieldNumber = 2;
  private:
  const ::frl::device::wireformat::DispDriverCfgs& _internal_set_display_cfgs() const;
  public:
  const ::frl::device::wireformat::DispDriverCfgs& set_display_cfgs() const;
  ::frl::device::wireformat::DispDriverCfgs* release_set_display_cfgs();
  ::frl::device::wireformat::DispDriverCfgs* mutable_set_display_cfgs();
  void set_allocated_set_display_cfgs(::frl::device::wireformat::DispDriverCfgs* set_display_cfgs);

  // optional .frl.device.wireformat.GyroCfgs set_gyro_cfgs = 3;
  bool has_set_gyro_cfgs() const;
  void clear_set_gyro_cfgs();
  static const int kSetGyroCfgsFieldNumber = 3;
  private:
  const ::frl::device::wireformat::GyroCfgs& _internal_set_gyro_cfgs() const;
  public:
  const ::frl::device::wireformat::GyroCfgs& set_gyro_cfgs() const;
  ::frl::device::wireformat::GyroCfgs* release_set_gyro_cfgs();
  ::frl::device::wireformat::GyroCfgs* mutable_set_gyro_cfgs();
  void set_allocated_set_gyro_cfgs(::frl::device::wireformat::GyroCfgs* set_gyro_cfgs);

  // optional .frl.device.wireformat.AccCfgs set_acc_cfgs = 4;
  bool has_set_acc_cfgs() const;
  void clear_set_acc_cfgs();
  static const int kSetAccCfgsFieldNumber = 4;
  private:
  const ::frl::device::wireformat::AccCfgs& _internal_set_acc_cfgs() const;
  public:
  const ::frl::device::wireformat::AccCfgs& set_acc_cfgs() const;
  ::frl::device::wireformat::AccCfgs* release_set_acc_cfgs();
  ::frl::device::wireformat::AccCfgs* mutable_set_acc_cfgs();
  void set_allocated_set_acc_cfgs(::frl::device::wireformat::AccCfgs* set_acc_cfgs);

  // optional .frl.device.wireformat.BaroCfgs set_baro_cfgs = 5;
  bool has_set_baro_cfgs() const;
  void clear_set_baro_cfgs();
  static const int kSetBaroCfgsFieldNumber = 5;
  private:
  const ::frl::device::wireformat::BaroCfgs& _internal_set_baro_cfgs() const;
  public:
  const ::frl::device::wireformat::BaroCfgs& set_baro_cfgs() const;
  ::frl::device::wireformat::BaroCfgs* release_set_baro_cfgs();
  ::frl::device::wireformat::BaroCfgs* mutable_set_baro_cfgs();
  void set_allocated_set_baro_cfgs(::frl::device::wireformat::BaroCfgs* set_baro_cfgs);

  // optional .frl.device.wireformat.FanCfgs set_fan_cfgs = 6;
  bool has_set_fan_cfgs() const;
  void clear_set_fan_cfgs();
  static const int kSetFanCfgsFieldNumber = 6;
  private:
  const ::frl::device::wireformat::FanCfgs& _internal_set_fan_cfgs() const;
  public:
  const ::frl::device::wireformat::FanCfgs& set_fan_cfgs() const;
  ::frl::device::wireformat::FanCfgs* release_set_fan_cfgs();
  ::frl::device::wireformat::FanCfgs* mutable_set_fan_cfgs();
  void set_allocated_set_fan_cfgs(::frl::device::wireformat::FanCfgs* set_fan_cfgs);

  // optional .frl.device.wireformat.TimerCfg set_timer_cfg = 7;
  bool has_set_timer_cfg() const;
  void clear_set_timer_cfg();
  static const int kSetTimerCfgFieldNumber = 7;
  private:
  const ::frl::device::wireformat::TimerCfg& _internal_set_timer_cfg() const;
  public:
  const ::frl::device::wireformat::TimerCfg& set_timer_cfg() const;
  ::frl::device::wireformat::TimerCfg* release_set_timer_cfg();
  ::frl::device::wireformat::TimerCfg* mutable_set_timer_cfg();
  void set_allocated_set_timer_cfg(::frl::device::wireformat::TimerCfg* set_timer_cfg);

  // optional .frl.device.wireformat.TrigCfg set_trig_cfg = 8;
  bool has_set_trig_cfg() const;
  void clear_set_trig_cfg();
  static const int kSetTrigCfgFieldNumber = 8;
  private:
  const ::frl::device::wireformat::TrigCfg& _internal_set_trig_cfg() const;
  public:
  const ::frl::device::wireformat::TrigCfg& set_trig_cfg() const;
  ::frl::device::wireformat::TrigCfg* release_set_trig_cfg();
  ::frl::device::wireformat::TrigCfg* mutable_set_trig_cfg();
  void set_allocated_set_trig_cfg(::frl::device::wireformat::TrigCfg* set_trig_cfg);

  // optional .frl.device.wireformat.SyncCfg set_sync_cfg = 9;
  bool has_set_sync_cfg() const;
  void clear_set_sync_cfg();
  static const int kSetSyncCfgFieldNumber = 9;
  private:
  const ::frl::device::wireformat::SyncCfg& _internal_set_sync_cfg() const;
  public:
  const ::frl::device::wireformat::SyncCfg& set_sync_cfg() const;
  ::frl::device::wireformat::SyncCfg* release_set_sync_cfg();
  ::frl::device::wireformat::SyncCfg* mutable_set_sync_cfg();
  void set_allocated_set_sync_cfg(::frl::device::wireformat::SyncCfg* set_sync_cfg);

  // optional .frl.device.wireformat.DeviceSerial set_serial = 10;
  bool has_set_serial() const;
  void clear_set_serial();
  static const int kSetSerialFieldNumber = 10;
  private:
  const ::frl::device::wireformat::DeviceSerial& _internal_set_serial() const;
  public:
  const ::frl::device::wireformat::DeviceSerial& set_serial() const;
  ::frl::device::wireformat::DeviceSerial* release_set_serial();
  ::frl::device::wireformat::DeviceSerial* mutable_set_serial();
  void set_allocated_set_serial(::frl::device::wireformat::DeviceSerial* set_serial);

  // optional .frl.device.wireformat.VFMotorCfgs set_vfmotor_cfgs = 11;
  bool has_set_vfmotor_cfgs() const;
  void clear_set_vfmotor_cfgs();
  static const int kSetVfmotorCfgsFieldNumber = 11;
  private:
  const ::frl::device::wireformat::VFMotorCfgs& _internal_set_vfmotor_cfgs() const;
  public:
  const ::frl::device::wireformat::VFMotorCfgs& set_vfmotor_cfgs() const;
  ::frl::device::wireformat::VFMotorCfgs* release_set_vfmotor_cfgs();
  ::frl::device::wireformat::VFMotorCfgs* mutable_set_vfmotor_cfgs();
  void set_allocated_set_vfmotor_cfgs(::frl::device::wireformat::VFMotorCfgs* set_vfmotor_cfgs);

  // optional .frl.device.wireformat.VFMotorCmds set_vfmotor_cmd = 12;
  bool has_set_vfmotor_cmd() const;
  void clear_set_vfmotor_cmd();
  static const int kSetVfmotorCmdFieldNumber = 12;
  private:
  const ::frl::device::wireformat::VFMotorCmds& _internal_set_vfmotor_cmd() const;
  public:
  const ::frl::device::wireformat::VFMotorCmds& set_vfmotor_cmd() const;
  ::frl::device::wireformat::VFMotorCmds* release_set_vfmotor_cmd();
  ::frl::device::wireformat::VFMotorCmds* mutable_set_vfmotor_cmd();
  void set_allocated_set_vfmotor_cmd(::frl::device::wireformat::VFMotorCmds* set_vfmotor_cmd);

  // optional bool get_display_cfgs = 21;
  bool has_get_display_cfgs() const;
  void clear_get_display_cfgs();
  static const int kGetDisplayCfgsFieldNumber = 21;
  bool get_display_cfgs() const;
  void set_get_display_cfgs(bool value);

  // optional bool get_gyro_cfgs = 22;
  bool has_get_gyro_cfgs() const;
  void clear_get_gyro_cfgs();
  static const int kGetGyroCfgsFieldNumber = 22;
  bool get_gyro_cfgs() const;
  void set_get_gyro_cfgs(bool value);

  // optional bool get_acc_cfgs = 23;
  bool has_get_acc_cfgs() const;
  void clear_get_acc_cfgs();
  static const int kGetAccCfgsFieldNumber = 23;
  bool get_acc_cfgs() const;
  void set_get_acc_cfgs(bool value);

  // optional bool get_baro_cfgs = 24;
  bool has_get_baro_cfgs() const;
  void clear_get_baro_cfgs();
  static const int kGetBaroCfgsFieldNumber = 24;
  bool get_baro_cfgs() const;
  void set_get_baro_cfgs(bool value);

  // optional bool get_fans_cfgs = 25;
  bool has_get_fans_cfgs() const;
  void clear_get_fans_cfgs();
  static const int kGetFansCfgsFieldNumber = 25;
  bool get_fans_cfgs() const;
  void set_get_fans_cfgs(bool value);

  // optional bool get_timer_cfg = 26;
  bool has_get_timer_cfg() const;
  void clear_get_timer_cfg();
  static const int kGetTimerCfgFieldNumber = 26;
  bool get_timer_cfg() const;
  void set_get_timer_cfg(bool value);

  // optional bool get_trig_cfg = 27;
  bool has_get_trig_cfg() const;
  void clear_get_trig_cfg();
  static const int kGetTrigCfgFieldNumber = 27;
  bool get_trig_cfg() const;
  void set_get_trig_cfg(bool value);

  // optional bool get_sync_cfg = 28;
  bool has_get_sync_cfg() const;
  void clear_get_sync_cfg();
  static const int kGetSyncCfgFieldNumber = 28;
  bool get_sync_cfg() const;
  void set_get_sync_cfg(bool value);

  // optional bool get_device_serial = 29;
  bool has_get_device_serial() const;
  void clear_get_device_serial();
  static const int kGetDeviceSerialFieldNumber = 29;
  bool get_device_serial() const;
  void set_get_device_serial(bool value);

  // optional bool get_board_info = 30;
  bool has_get_board_info() const;
  void clear_get_board_info();
  static const int kGetBoardInfoFieldNumber = 30;
  bool get_board_info() const;
  void set_get_board_info(bool value);

  // optional bool get_protocol_version = 31;
  bool has_get_protocol_version() const;
  void clear_get_protocol_version();
  static const int kGetProtocolVersionFieldNumber = 31;
  bool get_protocol_version() const;
  void set_get_protocol_version(bool value);

  // optional bool get_fw_version = 32;
  bool has_get_fw_version() const;
  void clear_get_fw_version();
  static const int kGetFwVersionFieldNumber = 32;
  bool get_fw_version() const;
  void set_get_fw_version(bool value);

  // optional bool get_hw_version = 33;
  bool has_get_hw_version() const;
  void clear_get_hw_version();
  static const int kGetHwVersionFieldNumber = 33;
  bool get_hw_version() const;
  void set_get_hw_version(bool value);

  // optional bool get_mfg_date = 34;
  bool has_get_mfg_date() const;
  void clear_get_mfg_date();
  static const int kGetMfgDateFieldNumber = 34;
  bool get_mfg_date() const;
  void set_get_mfg_date(bool value);

  // optional bool get_vfmotor_states = 35;
  bool has_get_vfmotor_states() const;
  void clear_get_vfmotor_states();
  static const int kGetVfmotorStatesFieldNumber = 35;
  bool get_vfmotor_states() const;
  void set_get_vfmotor_states(bool value);

  // optional bool get_vfmotor_cfgs = 36;
  bool has_get_vfmotor_cfgs() const;
  void clear_get_vfmotor_cfgs();
  static const int kGetVfmotorCfgsFieldNumber = 36;
  bool get_vfmotor_cfgs() const;
  void set_get_vfmotor_cfgs(bool value);

  void clear_Cmd();
  CmdCase Cmd_case() const;
  // @@protoc_insertion_point(class_scope:frl.device.wireformat.ToDeviceMsg)
 private:
  void set_has_cmd_id();
  void clear_has_cmd_id();
  void set_has_set_display_cfgs();
  void set_has_set_gyro_cfgs();
  void set_has_set_acc_cfgs();
  void set_has_set_baro_cfgs();
  void set_has_set_fan_cfgs();
  void set_has_set_timer_cfg();
  void set_has_set_trig_cfg();
  void set_has_set_sync_cfg();
  void set_has_set_serial();
  void set_has_set_vfmotor_cfgs();
  void set_has_set_vfmotor_cmd();
  void set_has_get_display_cfgs();
  void set_has_get_gyro_cfgs();
  void set_has_get_acc_cfgs();
  void set_has_get_baro_cfgs();
  void set_has_get_fans_cfgs();
  void set_has_get_timer_cfg();
  void set_has_get_trig_cfg();
  void set_has_get_sync_cfg();
  void set_has_get_device_serial();
  void set_has_get_board_info();
  void set_has_get_protocol_version();
  void set_has_get_fw_version();
  void set_has_get_hw_version();
  void set_has_get_mfg_date();
  void set_has_get_vfmotor_states();
  void set_has_get_vfmotor_cfgs();

  inline bool has_Cmd() const;
  inline void clear_has_Cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 cmd_id_;
  union CmdUnion {
    CmdUnion() {}
    ::frl::device::wireformat::DispDriverCfgs* set_display_cfgs_;
    ::frl::device::wireformat::GyroCfgs* set_gyro_cfgs_;
    ::frl::device::wireformat::AccCfgs* set_acc_cfgs_;
    ::frl::device::wireformat::BaroCfgs* set_baro_cfgs_;
    ::frl::device::wireformat::FanCfgs* set_fan_cfgs_;
    ::frl::device::wireformat::TimerCfg* set_timer_cfg_;
    ::frl::device::wireformat::TrigCfg* set_trig_cfg_;
    ::frl::device::wireformat::SyncCfg* set_sync_cfg_;
    ::frl::device::wireformat::DeviceSerial* set_serial_;
    ::frl::device::wireformat::VFMotorCfgs* set_vfmotor_cfgs_;
    ::frl::device::wireformat::VFMotorCmds* set_vfmotor_cmd_;
    bool get_display_cfgs_;
    bool get_gyro_cfgs_;
    bool get_acc_cfgs_;
    bool get_baro_cfgs_;
    bool get_fans_cfgs_;
    bool get_timer_cfg_;
    bool get_trig_cfg_;
    bool get_sync_cfg_;
    bool get_device_serial_;
    bool get_board_info_;
    bool get_protocol_version_;
    bool get_fw_version_;
    bool get_hw_version_;
    bool get_mfg_date_;
    bool get_vfmotor_states_;
    bool get_vfmotor_cfgs_;
  } Cmd_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplyMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.ReplyMsg) */ {
 public:
  ReplyMsg();
  virtual ~ReplyMsg();

  ReplyMsg(const ReplyMsg& from);

  inline ReplyMsg& operator=(const ReplyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplyMsg(ReplyMsg&& from) noexcept
    : ReplyMsg() {
    *this = ::std::move(from);
  }

  inline ReplyMsg& operator=(ReplyMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplyMsg* internal_default_instance() {
    return reinterpret_cast<const ReplyMsg*>(
               &_ReplyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ReplyMsg* other);
  friend void swap(ReplyMsg& a, ReplyMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplyMsg* New() const final {
    return CreateMaybeMessage<ReplyMsg>(NULL);
  }

  ReplyMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplyMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplyMsg& from);
  void MergeFrom(const ReplyMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.GyroCfg gyros = 3;
  int gyros_size() const;
  void clear_gyros();
  static const int kGyrosFieldNumber = 3;
  ::frl::device::wireformat::GyroCfg* mutable_gyros(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >*
      mutable_gyros();
  const ::frl::device::wireformat::GyroCfg& gyros(int index) const;
  ::frl::device::wireformat::GyroCfg* add_gyros();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >&
      gyros() const;

  // repeated .frl.device.wireformat.AccCfg accs = 4;
  int accs_size() const;
  void clear_accs();
  static const int kAccsFieldNumber = 4;
  ::frl::device::wireformat::AccCfg* mutable_accs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >*
      mutable_accs();
  const ::frl::device::wireformat::AccCfg& accs(int index) const;
  ::frl::device::wireformat::AccCfg* add_accs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >&
      accs() const;

  // repeated .frl.device.wireformat.BaroCfg baro = 5;
  int baro_size() const;
  void clear_baro();
  static const int kBaroFieldNumber = 5;
  ::frl::device::wireformat::BaroCfg* mutable_baro(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >*
      mutable_baro();
  const ::frl::device::wireformat::BaroCfg& baro(int index) const;
  ::frl::device::wireformat::BaroCfg* add_baro();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >&
      baro() const;

  // repeated .frl.device.wireformat.FanCfg fans = 6;
  int fans_size() const;
  void clear_fans();
  static const int kFansFieldNumber = 6;
  ::frl::device::wireformat::FanCfg* mutable_fans(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >*
      mutable_fans();
  const ::frl::device::wireformat::FanCfg& fans(int index) const;
  ::frl::device::wireformat::FanCfg* add_fans();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >&
      fans() const;

  // repeated .frl.device.wireformat.TrigCfg trigs = 8;
  int trigs_size() const;
  void clear_trigs();
  static const int kTrigsFieldNumber = 8;
  ::frl::device::wireformat::TrigCfg* mutable_trigs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigCfg >*
      mutable_trigs();
  const ::frl::device::wireformat::TrigCfg& trigs(int index) const;
  ::frl::device::wireformat::TrigCfg* add_trigs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigCfg >&
      trigs() const;

  // repeated .frl.device.wireformat.SyncCfg syncs = 9;
  int syncs_size() const;
  void clear_syncs();
  static const int kSyncsFieldNumber = 9;
  ::frl::device::wireformat::SyncCfg* mutable_syncs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncCfg >*
      mutable_syncs();
  const ::frl::device::wireformat::SyncCfg& syncs(int index) const;
  ::frl::device::wireformat::SyncCfg* add_syncs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncCfg >&
      syncs() const;

  // repeated .frl.device.wireformat.VFMotor vfs = 16;
  int vfs_size() const;
  void clear_vfs();
  static const int kVfsFieldNumber = 16;
  ::frl::device::wireformat::VFMotor* mutable_vfs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >*
      mutable_vfs();
  const ::frl::device::wireformat::VFMotor& vfs(int index) const;
  ::frl::device::wireformat::VFMotor* add_vfs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >&
      vfs() const;

  // repeated .frl.device.wireformat.VFMotorCfgs vfmotor_cfg = 18;
  int vfmotor_cfg_size() const;
  void clear_vfmotor_cfg();
  static const int kVfmotorCfgFieldNumber = 18;
  ::frl::device::wireformat::VFMotorCfgs* mutable_vfmotor_cfg(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfgs >*
      mutable_vfmotor_cfg();
  const ::frl::device::wireformat::VFMotorCfgs& vfmotor_cfg(int index) const;
  ::frl::device::wireformat::VFMotorCfgs* add_vfmotor_cfg();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfgs >&
      vfmotor_cfg() const;

  // optional .frl.device.wireformat.TimerCfg timer = 7;
  bool has_timer() const;
  void clear_timer();
  static const int kTimerFieldNumber = 7;
  private:
  const ::frl::device::wireformat::TimerCfg& _internal_timer() const;
  public:
  const ::frl::device::wireformat::TimerCfg& timer() const;
  ::frl::device::wireformat::TimerCfg* release_timer();
  ::frl::device::wireformat::TimerCfg* mutable_timer();
  void set_allocated_timer(::frl::device::wireformat::TimerCfg* timer);

  // optional .frl.device.wireformat.DeviceInfo info = 10;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 10;
  private:
  const ::frl::device::wireformat::DeviceInfo& _internal_info() const;
  public:
  const ::frl::device::wireformat::DeviceInfo& info() const;
  ::frl::device::wireformat::DeviceInfo* release_info();
  ::frl::device::wireformat::DeviceInfo* mutable_info();
  void set_allocated_info(::frl::device::wireformat::DeviceInfo* info);

  // optional .frl.device.wireformat.FwVersion fw_ver = 11;
  bool has_fw_ver() const;
  void clear_fw_ver();
  static const int kFwVerFieldNumber = 11;
  private:
  const ::frl::device::wireformat::FwVersion& _internal_fw_ver() const;
  public:
  const ::frl::device::wireformat::FwVersion& fw_ver() const;
  ::frl::device::wireformat::FwVersion* release_fw_ver();
  ::frl::device::wireformat::FwVersion* mutable_fw_ver();
  void set_allocated_fw_ver(::frl::device::wireformat::FwVersion* fw_ver);

  // optional .frl.device.wireformat.HwVersion hw_ver = 12;
  bool has_hw_ver() const;
  void clear_hw_ver();
  static const int kHwVerFieldNumber = 12;
  private:
  const ::frl::device::wireformat::HwVersion& _internal_hw_ver() const;
  public:
  const ::frl::device::wireformat::HwVersion& hw_ver() const;
  ::frl::device::wireformat::HwVersion* release_hw_ver();
  ::frl::device::wireformat::HwVersion* mutable_hw_ver();
  void set_allocated_hw_ver(::frl::device::wireformat::HwVersion* hw_ver);

  // optional .frl.device.wireformat.ProtocolVersion p_ver = 13;
  bool has_p_ver() const;
  void clear_p_ver();
  static const int kPVerFieldNumber = 13;
  private:
  const ::frl::device::wireformat::ProtocolVersion& _internal_p_ver() const;
  public:
  const ::frl::device::wireformat::ProtocolVersion& p_ver() const;
  ::frl::device::wireformat::ProtocolVersion* release_p_ver();
  ::frl::device::wireformat::ProtocolVersion* mutable_p_ver();
  void set_allocated_p_ver(::frl::device::wireformat::ProtocolVersion* p_ver);

  // optional .frl.device.wireformat.MfgDate mfg_date = 14;
  bool has_mfg_date() const;
  void clear_mfg_date();
  static const int kMfgDateFieldNumber = 14;
  private:
  const ::frl::device::wireformat::MfgDate& _internal_mfg_date() const;
  public:
  const ::frl::device::wireformat::MfgDate& mfg_date() const;
  ::frl::device::wireformat::MfgDate* release_mfg_date();
  ::frl::device::wireformat::MfgDate* mutable_mfg_date();
  void set_allocated_mfg_date(::frl::device::wireformat::MfgDate* mfg_date);

  // optional .frl.device.wireformat.DeviceSerial serial = 15;
  bool has_serial() const;
  void clear_serial();
  static const int kSerialFieldNumber = 15;
  private:
  const ::frl::device::wireformat::DeviceSerial& _internal_serial() const;
  public:
  const ::frl::device::wireformat::DeviceSerial& serial() const;
  ::frl::device::wireformat::DeviceSerial* release_serial();
  ::frl::device::wireformat::DeviceSerial* mutable_serial();
  void set_allocated_serial(::frl::device::wireformat::DeviceSerial* serial);

  // optional .frl.device.wireformat.DispDriverCfgs display = 17;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 17;
  private:
  const ::frl::device::wireformat::DispDriverCfgs& _internal_display() const;
  public:
  const ::frl::device::wireformat::DispDriverCfgs& display() const;
  ::frl::device::wireformat::DispDriverCfgs* release_display();
  ::frl::device::wireformat::DispDriverCfgs* mutable_display();
  void set_allocated_display(::frl::device::wireformat::DispDriverCfgs* display);

  // required uint32 cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmd_id() const;
  void set_cmd_id(::google::protobuf::uint32 value);

  // optional bool ack = 2;
  bool has_ack() const;
  void clear_ack();
  static const int kAckFieldNumber = 2;
  bool ack() const;
  void set_ack(bool value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.ReplyMsg)
 private:
  void set_has_cmd_id();
  void clear_has_cmd_id();
  void set_has_ack();
  void clear_has_ack();
  void set_has_timer();
  void clear_has_timer();
  void set_has_info();
  void clear_has_info();
  void set_has_fw_ver();
  void clear_has_fw_ver();
  void set_has_hw_ver();
  void clear_has_hw_ver();
  void set_has_p_ver();
  void clear_has_p_ver();
  void set_has_mfg_date();
  void clear_has_mfg_date();
  void set_has_serial();
  void clear_has_serial();
  void set_has_display();
  void clear_has_display();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg > gyros_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg > accs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg > baro_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg > fans_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigCfg > trigs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncCfg > syncs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor > vfs_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfgs > vfmotor_cfg_;
  ::frl::device::wireformat::TimerCfg* timer_;
  ::frl::device::wireformat::DeviceInfo* info_;
  ::frl::device::wireformat::FwVersion* fw_ver_;
  ::frl::device::wireformat::HwVersion* hw_ver_;
  ::frl::device::wireformat::ProtocolVersion* p_ver_;
  ::frl::device::wireformat::MfgDate* mfg_date_;
  ::frl::device::wireformat::DeviceSerial* serial_;
  ::frl::device::wireformat::DispDriverCfgs* display_;
  ::google::protobuf::uint32 cmd_id_;
  bool ack_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DispDriverCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.DispDriverCfg) */ {
 public:
  DispDriverCfg();
  virtual ~DispDriverCfg();

  DispDriverCfg(const DispDriverCfg& from);

  inline DispDriverCfg& operator=(const DispDriverCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DispDriverCfg(DispDriverCfg&& from) noexcept
    : DispDriverCfg() {
    *this = ::std::move(from);
  }

  inline DispDriverCfg& operator=(DispDriverCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DispDriverCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DispDriverCfg* internal_default_instance() {
    return reinterpret_cast<const DispDriverCfg*>(
               &_DispDriverCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DispDriverCfg* other);
  friend void swap(DispDriverCfg& a, DispDriverCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DispDriverCfg* New() const final {
    return CreateMaybeMessage<DispDriverCfg>(NULL);
  }

  DispDriverCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DispDriverCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DispDriverCfg& from);
  void MergeFrom(const DispDriverCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispDriverCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DispDriverCfg_DispDriverMode DispDriverMode;
  static const DispDriverMode GLOBAL =
    DispDriverCfg_DispDriverMode_GLOBAL;
  static const DispDriverMode ROLLING =
    DispDriverCfg_DispDriverMode_ROLLING;
  static inline bool DispDriverMode_IsValid(int value) {
    return DispDriverCfg_DispDriverMode_IsValid(value);
  }
  static const DispDriverMode DispDriverMode_MIN =
    DispDriverCfg_DispDriverMode_DispDriverMode_MIN;
  static const DispDriverMode DispDriverMode_MAX =
    DispDriverCfg_DispDriverMode_DispDriverMode_MAX;
  static const int DispDriverMode_ARRAYSIZE =
    DispDriverCfg_DispDriverMode_DispDriverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DispDriverMode_descriptor() {
    return DispDriverCfg_DispDriverMode_descriptor();
  }
  static inline const ::std::string& DispDriverMode_Name(DispDriverMode value) {
    return DispDriverCfg_DispDriverMode_Name(value);
  }
  static inline bool DispDriverMode_Parse(const ::std::string& name,
      DispDriverMode* value) {
    return DispDriverCfg_DispDriverMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required bool active = 2;
  bool has_active() const;
  void clear_active();
  static const int kActiveFieldNumber = 2;
  bool active() const;
  void set_active(bool value);

  // optional uint32 brightness = 3;
  bool has_brightness() const;
  void clear_brightness();
  static const int kBrightnessFieldNumber = 3;
  ::google::protobuf::uint32 brightness() const;
  void set_brightness(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.DispDriverCfg.DispDriverMode mode = 4;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::frl::device::wireformat::DispDriverCfg_DispDriverMode mode() const;
  void set_mode(::frl::device::wireformat::DispDriverCfg_DispDriverMode value);

  // optional uint32 persistence = 5;
  bool has_persistence() const;
  void clear_persistence();
  static const int kPersistenceFieldNumber = 5;
  ::google::protobuf::uint32 persistence() const;
  void set_persistence(::google::protobuf::uint32 value);

  // optional uint32 on_offset = 6;
  bool has_on_offset() const;
  void clear_on_offset();
  static const int kOnOffsetFieldNumber = 6;
  ::google::protobuf::uint32 on_offset() const;
  void set_on_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.DispDriverCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_active();
  void clear_has_active();
  void set_has_brightness();
  void clear_has_brightness();
  void set_has_mode();
  void clear_has_mode();
  void set_has_persistence();
  void clear_has_persistence();
  void set_has_on_offset();
  void clear_has_on_offset();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  bool active_;
  ::google::protobuf::uint32 brightness_;
  int mode_;
  ::google::protobuf::uint32 persistence_;
  ::google::protobuf::uint32 on_offset_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DispDriverCfgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.DispDriverCfgs) */ {
 public:
  DispDriverCfgs();
  virtual ~DispDriverCfgs();

  DispDriverCfgs(const DispDriverCfgs& from);

  inline DispDriverCfgs& operator=(const DispDriverCfgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DispDriverCfgs(DispDriverCfgs&& from) noexcept
    : DispDriverCfgs() {
    *this = ::std::move(from);
  }

  inline DispDriverCfgs& operator=(DispDriverCfgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DispDriverCfgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DispDriverCfgs* internal_default_instance() {
    return reinterpret_cast<const DispDriverCfgs*>(
               &_DispDriverCfgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DispDriverCfgs* other);
  friend void swap(DispDriverCfgs& a, DispDriverCfgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DispDriverCfgs* New() const final {
    return CreateMaybeMessage<DispDriverCfgs>(NULL);
  }

  DispDriverCfgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DispDriverCfgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DispDriverCfgs& from);
  void MergeFrom(const DispDriverCfgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispDriverCfgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.DispDriverCfg array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::DispDriverCfg* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::DispDriverCfg >*
      mutable_array();
  const ::frl::device::wireformat::DispDriverCfg& array(int index) const;
  ::frl::device::wireformat::DispDriverCfg* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::DispDriverCfg >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.DispDriverCfgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::DispDriverCfg > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GyroCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.GyroCfg) */ {
 public:
  GyroCfg();
  virtual ~GyroCfg();

  GyroCfg(const GyroCfg& from);

  inline GyroCfg& operator=(const GyroCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GyroCfg(GyroCfg&& from) noexcept
    : GyroCfg() {
    *this = ::std::move(from);
  }

  inline GyroCfg& operator=(GyroCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GyroCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GyroCfg* internal_default_instance() {
    return reinterpret_cast<const GyroCfg*>(
               &_GyroCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(GyroCfg* other);
  friend void swap(GyroCfg& a, GyroCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GyroCfg* New() const final {
    return CreateMaybeMessage<GyroCfg>(NULL);
  }

  GyroCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GyroCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GyroCfg& from);
  void MergeFrom(const GyroCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GyroCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional bool streaming = 2;
  bool has_streaming() const;
  void clear_streaming();
  static const int kStreamingFieldNumber = 2;
  bool streaming() const;
  void set_streaming(bool value);

  // optional uint32 odr_hz = 3;
  bool has_odr_hz() const;
  void clear_odr_hz();
  static const int kOdrHzFieldNumber = 3;
  ::google::protobuf::uint32 odr_hz() const;
  void set_odr_hz(::google::protobuf::uint32 value);

  // optional uint32 range_dps = 4;
  bool has_range_dps() const;
  void clear_range_dps();
  static const int kRangeDpsFieldNumber = 4;
  ::google::protobuf::uint32 range_dps() const;
  void set_range_dps(::google::protobuf::uint32 value);

  // optional uint32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.GyroCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_streaming();
  void clear_has_streaming();
  void set_has_odr_hz();
  void clear_has_odr_hz();
  void set_has_range_dps();
  void clear_has_range_dps();
  void set_has_mode();
  void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  bool streaming_;
  ::google::protobuf::uint32 odr_hz_;
  ::google::protobuf::uint32 range_dps_;
  ::google::protobuf::uint32 mode_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GyroCfgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.GyroCfgs) */ {
 public:
  GyroCfgs();
  virtual ~GyroCfgs();

  GyroCfgs(const GyroCfgs& from);

  inline GyroCfgs& operator=(const GyroCfgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GyroCfgs(GyroCfgs&& from) noexcept
    : GyroCfgs() {
    *this = ::std::move(from);
  }

  inline GyroCfgs& operator=(GyroCfgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GyroCfgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GyroCfgs* internal_default_instance() {
    return reinterpret_cast<const GyroCfgs*>(
               &_GyroCfgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GyroCfgs* other);
  friend void swap(GyroCfgs& a, GyroCfgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GyroCfgs* New() const final {
    return CreateMaybeMessage<GyroCfgs>(NULL);
  }

  GyroCfgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GyroCfgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GyroCfgs& from);
  void MergeFrom(const GyroCfgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GyroCfgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.GyroCfg array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::GyroCfg* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >*
      mutable_array();
  const ::frl::device::wireformat::GyroCfg& array(int index) const;
  ::frl::device::wireformat::GyroCfg* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.GyroCfgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.AccCfg) */ {
 public:
  AccCfg();
  virtual ~AccCfg();

  AccCfg(const AccCfg& from);

  inline AccCfg& operator=(const AccCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccCfg(AccCfg&& from) noexcept
    : AccCfg() {
    *this = ::std::move(from);
  }

  inline AccCfg& operator=(AccCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccCfg* internal_default_instance() {
    return reinterpret_cast<const AccCfg*>(
               &_AccCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(AccCfg* other);
  friend void swap(AccCfg& a, AccCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccCfg* New() const final {
    return CreateMaybeMessage<AccCfg>(NULL);
  }

  AccCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccCfg& from);
  void MergeFrom(const AccCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional bool streaming = 2;
  bool has_streaming() const;
  void clear_streaming();
  static const int kStreamingFieldNumber = 2;
  bool streaming() const;
  void set_streaming(bool value);

  // optional uint32 odr_hz = 3;
  bool has_odr_hz() const;
  void clear_odr_hz();
  static const int kOdrHzFieldNumber = 3;
  ::google::protobuf::uint32 odr_hz() const;
  void set_odr_hz(::google::protobuf::uint32 value);

  // optional uint32 range_g = 4;
  bool has_range_g() const;
  void clear_range_g();
  static const int kRangeGFieldNumber = 4;
  ::google::protobuf::uint32 range_g() const;
  void set_range_g(::google::protobuf::uint32 value);

  // optional uint32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.AccCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_streaming();
  void clear_has_streaming();
  void set_has_odr_hz();
  void clear_has_odr_hz();
  void set_has_range_g();
  void clear_has_range_g();
  void set_has_mode();
  void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  bool streaming_;
  ::google::protobuf::uint32 odr_hz_;
  ::google::protobuf::uint32 range_g_;
  ::google::protobuf::uint32 mode_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccCfgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.AccCfgs) */ {
 public:
  AccCfgs();
  virtual ~AccCfgs();

  AccCfgs(const AccCfgs& from);

  inline AccCfgs& operator=(const AccCfgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccCfgs(AccCfgs&& from) noexcept
    : AccCfgs() {
    *this = ::std::move(from);
  }

  inline AccCfgs& operator=(AccCfgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccCfgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccCfgs* internal_default_instance() {
    return reinterpret_cast<const AccCfgs*>(
               &_AccCfgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(AccCfgs* other);
  friend void swap(AccCfgs& a, AccCfgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccCfgs* New() const final {
    return CreateMaybeMessage<AccCfgs>(NULL);
  }

  AccCfgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccCfgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccCfgs& from);
  void MergeFrom(const AccCfgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccCfgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.AccCfg array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::AccCfg* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >*
      mutable_array();
  const ::frl::device::wireformat::AccCfg& array(int index) const;
  ::frl::device::wireformat::AccCfg* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.AccCfgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaroCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.BaroCfg) */ {
 public:
  BaroCfg();
  virtual ~BaroCfg();

  BaroCfg(const BaroCfg& from);

  inline BaroCfg& operator=(const BaroCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaroCfg(BaroCfg&& from) noexcept
    : BaroCfg() {
    *this = ::std::move(from);
  }

  inline BaroCfg& operator=(BaroCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaroCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaroCfg* internal_default_instance() {
    return reinterpret_cast<const BaroCfg*>(
               &_BaroCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(BaroCfg* other);
  friend void swap(BaroCfg& a, BaroCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaroCfg* New() const final {
    return CreateMaybeMessage<BaroCfg>(NULL);
  }

  BaroCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BaroCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BaroCfg& from);
  void MergeFrom(const BaroCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaroCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 raw = 3;
  int raw_size() const;
  void clear_raw();
  static const int kRawFieldNumber = 3;
  ::google::protobuf::uint32 raw(int index) const;
  void set_raw(int index, ::google::protobuf::uint32 value);
  void add_raw(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      raw() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_raw();

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional bool streaming = 2;
  bool has_streaming() const;
  void clear_streaming();
  static const int kStreamingFieldNumber = 2;
  bool streaming() const;
  void set_streaming(bool value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.BaroCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_streaming();
  void clear_has_streaming();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > raw_;
  ::google::protobuf::uint32 id_;
  bool streaming_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaroCfgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.BaroCfgs) */ {
 public:
  BaroCfgs();
  virtual ~BaroCfgs();

  BaroCfgs(const BaroCfgs& from);

  inline BaroCfgs& operator=(const BaroCfgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaroCfgs(BaroCfgs&& from) noexcept
    : BaroCfgs() {
    *this = ::std::move(from);
  }

  inline BaroCfgs& operator=(BaroCfgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaroCfgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaroCfgs* internal_default_instance() {
    return reinterpret_cast<const BaroCfgs*>(
               &_BaroCfgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(BaroCfgs* other);
  friend void swap(BaroCfgs& a, BaroCfgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaroCfgs* New() const final {
    return CreateMaybeMessage<BaroCfgs>(NULL);
  }

  BaroCfgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BaroCfgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BaroCfgs& from);
  void MergeFrom(const BaroCfgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaroCfgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.BaroCfg array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::BaroCfg* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >*
      mutable_array();
  const ::frl::device::wireformat::BaroCfg& array(int index) const;
  ::frl::device::wireformat::BaroCfg* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.BaroCfgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FanCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.FanCfg) */ {
 public:
  FanCfg();
  virtual ~FanCfg();

  FanCfg(const FanCfg& from);

  inline FanCfg& operator=(const FanCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FanCfg(FanCfg&& from) noexcept
    : FanCfg() {
    *this = ::std::move(from);
  }

  inline FanCfg& operator=(FanCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FanCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FanCfg* internal_default_instance() {
    return reinterpret_cast<const FanCfg*>(
               &_FanCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(FanCfg* other);
  friend void swap(FanCfg& a, FanCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FanCfg* New() const final {
    return CreateMaybeMessage<FanCfg>(NULL);
  }

  FanCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FanCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FanCfg& from);
  void MergeFrom(const FanCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FanCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional bool active = 2;
  bool has_active() const;
  void clear_active();
  static const int kActiveFieldNumber = 2;
  bool active() const;
  void set_active(bool value);

  // optional bool streaming = 3;
  bool has_streaming() const;
  void clear_streaming();
  static const int kStreamingFieldNumber = 3;
  bool streaming() const;
  void set_streaming(bool value);

  // optional uint32 speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.FanCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_active();
  void clear_has_active();
  void set_has_streaming();
  void clear_has_streaming();
  void set_has_speed();
  void clear_has_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  bool active_;
  bool streaming_;
  ::google::protobuf::uint32 speed_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FanCfgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.FanCfgs) */ {
 public:
  FanCfgs();
  virtual ~FanCfgs();

  FanCfgs(const FanCfgs& from);

  inline FanCfgs& operator=(const FanCfgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FanCfgs(FanCfgs&& from) noexcept
    : FanCfgs() {
    *this = ::std::move(from);
  }

  inline FanCfgs& operator=(FanCfgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FanCfgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FanCfgs* internal_default_instance() {
    return reinterpret_cast<const FanCfgs*>(
               &_FanCfgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(FanCfgs* other);
  friend void swap(FanCfgs& a, FanCfgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FanCfgs* New() const final {
    return CreateMaybeMessage<FanCfgs>(NULL);
  }

  FanCfgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FanCfgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FanCfgs& from);
  void MergeFrom(const FanCfgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FanCfgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.FanCfg array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::FanCfg* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >*
      mutable_array();
  const ::frl::device::wireformat::FanCfg& array(int index) const;
  ::frl::device::wireformat::FanCfg* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.FanCfgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimerCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.TimerCfg) */ {
 public:
  TimerCfg();
  virtual ~TimerCfg();

  TimerCfg(const TimerCfg& from);

  inline TimerCfg& operator=(const TimerCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimerCfg(TimerCfg&& from) noexcept
    : TimerCfg() {
    *this = ::std::move(from);
  }

  inline TimerCfg& operator=(TimerCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimerCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerCfg* internal_default_instance() {
    return reinterpret_cast<const TimerCfg*>(
               &_TimerCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(TimerCfg* other);
  friend void swap(TimerCfg& a, TimerCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimerCfg* New() const final {
    return CreateMaybeMessage<TimerCfg>(NULL);
  }

  TimerCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimerCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimerCfg& from);
  void MergeFrom(const TimerCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TimerCfg_Source Source;
  static const Source UNKNOWN =
    TimerCfg_Source_UNKNOWN;
  static const Source INTERNAL =
    TimerCfg_Source_INTERNAL;
  static const Source EXTERNAL =
    TimerCfg_Source_EXTERNAL;
  static inline bool Source_IsValid(int value) {
    return TimerCfg_Source_IsValid(value);
  }
  static const Source Source_MIN =
    TimerCfg_Source_Source_MIN;
  static const Source Source_MAX =
    TimerCfg_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    TimerCfg_Source_Source_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Source_descriptor() {
    return TimerCfg_Source_descriptor();
  }
  static inline const ::std::string& Source_Name(Source value) {
    return TimerCfg_Source_Name(value);
  }
  static inline bool Source_Parse(const ::std::string& name,
      Source* value) {
    return TimerCfg_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .frl.device.wireformat.TaiTime time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::frl::device::wireformat::TaiTime& _internal_time() const;
  public:
  const ::frl::device::wireformat::TaiTime& time() const;
  ::frl::device::wireformat::TaiTime* release_time();
  ::frl::device::wireformat::TaiTime* mutable_time();
  void set_allocated_time(::frl::device::wireformat::TaiTime* time);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.TimerCfg.Source source = 2;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::frl::device::wireformat::TimerCfg_Source source() const;
  void set_source(::frl::device::wireformat::TimerCfg_Source value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.TimerCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_source();
  void clear_has_source();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::frl::device::wireformat::TaiTime* time_;
  ::google::protobuf::uint32 id_;
  int source_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrigCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.TrigCfg) */ {
 public:
  TrigCfg();
  virtual ~TrigCfg();

  TrigCfg(const TrigCfg& from);

  inline TrigCfg& operator=(const TrigCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrigCfg(TrigCfg&& from) noexcept
    : TrigCfg() {
    *this = ::std::move(from);
  }

  inline TrigCfg& operator=(TrigCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrigCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrigCfg* internal_default_instance() {
    return reinterpret_cast<const TrigCfg*>(
               &_TrigCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(TrigCfg* other);
  friend void swap(TrigCfg& a, TrigCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrigCfg* New() const final {
    return CreateMaybeMessage<TrigCfg>(NULL);
  }

  TrigCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrigCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrigCfg& from);
  void MergeFrom(const TrigCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrigCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrigCfg_Action Action;
  static const Action START_ALL_ACTIVE =
    TrigCfg_Action_START_ALL_ACTIVE;
  static const Action STOP_ALL_ACTIVE =
    TrigCfg_Action_STOP_ALL_ACTIVE;
  static inline bool Action_IsValid(int value) {
    return TrigCfg_Action_IsValid(value);
  }
  static const Action Action_MIN =
    TrigCfg_Action_Action_MIN;
  static const Action Action_MAX =
    TrigCfg_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    TrigCfg_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return TrigCfg_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return TrigCfg_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return TrigCfg_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.TrigChCfg trig_ch_cfgs = 2;
  int trig_ch_cfgs_size() const;
  void clear_trig_ch_cfgs();
  static const int kTrigChCfgsFieldNumber = 2;
  ::frl::device::wireformat::TrigChCfg* mutable_trig_ch_cfgs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigChCfg >*
      mutable_trig_ch_cfgs();
  const ::frl::device::wireformat::TrigChCfg& trig_ch_cfgs(int index) const;
  ::frl::device::wireformat::TrigChCfg* add_trig_ch_cfgs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigChCfg >&
      trig_ch_cfgs() const;

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.TrigCfg.Action action = 3;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::frl::device::wireformat::TrigCfg_Action action() const;
  void set_action(::frl::device::wireformat::TrigCfg_Action value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.TrigCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_action();
  void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigChCfg > trig_ch_cfgs_;
  ::google::protobuf::uint32 id_;
  int action_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrigChCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.TrigChCfg) */ {
 public:
  TrigChCfg();
  virtual ~TrigChCfg();

  TrigChCfg(const TrigChCfg& from);

  inline TrigChCfg& operator=(const TrigChCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrigChCfg(TrigChCfg&& from) noexcept
    : TrigChCfg() {
    *this = ::std::move(from);
  }

  inline TrigChCfg& operator=(TrigChCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrigChCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrigChCfg* internal_default_instance() {
    return reinterpret_cast<const TrigChCfg*>(
               &_TrigChCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(TrigChCfg* other);
  friend void swap(TrigChCfg& a, TrigChCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrigChCfg* New() const final {
    return CreateMaybeMessage<TrigChCfg>(NULL);
  }

  TrigChCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrigChCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrigChCfg& from);
  void MergeFrom(const TrigChCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrigChCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional uint32 period_us = 2;
  bool has_period_us() const;
  void clear_period_us();
  static const int kPeriodUsFieldNumber = 2;
  ::google::protobuf::uint32 period_us() const;
  void set_period_us(::google::protobuf::uint32 value);

  // optional uint32 offset_us = 3;
  bool has_offset_us() const;
  void clear_offset_us();
  static const int kOffsetUsFieldNumber = 3;
  ::google::protobuf::uint32 offset_us() const;
  void set_offset_us(::google::protobuf::uint32 value);

  // optional uint32 master = 4;
  bool has_master() const;
  void clear_master();
  static const int kMasterFieldNumber = 4;
  ::google::protobuf::uint32 master() const;
  void set_master(::google::protobuf::uint32 value);

  // optional bool active = 5;
  bool has_active() const;
  void clear_active();
  static const int kActiveFieldNumber = 5;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.TrigChCfg)
 private:
  void set_has_channel();
  void clear_has_channel();
  void set_has_period_us();
  void clear_has_period_us();
  void set_has_offset_us();
  void clear_has_offset_us();
  void set_has_master();
  void clear_has_master();
  void set_has_active();
  void clear_has_active();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 period_us_;
  ::google::protobuf::uint32 offset_us_;
  ::google::protobuf::uint32 master_;
  bool active_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.SyncCfg) */ {
 public:
  SyncCfg();
  virtual ~SyncCfg();

  SyncCfg(const SyncCfg& from);

  inline SyncCfg& operator=(const SyncCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncCfg(SyncCfg&& from) noexcept
    : SyncCfg() {
    *this = ::std::move(from);
  }

  inline SyncCfg& operator=(SyncCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncCfg* internal_default_instance() {
    return reinterpret_cast<const SyncCfg*>(
               &_SyncCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(SyncCfg* other);
  friend void swap(SyncCfg& a, SyncCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncCfg* New() const final {
    return CreateMaybeMessage<SyncCfg>(NULL);
  }

  SyncCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncCfg& from);
  void MergeFrom(const SyncCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SyncCfg_Action Action;
  static const Action START_ALL_ACTIVE =
    SyncCfg_Action_START_ALL_ACTIVE;
  static const Action STOP_ALL_ACTIVE =
    SyncCfg_Action_STOP_ALL_ACTIVE;
  static inline bool Action_IsValid(int value) {
    return SyncCfg_Action_IsValid(value);
  }
  static const Action Action_MIN =
    SyncCfg_Action_Action_MIN;
  static const Action Action_MAX =
    SyncCfg_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    SyncCfg_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return SyncCfg_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return SyncCfg_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return SyncCfg_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.SyncChCfg sync_ch_cfgs = 2;
  int sync_ch_cfgs_size() const;
  void clear_sync_ch_cfgs();
  static const int kSyncChCfgsFieldNumber = 2;
  ::frl::device::wireformat::SyncChCfg* mutable_sync_ch_cfgs(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncChCfg >*
      mutable_sync_ch_cfgs();
  const ::frl::device::wireformat::SyncChCfg& sync_ch_cfgs(int index) const;
  ::frl::device::wireformat::SyncChCfg* add_sync_ch_cfgs();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncChCfg >&
      sync_ch_cfgs() const;

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.SyncCfg.Action action = 3;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 3;
  ::frl::device::wireformat::SyncCfg_Action action() const;
  void set_action(::frl::device::wireformat::SyncCfg_Action value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.SyncCfg)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_action();
  void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncChCfg > sync_ch_cfgs_;
  ::google::protobuf::uint32 id_;
  int action_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncChCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.SyncChCfg) */ {
 public:
  SyncChCfg();
  virtual ~SyncChCfg();

  SyncChCfg(const SyncChCfg& from);

  inline SyncChCfg& operator=(const SyncChCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncChCfg(SyncChCfg&& from) noexcept
    : SyncChCfg() {
    *this = ::std::move(from);
  }

  inline SyncChCfg& operator=(SyncChCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncChCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncChCfg* internal_default_instance() {
    return reinterpret_cast<const SyncChCfg*>(
               &_SyncChCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(SyncChCfg* other);
  friend void swap(SyncChCfg& a, SyncChCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncChCfg* New() const final {
    return CreateMaybeMessage<SyncChCfg>(NULL);
  }

  SyncChCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncChCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncChCfg& from);
  void MergeFrom(const SyncChCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncChCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SyncChCfg_DIR DIR;
  static const DIR NOTACTIVE =
    SyncChCfg_DIR_NOTACTIVE;
  static const DIR RAISING =
    SyncChCfg_DIR_RAISING;
  static const DIR FALLING =
    SyncChCfg_DIR_FALLING;
  static const DIR BOTH =
    SyncChCfg_DIR_BOTH;
  static inline bool DIR_IsValid(int value) {
    return SyncChCfg_DIR_IsValid(value);
  }
  static const DIR DIR_MIN =
    SyncChCfg_DIR_DIR_MIN;
  static const DIR DIR_MAX =
    SyncChCfg_DIR_DIR_MAX;
  static const int DIR_ARRAYSIZE =
    SyncChCfg_DIR_DIR_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DIR_descriptor() {
    return SyncChCfg_DIR_descriptor();
  }
  static inline const ::std::string& DIR_Name(DIR value) {
    return SyncChCfg_DIR_Name(value);
  }
  static inline bool DIR_Parse(const ::std::string& name,
      DIR* value) {
    return SyncChCfg_DIR_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional .frl.device.wireformat.SyncChCfg.DIR dir = 2;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 2;
  ::frl::device::wireformat::SyncChCfg_DIR dir() const;
  void set_dir(::frl::device::wireformat::SyncChCfg_DIR value);

  // optional uint32 prescaler = 3;
  bool has_prescaler() const;
  void clear_prescaler();
  static const int kPrescalerFieldNumber = 3;
  ::google::protobuf::uint32 prescaler() const;
  void set_prescaler(::google::protobuf::uint32 value);

  // optional bool reset_cnt = 4;
  bool has_reset_cnt() const;
  void clear_reset_cnt();
  static const int kResetCntFieldNumber = 4;
  bool reset_cnt() const;
  void set_reset_cnt(bool value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.SyncChCfg)
 private:
  void set_has_channel();
  void clear_has_channel();
  void set_has_dir();
  void clear_has_dir();
  void set_has_prescaler();
  void clear_has_prescaler();
  void set_has_reset_cnt();
  void clear_has_reset_cnt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 channel_;
  int dir_;
  ::google::protobuf::uint32 prescaler_;
  bool reset_cnt_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VFMotorCfg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.VFMotorCfg) */ {
 public:
  VFMotorCfg();
  virtual ~VFMotorCfg();

  VFMotorCfg(const VFMotorCfg& from);

  inline VFMotorCfg& operator=(const VFMotorCfg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VFMotorCfg(VFMotorCfg&& from) noexcept
    : VFMotorCfg() {
    *this = ::std::move(from);
  }

  inline VFMotorCfg& operator=(VFMotorCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VFMotorCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VFMotorCfg* internal_default_instance() {
    return reinterpret_cast<const VFMotorCfg*>(
               &_VFMotorCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(VFMotorCfg* other);
  friend void swap(VFMotorCfg& a, VFMotorCfg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VFMotorCfg* New() const final {
    return CreateMaybeMessage<VFMotorCfg>(NULL);
  }

  VFMotorCfg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VFMotorCfg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VFMotorCfg& from);
  void MergeFrom(const VFMotorCfg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VFMotorCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float pid_P = 1;
  bool has_pid_p() const;
  void clear_pid_p();
  static const int kPidPFieldNumber = 1;
  float pid_p() const;
  void set_pid_p(float value);

  // optional float pid_I = 2;
  bool has_pid_i() const;
  void clear_pid_i();
  static const int kPidIFieldNumber = 2;
  float pid_i() const;
  void set_pid_i(float value);

  // optional float pid_D = 3;
  bool has_pid_d() const;
  void clear_pid_d();
  static const int kPidDFieldNumber = 3;
  float pid_d() const;
  void set_pid_d(float value);

  // optional float safety_margin = 4;
  bool has_safety_margin() const;
  void clear_safety_margin();
  static const int kSafetyMarginFieldNumber = 4;
  float safety_margin() const;
  void set_safety_margin(float value);

  // optional float step_limit = 5;
  bool has_step_limit() const;
  void clear_step_limit();
  static const int kStepLimitFieldNumber = 5;
  float step_limit() const;
  void set_step_limit(float value);

  // optional float accel_limit = 6;
  bool has_accel_limit() const;
  void clear_accel_limit();
  static const int kAccelLimitFieldNumber = 6;
  float accel_limit() const;
  void set_accel_limit(float value);

  // optional uint32 windup_limit = 7;
  bool has_windup_limit() const;
  void clear_windup_limit();
  static const int kWindupLimitFieldNumber = 7;
  ::google::protobuf::uint32 windup_limit() const;
  void set_windup_limit(::google::protobuf::uint32 value);

  // optional uint32 driver_current = 8;
  bool has_driver_current() const;
  void clear_driver_current();
  static const int kDriverCurrentFieldNumber = 8;
  ::google::protobuf::uint32 driver_current() const;
  void set_driver_current(::google::protobuf::uint32 value);

  // optional uint32 microstepping = 9;
  bool has_microstepping() const;
  void clear_microstepping();
  static const int kMicrosteppingFieldNumber = 9;
  ::google::protobuf::uint32 microstepping() const;
  void set_microstepping(::google::protobuf::uint32 value);

  // optional uint32 min = 10;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 10;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // optional uint32 max = 11;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 11;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // optional uint32 offset = 12;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 12;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional bool enable_pid = 13;
  bool has_enable_pid() const;
  void clear_enable_pid();
  static const int kEnablePidFieldNumber = 13;
  bool enable_pid() const;
  void set_enable_pid(bool value);

  // optional bool enable_motor = 14;
  bool has_enable_motor() const;
  void clear_enable_motor();
  static const int kEnableMotorFieldNumber = 14;
  bool enable_motor() const;
  void set_enable_motor(bool value);

  // optional bool enable_stall_cur = 15;
  bool has_enable_stall_cur() const;
  void clear_enable_stall_cur();
  static const int kEnableStallCurFieldNumber = 15;
  bool enable_stall_cur() const;
  void set_enable_stall_cur(bool value);

  // optional bool enable_flag = 16;
  bool has_enable_flag() const;
  void clear_enable_flag();
  static const int kEnableFlagFieldNumber = 16;
  bool enable_flag() const;
  void set_enable_flag(bool value);

  // optional bool streaming = 17;
  bool has_streaming() const;
  void clear_streaming();
  static const int kStreamingFieldNumber = 17;
  bool streaming() const;
  void set_streaming(bool value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.VFMotorCfg)
 private:
  void set_has_pid_p();
  void clear_has_pid_p();
  void set_has_pid_i();
  void clear_has_pid_i();
  void set_has_pid_d();
  void clear_has_pid_d();
  void set_has_safety_margin();
  void clear_has_safety_margin();
  void set_has_step_limit();
  void clear_has_step_limit();
  void set_has_accel_limit();
  void clear_has_accel_limit();
  void set_has_windup_limit();
  void clear_has_windup_limit();
  void set_has_driver_current();
  void clear_has_driver_current();
  void set_has_microstepping();
  void clear_has_microstepping();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_offset();
  void clear_has_offset();
  void set_has_enable_pid();
  void clear_has_enable_pid();
  void set_has_enable_motor();
  void clear_has_enable_motor();
  void set_has_enable_stall_cur();
  void clear_has_enable_stall_cur();
  void set_has_enable_flag();
  void clear_has_enable_flag();
  void set_has_streaming();
  void clear_has_streaming();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float pid_p_;
  float pid_i_;
  float pid_d_;
  float safety_margin_;
  float step_limit_;
  float accel_limit_;
  ::google::protobuf::uint32 windup_limit_;
  ::google::protobuf::uint32 driver_current_;
  ::google::protobuf::uint32 microstepping_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  ::google::protobuf::uint32 offset_;
  bool enable_pid_;
  bool enable_motor_;
  bool enable_stall_cur_;
  bool enable_flag_;
  bool streaming_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VFMotorCfgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.VFMotorCfgs) */ {
 public:
  VFMotorCfgs();
  virtual ~VFMotorCfgs();

  VFMotorCfgs(const VFMotorCfgs& from);

  inline VFMotorCfgs& operator=(const VFMotorCfgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VFMotorCfgs(VFMotorCfgs&& from) noexcept
    : VFMotorCfgs() {
    *this = ::std::move(from);
  }

  inline VFMotorCfgs& operator=(VFMotorCfgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VFMotorCfgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VFMotorCfgs* internal_default_instance() {
    return reinterpret_cast<const VFMotorCfgs*>(
               &_VFMotorCfgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(VFMotorCfgs* other);
  friend void swap(VFMotorCfgs& a, VFMotorCfgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VFMotorCfgs* New() const final {
    return CreateMaybeMessage<VFMotorCfgs>(NULL);
  }

  VFMotorCfgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VFMotorCfgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VFMotorCfgs& from);
  void MergeFrom(const VFMotorCfgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VFMotorCfgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.VFMotorCfg array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::VFMotorCfg* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfg >*
      mutable_array();
  const ::frl::device::wireformat::VFMotorCfg& array(int index) const;
  ::frl::device::wireformat::VFMotorCfg* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfg >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.VFMotorCfgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfg > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VFMotorCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.VFMotorCmd) */ {
 public:
  VFMotorCmd();
  virtual ~VFMotorCmd();

  VFMotorCmd(const VFMotorCmd& from);

  inline VFMotorCmd& operator=(const VFMotorCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VFMotorCmd(VFMotorCmd&& from) noexcept
    : VFMotorCmd() {
    *this = ::std::move(from);
  }

  inline VFMotorCmd& operator=(VFMotorCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VFMotorCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VFMotorCmd* internal_default_instance() {
    return reinterpret_cast<const VFMotorCmd*>(
               &_VFMotorCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(VFMotorCmd* other);
  friend void swap(VFMotorCmd& a, VFMotorCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VFMotorCmd* New() const final {
    return CreateMaybeMessage<VFMotorCmd>(NULL);
  }

  VFMotorCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VFMotorCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VFMotorCmd& from);
  void MergeFrom(const VFMotorCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VFMotorCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 set_point_cnts = 2;
  bool has_set_point_cnts() const;
  void clear_set_point_cnts();
  static const int kSetPointCntsFieldNumber = 2;
  ::google::protobuf::uint32 set_point_cnts() const;
  void set_set_point_cnts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.VFMotorCmd)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_set_point_cnts();
  void clear_has_set_point_cnts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 set_point_cnts_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VFMotorCmds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frl.device.wireformat.VFMotorCmds) */ {
 public:
  VFMotorCmds();
  virtual ~VFMotorCmds();

  VFMotorCmds(const VFMotorCmds& from);

  inline VFMotorCmds& operator=(const VFMotorCmds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VFMotorCmds(VFMotorCmds&& from) noexcept
    : VFMotorCmds() {
    *this = ::std::move(from);
  }

  inline VFMotorCmds& operator=(VFMotorCmds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VFMotorCmds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VFMotorCmds* internal_default_instance() {
    return reinterpret_cast<const VFMotorCmds*>(
               &_VFMotorCmds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(VFMotorCmds* other);
  friend void swap(VFMotorCmds& a, VFMotorCmds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VFMotorCmds* New() const final {
    return CreateMaybeMessage<VFMotorCmds>(NULL);
  }

  VFMotorCmds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VFMotorCmds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VFMotorCmds& from);
  void MergeFrom(const VFMotorCmds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VFMotorCmds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .frl.device.wireformat.VFMotorCmd array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::frl::device::wireformat::VFMotorCmd* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCmd >*
      mutable_array();
  const ::frl::device::wireformat::VFMotorCmd& array(int index) const;
  ::frl::device::wireformat::VFMotorCmd* add_array();
  const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCmd >&
      array() const;

  // @@protoc_insertion_point(class_scope:frl.device.wireformat.VFMotorCmds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCmd > array_;
  friend struct ::protobuf_p_5fwire_5fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ToHostMsg

// optional .frl.device.wireformat.EventMsg tel = 1;
inline bool ToHostMsg::has_tel() const {
  return payload_case() == kTel;
}
inline void ToHostMsg::set_has_tel() {
  _oneof_case_[0] = kTel;
}
inline void ToHostMsg::clear_tel() {
  if (has_tel()) {
    delete payload_.tel_;
    clear_has_payload();
  }
}
inline const ::frl::device::wireformat::EventMsg& ToHostMsg::_internal_tel() const {
  return *payload_.tel_;
}
inline ::frl::device::wireformat::EventMsg* ToHostMsg::release_tel() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToHostMsg.tel)
  if (has_tel()) {
    clear_has_payload();
      ::frl::device::wireformat::EventMsg* temp = payload_.tel_;
    payload_.tel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::EventMsg& ToHostMsg::tel() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToHostMsg.tel)
  return has_tel()
      ? *payload_.tel_
      : *reinterpret_cast< ::frl::device::wireformat::EventMsg*>(&::frl::device::wireformat::_EventMsg_default_instance_);
}
inline ::frl::device::wireformat::EventMsg* ToHostMsg::mutable_tel() {
  if (!has_tel()) {
    clear_payload();
    set_has_tel();
    payload_.tel_ = CreateMaybeMessage< ::frl::device::wireformat::EventMsg >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToHostMsg.tel)
  return payload_.tel_;
}

// optional .frl.device.wireformat.ReplyMsg reply = 2;
inline bool ToHostMsg::has_reply() const {
  return payload_case() == kReply;
}
inline void ToHostMsg::set_has_reply() {
  _oneof_case_[0] = kReply;
}
inline void ToHostMsg::clear_reply() {
  if (has_reply()) {
    delete payload_.reply_;
    clear_has_payload();
  }
}
inline const ::frl::device::wireformat::ReplyMsg& ToHostMsg::_internal_reply() const {
  return *payload_.reply_;
}
inline ::frl::device::wireformat::ReplyMsg* ToHostMsg::release_reply() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToHostMsg.reply)
  if (has_reply()) {
    clear_has_payload();
      ::frl::device::wireformat::ReplyMsg* temp = payload_.reply_;
    payload_.reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::ReplyMsg& ToHostMsg::reply() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToHostMsg.reply)
  return has_reply()
      ? *payload_.reply_
      : *reinterpret_cast< ::frl::device::wireformat::ReplyMsg*>(&::frl::device::wireformat::_ReplyMsg_default_instance_);
}
inline ::frl::device::wireformat::ReplyMsg* ToHostMsg::mutable_reply() {
  if (!has_reply()) {
    clear_payload();
    set_has_reply();
    payload_.reply_ = CreateMaybeMessage< ::frl::device::wireformat::ReplyMsg >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToHostMsg.reply)
  return payload_.reply_;
}

inline bool ToHostMsg::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ToHostMsg::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ToHostMsg::PayloadCase ToHostMsg::payload_case() const {
  return ToHostMsg::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventMsg

// optional .frl.device.wireformat.TaiTime ts = 1;
inline bool EventMsg::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventMsg::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventMsg::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventMsg::clear_ts() {
  if (ts_ != NULL) ts_->Clear();
  clear_has_ts();
}
inline const ::frl::device::wireformat::TaiTime& EventMsg::_internal_ts() const {
  return *ts_;
}
inline const ::frl::device::wireformat::TaiTime& EventMsg::ts() const {
  const ::frl::device::wireformat::TaiTime* p = ts_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.ts)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::TaiTime*>(
      &::frl::device::wireformat::_TaiTime_default_instance_);
}
inline ::frl::device::wireformat::TaiTime* EventMsg::release_ts() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.EventMsg.ts)
  clear_has_ts();
  ::frl::device::wireformat::TaiTime* temp = ts_;
  ts_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::TaiTime* EventMsg::mutable_ts() {
  set_has_ts();
  if (ts_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::TaiTime>(GetArenaNoVirtual());
    ts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.ts)
  return ts_;
}
inline void EventMsg::set_allocated_ts(::frl::device::wireformat::TaiTime* ts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ts_;
  }
  if (ts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    set_has_ts();
  } else {
    clear_has_ts();
  }
  ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.EventMsg.ts)
}

// repeated .frl.device.wireformat.Acc accs = 2;
inline int EventMsg::accs_size() const {
  return accs_.size();
}
inline void EventMsg::clear_accs() {
  accs_.Clear();
}
inline ::frl::device::wireformat::Acc* EventMsg::mutable_accs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.accs)
  return accs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Acc >*
EventMsg::mutable_accs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.accs)
  return &accs_;
}
inline const ::frl::device::wireformat::Acc& EventMsg::accs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.accs)
  return accs_.Get(index);
}
inline ::frl::device::wireformat::Acc* EventMsg::add_accs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.accs)
  return accs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Acc >&
EventMsg::accs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.accs)
  return accs_;
}

// repeated .frl.device.wireformat.Gyro gyros = 3;
inline int EventMsg::gyros_size() const {
  return gyros_.size();
}
inline void EventMsg::clear_gyros() {
  gyros_.Clear();
}
inline ::frl::device::wireformat::Gyro* EventMsg::mutable_gyros(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.gyros)
  return gyros_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Gyro >*
EventMsg::mutable_gyros() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.gyros)
  return &gyros_;
}
inline const ::frl::device::wireformat::Gyro& EventMsg::gyros(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.gyros)
  return gyros_.Get(index);
}
inline ::frl::device::wireformat::Gyro* EventMsg::add_gyros() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.gyros)
  return gyros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Gyro >&
EventMsg::gyros() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.gyros)
  return gyros_;
}

// repeated .frl.device.wireformat.Mag mags = 4;
inline int EventMsg::mags_size() const {
  return mags_.size();
}
inline void EventMsg::clear_mags() {
  mags_.Clear();
}
inline ::frl::device::wireformat::Mag* EventMsg::mutable_mags(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.mags)
  return mags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Mag >*
EventMsg::mutable_mags() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.mags)
  return &mags_;
}
inline const ::frl::device::wireformat::Mag& EventMsg::mags(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.mags)
  return mags_.Get(index);
}
inline ::frl::device::wireformat::Mag* EventMsg::add_mags() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.mags)
  return mags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Mag >&
EventMsg::mags() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.mags)
  return mags_;
}

// repeated .frl.device.wireformat.Temp temps = 5;
inline int EventMsg::temps_size() const {
  return temps_.size();
}
inline void EventMsg::clear_temps() {
  temps_.Clear();
}
inline ::frl::device::wireformat::Temp* EventMsg::mutable_temps(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.temps)
  return temps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Temp >*
EventMsg::mutable_temps() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.temps)
  return &temps_;
}
inline const ::frl::device::wireformat::Temp& EventMsg::temps(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.temps)
  return temps_.Get(index);
}
inline ::frl::device::wireformat::Temp* EventMsg::add_temps() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.temps)
  return temps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Temp >&
EventMsg::temps() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.temps)
  return temps_;
}

// repeated .frl.device.wireformat.Baro baros = 6;
inline int EventMsg::baros_size() const {
  return baros_.size();
}
inline void EventMsg::clear_baros() {
  baros_.Clear();
}
inline ::frl::device::wireformat::Baro* EventMsg::mutable_baros(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.baros)
  return baros_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Baro >*
EventMsg::mutable_baros() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.baros)
  return &baros_;
}
inline const ::frl::device::wireformat::Baro& EventMsg::baros(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.baros)
  return baros_.Get(index);
}
inline ::frl::device::wireformat::Baro* EventMsg::add_baros() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.baros)
  return baros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Baro >&
EventMsg::baros() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.baros)
  return baros_;
}

// repeated .frl.device.wireformat.Sync syncs = 7;
inline int EventMsg::syncs_size() const {
  return syncs_.size();
}
inline void EventMsg::clear_syncs() {
  syncs_.Clear();
}
inline ::frl::device::wireformat::Sync* EventMsg::mutable_syncs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.syncs)
  return syncs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Sync >*
EventMsg::mutable_syncs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.syncs)
  return &syncs_;
}
inline const ::frl::device::wireformat::Sync& EventMsg::syncs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.syncs)
  return syncs_.Get(index);
}
inline ::frl::device::wireformat::Sync* EventMsg::add_syncs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.syncs)
  return syncs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Sync >&
EventMsg::syncs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.syncs)
  return syncs_;
}

// repeated .frl.device.wireformat.FirstPixel fps = 8;
inline int EventMsg::fps_size() const {
  return fps_.size();
}
inline void EventMsg::clear_fps() {
  fps_.Clear();
}
inline ::frl::device::wireformat::FirstPixel* EventMsg::mutable_fps(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.fps)
  return fps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FirstPixel >*
EventMsg::mutable_fps() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.fps)
  return &fps_;
}
inline const ::frl::device::wireformat::FirstPixel& EventMsg::fps(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.fps)
  return fps_.Get(index);
}
inline ::frl::device::wireformat::FirstPixel* EventMsg::add_fps() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.fps)
  return fps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FirstPixel >&
EventMsg::fps() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.fps)
  return fps_;
}

// repeated .frl.device.wireformat.Fan fans = 9;
inline int EventMsg::fans_size() const {
  return fans_.size();
}
inline void EventMsg::clear_fans() {
  fans_.Clear();
}
inline ::frl::device::wireformat::Fan* EventMsg::mutable_fans(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.fans)
  return fans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Fan >*
EventMsg::mutable_fans() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.fans)
  return &fans_;
}
inline const ::frl::device::wireformat::Fan& EventMsg::fans(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.fans)
  return fans_.Get(index);
}
inline ::frl::device::wireformat::Fan* EventMsg::add_fans() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.fans)
  return fans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Fan >&
EventMsg::fans() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.fans)
  return fans_;
}

// repeated .frl.device.wireformat.Button buttons = 10;
inline int EventMsg::buttons_size() const {
  return buttons_.size();
}
inline void EventMsg::clear_buttons() {
  buttons_.Clear();
}
inline ::frl::device::wireformat::Button* EventMsg::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.buttons)
  return buttons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Button >*
EventMsg::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.buttons)
  return &buttons_;
}
inline const ::frl::device::wireformat::Button& EventMsg::buttons(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.buttons)
  return buttons_.Get(index);
}
inline ::frl::device::wireformat::Button* EventMsg::add_buttons() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.buttons)
  return buttons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Button >&
EventMsg::buttons() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.buttons)
  return buttons_;
}

// repeated .frl.device.wireformat.Encoder encoders = 11;
inline int EventMsg::encoders_size() const {
  return encoders_.size();
}
inline void EventMsg::clear_encoders() {
  encoders_.Clear();
}
inline ::frl::device::wireformat::Encoder* EventMsg::mutable_encoders(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.encoders)
  return encoders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Encoder >*
EventMsg::mutable_encoders() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.encoders)
  return &encoders_;
}
inline const ::frl::device::wireformat::Encoder& EventMsg::encoders(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.encoders)
  return encoders_.Get(index);
}
inline ::frl::device::wireformat::Encoder* EventMsg::add_encoders() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.encoders)
  return encoders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Encoder >&
EventMsg::encoders() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.encoders)
  return encoders_;
}

// repeated .frl.device.wireformat.VFMotor vfs = 12;
inline int EventMsg::vfs_size() const {
  return vfs_.size();
}
inline void EventMsg::clear_vfs() {
  vfs_.Clear();
}
inline ::frl::device::wireformat::VFMotor* EventMsg::mutable_vfs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.vfs)
  return vfs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >*
EventMsg::mutable_vfs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.vfs)
  return &vfs_;
}
inline const ::frl::device::wireformat::VFMotor& EventMsg::vfs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.vfs)
  return vfs_.Get(index);
}
inline ::frl::device::wireformat::VFMotor* EventMsg::add_vfs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.vfs)
  return vfs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >&
EventMsg::vfs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.vfs)
  return vfs_;
}

// repeated .frl.device.wireformat.MainBoard mbs = 13;
inline int EventMsg::mbs_size() const {
  return mbs_.size();
}
inline void EventMsg::clear_mbs() {
  mbs_.Clear();
}
inline ::frl::device::wireformat::MainBoard* EventMsg::mutable_mbs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.mbs)
  return mbs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::MainBoard >*
EventMsg::mutable_mbs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.mbs)
  return &mbs_;
}
inline const ::frl::device::wireformat::MainBoard& EventMsg::mbs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.mbs)
  return mbs_.Get(index);
}
inline ::frl::device::wireformat::MainBoard* EventMsg::add_mbs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.mbs)
  return mbs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::MainBoard >&
EventMsg::mbs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.mbs)
  return mbs_;
}

// repeated .frl.device.wireformat.Timer timer = 14;
inline int EventMsg::timer_size() const {
  return timer_.size();
}
inline void EventMsg::clear_timer() {
  timer_.Clear();
}
inline ::frl::device::wireformat::Timer* EventMsg::mutable_timer(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.EventMsg.timer)
  return timer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Timer >*
EventMsg::mutable_timer() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.EventMsg.timer)
  return &timer_;
}
inline const ::frl::device::wireformat::Timer& EventMsg::timer(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.EventMsg.timer)
  return timer_.Get(index);
}
inline ::frl::device::wireformat::Timer* EventMsg::add_timer() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.EventMsg.timer)
  return timer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::Timer >&
EventMsg::timer() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.EventMsg.timer)
  return timer_;
}

// -------------------------------------------------------------------

// TaiTime

// optional uint64 s = 1;
inline bool TaiTime::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaiTime::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaiTime::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaiTime::clear_s() {
  s_ = GOOGLE_ULONGLONG(0);
  clear_has_s();
}
inline ::google::protobuf::uint64 TaiTime::s() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TaiTime.s)
  return s_;
}
inline void TaiTime::set_s(::google::protobuf::uint64 value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TaiTime.s)
}

// optional uint32 ns = 2;
inline bool TaiTime::has_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaiTime::set_has_ns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaiTime::clear_has_ns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaiTime::clear_ns() {
  ns_ = 0u;
  clear_has_ns();
}
inline ::google::protobuf::uint32 TaiTime::ns() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TaiTime.ns)
  return ns_;
}
inline void TaiTime::set_ns(::google::protobuf::uint32 value) {
  set_has_ns();
  ns_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TaiTime.ns)
}

// -------------------------------------------------------------------

// Acc

// required uint32 id = 1;
inline bool Acc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Acc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Acc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Acc::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Acc::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Acc.id)
  return id_;
}
inline void Acc::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Acc.id)
}

// optional uint32 raw_x = 2;
inline bool Acc::has_raw_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Acc::set_has_raw_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Acc::clear_has_raw_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Acc::clear_raw_x() {
  raw_x_ = 0u;
  clear_has_raw_x();
}
inline ::google::protobuf::uint32 Acc::raw_x() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Acc.raw_x)
  return raw_x_;
}
inline void Acc::set_raw_x(::google::protobuf::uint32 value) {
  set_has_raw_x();
  raw_x_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Acc.raw_x)
}

// optional uint32 raw_y = 3;
inline bool Acc::has_raw_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Acc::set_has_raw_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Acc::clear_has_raw_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Acc::clear_raw_y() {
  raw_y_ = 0u;
  clear_has_raw_y();
}
inline ::google::protobuf::uint32 Acc::raw_y() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Acc.raw_y)
  return raw_y_;
}
inline void Acc::set_raw_y(::google::protobuf::uint32 value) {
  set_has_raw_y();
  raw_y_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Acc.raw_y)
}

// optional uint32 raw_z = 4;
inline bool Acc::has_raw_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Acc::set_has_raw_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Acc::clear_has_raw_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Acc::clear_raw_z() {
  raw_z_ = 0u;
  clear_has_raw_z();
}
inline ::google::protobuf::uint32 Acc::raw_z() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Acc.raw_z)
  return raw_z_;
}
inline void Acc::set_raw_z(::google::protobuf::uint32 value) {
  set_has_raw_z();
  raw_z_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Acc.raw_z)
}

// optional uint32 error_code = 5;
inline bool Acc::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Acc::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Acc::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Acc::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Acc::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Acc.error_code)
  return error_code_;
}
inline void Acc::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Acc.error_code)
}

// optional string error_msg = 6;
inline bool Acc::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Acc::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Acc::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Acc::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Acc::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Acc.error_msg)
  return error_msg_.GetNoArena();
}
inline void Acc::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Acc.error_msg)
}
#if LANG_CXX11
inline void Acc::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Acc.error_msg)
}
#endif
inline void Acc::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Acc.error_msg)
}
inline void Acc::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Acc.error_msg)
}
inline ::std::string* Acc::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Acc.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Acc::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Acc.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Acc::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Acc.error_msg)
}

// -------------------------------------------------------------------

// Gyro

// required uint32 id = 1;
inline bool Gyro::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gyro::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gyro::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gyro::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Gyro::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Gyro.id)
  return id_;
}
inline void Gyro::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Gyro.id)
}

// optional uint32 raw_x = 2;
inline bool Gyro::has_raw_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gyro::set_has_raw_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gyro::clear_has_raw_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gyro::clear_raw_x() {
  raw_x_ = 0u;
  clear_has_raw_x();
}
inline ::google::protobuf::uint32 Gyro::raw_x() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Gyro.raw_x)
  return raw_x_;
}
inline void Gyro::set_raw_x(::google::protobuf::uint32 value) {
  set_has_raw_x();
  raw_x_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Gyro.raw_x)
}

// optional uint32 raw_y = 3;
inline bool Gyro::has_raw_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gyro::set_has_raw_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gyro::clear_has_raw_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gyro::clear_raw_y() {
  raw_y_ = 0u;
  clear_has_raw_y();
}
inline ::google::protobuf::uint32 Gyro::raw_y() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Gyro.raw_y)
  return raw_y_;
}
inline void Gyro::set_raw_y(::google::protobuf::uint32 value) {
  set_has_raw_y();
  raw_y_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Gyro.raw_y)
}

// optional uint32 raw_z = 4;
inline bool Gyro::has_raw_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gyro::set_has_raw_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gyro::clear_has_raw_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gyro::clear_raw_z() {
  raw_z_ = 0u;
  clear_has_raw_z();
}
inline ::google::protobuf::uint32 Gyro::raw_z() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Gyro.raw_z)
  return raw_z_;
}
inline void Gyro::set_raw_z(::google::protobuf::uint32 value) {
  set_has_raw_z();
  raw_z_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Gyro.raw_z)
}

// optional uint32 error_code = 5;
inline bool Gyro::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gyro::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gyro::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gyro::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Gyro::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Gyro.error_code)
  return error_code_;
}
inline void Gyro::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Gyro.error_code)
}

// optional string error_msg = 6;
inline bool Gyro::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gyro::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gyro::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gyro::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Gyro::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Gyro.error_msg)
  return error_msg_.GetNoArena();
}
inline void Gyro::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Gyro.error_msg)
}
#if LANG_CXX11
inline void Gyro::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Gyro.error_msg)
}
#endif
inline void Gyro::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Gyro.error_msg)
}
inline void Gyro::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Gyro.error_msg)
}
inline ::std::string* Gyro::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Gyro.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gyro::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Gyro.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gyro::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Gyro.error_msg)
}

// -------------------------------------------------------------------

// Mag

// required uint32 id = 1;
inline bool Mag::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mag::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mag::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mag::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Mag::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Mag.id)
  return id_;
}
inline void Mag::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Mag.id)
}

// optional uint32 raw_x = 2;
inline bool Mag::has_raw_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mag::set_has_raw_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mag::clear_has_raw_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mag::clear_raw_x() {
  raw_x_ = 0u;
  clear_has_raw_x();
}
inline ::google::protobuf::uint32 Mag::raw_x() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Mag.raw_x)
  return raw_x_;
}
inline void Mag::set_raw_x(::google::protobuf::uint32 value) {
  set_has_raw_x();
  raw_x_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Mag.raw_x)
}

// optional uint32 raw_y = 3;
inline bool Mag::has_raw_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mag::set_has_raw_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mag::clear_has_raw_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mag::clear_raw_y() {
  raw_y_ = 0u;
  clear_has_raw_y();
}
inline ::google::protobuf::uint32 Mag::raw_y() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Mag.raw_y)
  return raw_y_;
}
inline void Mag::set_raw_y(::google::protobuf::uint32 value) {
  set_has_raw_y();
  raw_y_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Mag.raw_y)
}

// optional uint32 raw_z = 4;
inline bool Mag::has_raw_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mag::set_has_raw_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mag::clear_has_raw_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mag::clear_raw_z() {
  raw_z_ = 0u;
  clear_has_raw_z();
}
inline ::google::protobuf::uint32 Mag::raw_z() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Mag.raw_z)
  return raw_z_;
}
inline void Mag::set_raw_z(::google::protobuf::uint32 value) {
  set_has_raw_z();
  raw_z_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Mag.raw_z)
}

// optional uint32 error_code = 5;
inline bool Mag::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mag::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mag::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mag::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Mag::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Mag.error_code)
  return error_code_;
}
inline void Mag::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Mag.error_code)
}

// optional string error_msg = 6;
inline bool Mag::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mag::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mag::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mag::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Mag::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Mag.error_msg)
  return error_msg_.GetNoArena();
}
inline void Mag::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Mag.error_msg)
}
#if LANG_CXX11
inline void Mag::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Mag.error_msg)
}
#endif
inline void Mag::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Mag.error_msg)
}
inline void Mag::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Mag.error_msg)
}
inline ::std::string* Mag::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Mag.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mag::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Mag.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mag::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Mag.error_msg)
}

// -------------------------------------------------------------------

// Baro

// required uint32 id = 1;
inline bool Baro::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Baro::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Baro::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Baro::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Baro::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Baro.id)
  return id_;
}
inline void Baro::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Baro.id)
}

// optional uint32 raw = 2;
inline bool Baro::has_raw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Baro::set_has_raw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Baro::clear_has_raw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Baro::clear_raw() {
  raw_ = 0u;
  clear_has_raw();
}
inline ::google::protobuf::uint32 Baro::raw() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Baro.raw)
  return raw_;
}
inline void Baro::set_raw(::google::protobuf::uint32 value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Baro.raw)
}

// optional uint32 error_code = 3;
inline bool Baro::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Baro::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Baro::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Baro::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Baro::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Baro.error_code)
  return error_code_;
}
inline void Baro::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Baro.error_code)
}

// optional string error_msg = 4;
inline bool Baro::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Baro::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Baro::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Baro::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Baro::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Baro.error_msg)
  return error_msg_.GetNoArena();
}
inline void Baro::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Baro.error_msg)
}
#if LANG_CXX11
inline void Baro::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Baro.error_msg)
}
#endif
inline void Baro::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Baro.error_msg)
}
inline void Baro::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Baro.error_msg)
}
inline ::std::string* Baro::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Baro.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Baro::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Baro.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Baro::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Baro.error_msg)
}

// -------------------------------------------------------------------

// Temp

// required uint32 id = 1;
inline bool Temp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Temp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Temp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Temp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Temp::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Temp.id)
  return id_;
}
inline void Temp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Temp.id)
}

// optional uint32 raw = 2;
inline bool Temp::has_raw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Temp::set_has_raw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Temp::clear_has_raw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Temp::clear_raw() {
  raw_ = 0u;
  clear_has_raw();
}
inline ::google::protobuf::uint32 Temp::raw() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Temp.raw)
  return raw_;
}
inline void Temp::set_raw(::google::protobuf::uint32 value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Temp.raw)
}

// optional uint32 error_code = 3;
inline bool Temp::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Temp::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Temp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Temp::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Temp::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Temp.error_code)
  return error_code_;
}
inline void Temp::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Temp.error_code)
}

// optional string error_msg = 4;
inline bool Temp::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Temp::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Temp::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Temp::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Temp::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Temp.error_msg)
  return error_msg_.GetNoArena();
}
inline void Temp::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Temp.error_msg)
}
#if LANG_CXX11
inline void Temp::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Temp.error_msg)
}
#endif
inline void Temp::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Temp.error_msg)
}
inline void Temp::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Temp.error_msg)
}
inline ::std::string* Temp::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Temp.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Temp::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Temp.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Temp::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Temp.error_msg)
}

// -------------------------------------------------------------------

// Sync

// required uint32 id = 1;
inline bool Sync::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sync::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sync::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sync::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Sync::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Sync.id)
  return id_;
}
inline void Sync::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Sync.id)
}

// optional uint32 channel = 2;
inline bool Sync::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sync::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sync::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sync::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 Sync::channel() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Sync.channel)
  return channel_;
}
inline void Sync::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Sync.channel)
}

// optional .frl.device.wireformat.Sync.DIR dir = 3;
inline bool Sync::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sync::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sync::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sync::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::frl::device::wireformat::Sync_DIR Sync::dir() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Sync.dir)
  return static_cast< ::frl::device::wireformat::Sync_DIR >(dir_);
}
inline void Sync::set_dir(::frl::device::wireformat::Sync_DIR value) {
  assert(::frl::device::wireformat::Sync_DIR_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Sync.dir)
}

// optional uint32 count = 4;
inline bool Sync::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sync::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sync::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sync::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Sync::count() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Sync.count)
  return count_;
}
inline void Sync::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Sync.count)
}

// optional uint32 error_code = 5;
inline bool Sync::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sync::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sync::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sync::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Sync::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Sync.error_code)
  return error_code_;
}
inline void Sync::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Sync.error_code)
}

// optional string error_msg = 6;
inline bool Sync::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sync::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sync::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sync::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Sync::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Sync.error_msg)
  return error_msg_.GetNoArena();
}
inline void Sync::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Sync.error_msg)
}
#if LANG_CXX11
inline void Sync::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Sync.error_msg)
}
#endif
inline void Sync::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Sync.error_msg)
}
inline void Sync::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Sync.error_msg)
}
inline ::std::string* Sync::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Sync.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sync::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Sync.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sync::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Sync.error_msg)
}

// -------------------------------------------------------------------

// FirstPixel

// required uint32 id = 1;
inline bool FirstPixel::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FirstPixel::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FirstPixel::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FirstPixel::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FirstPixel::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FirstPixel.id)
  return id_;
}
inline void FirstPixel::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FirstPixel.id)
}

// optional .frl.device.wireformat.FirstPixel.LR which = 2;
inline bool FirstPixel::has_which() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FirstPixel::set_has_which() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FirstPixel::clear_has_which() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FirstPixel::clear_which() {
  which_ = 0;
  clear_has_which();
}
inline ::frl::device::wireformat::FirstPixel_LR FirstPixel::which() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FirstPixel.which)
  return static_cast< ::frl::device::wireformat::FirstPixel_LR >(which_);
}
inline void FirstPixel::set_which(::frl::device::wireformat::FirstPixel_LR value) {
  assert(::frl::device::wireformat::FirstPixel_LR_IsValid(value));
  set_has_which();
  which_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FirstPixel.which)
}

// optional uint32 value = 3;
inline bool FirstPixel::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FirstPixel::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FirstPixel::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FirstPixel::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 FirstPixel::value() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FirstPixel.value)
  return value_;
}
inline void FirstPixel::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FirstPixel.value)
}

// optional uint32 count = 4;
inline bool FirstPixel::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FirstPixel::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FirstPixel::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FirstPixel::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 FirstPixel::count() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FirstPixel.count)
  return count_;
}
inline void FirstPixel::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FirstPixel.count)
}

// optional uint32 error_code = 5;
inline bool FirstPixel::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FirstPixel::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FirstPixel::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FirstPixel::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 FirstPixel::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FirstPixel.error_code)
  return error_code_;
}
inline void FirstPixel::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FirstPixel.error_code)
}

// optional string error_msg = 6;
inline bool FirstPixel::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstPixel::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstPixel::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstPixel::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& FirstPixel::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FirstPixel.error_msg)
  return error_msg_.GetNoArena();
}
inline void FirstPixel::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FirstPixel.error_msg)
}
#if LANG_CXX11
inline void FirstPixel::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.FirstPixel.error_msg)
}
#endif
inline void FirstPixel::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.FirstPixel.error_msg)
}
inline void FirstPixel::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.FirstPixel.error_msg)
}
inline ::std::string* FirstPixel::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.FirstPixel.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirstPixel::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.FirstPixel.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirstPixel::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.FirstPixel.error_msg)
}

// -------------------------------------------------------------------

// Fan

// required uint32 id = 1;
inline bool Fan::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fan::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fan::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fan::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Fan::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Fan.id)
  return id_;
}
inline void Fan::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Fan.id)
}

// optional uint32 raw_speed = 2;
inline bool Fan::has_raw_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fan::set_has_raw_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fan::clear_has_raw_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fan::clear_raw_speed() {
  raw_speed_ = 0u;
  clear_has_raw_speed();
}
inline ::google::protobuf::uint32 Fan::raw_speed() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Fan.raw_speed)
  return raw_speed_;
}
inline void Fan::set_raw_speed(::google::protobuf::uint32 value) {
  set_has_raw_speed();
  raw_speed_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Fan.raw_speed)
}

// optional uint32 error_code = 3;
inline bool Fan::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fan::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fan::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fan::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Fan::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Fan.error_code)
  return error_code_;
}
inline void Fan::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Fan.error_code)
}

// optional string error_msg = 4;
inline bool Fan::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fan::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fan::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fan::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Fan::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Fan.error_msg)
  return error_msg_.GetNoArena();
}
inline void Fan::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Fan.error_msg)
}
#if LANG_CXX11
inline void Fan::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Fan.error_msg)
}
#endif
inline void Fan::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Fan.error_msg)
}
inline void Fan::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Fan.error_msg)
}
inline ::std::string* Fan::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Fan.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fan::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Fan.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fan::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Fan.error_msg)
}

// -------------------------------------------------------------------

// Button

// required uint32 id = 1;
inline bool Button::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Button::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Button::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Button::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Button::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Button.id)
  return id_;
}
inline void Button::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Button.id)
}

// optional bool value = 2;
inline bool Button::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Button::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Button::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Button::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool Button::value() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Button.value)
  return value_;
}
inline void Button::set_value(bool value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Button.value)
}

// optional uint32 error_code = 3;
inline bool Button::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Button::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Button::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Button::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Button::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Button.error_code)
  return error_code_;
}
inline void Button::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Button.error_code)
}

// optional string error_msg = 4;
inline bool Button::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Button::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Button::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Button::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Button::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Button.error_msg)
  return error_msg_.GetNoArena();
}
inline void Button::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Button.error_msg)
}
#if LANG_CXX11
inline void Button::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Button.error_msg)
}
#endif
inline void Button::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Button.error_msg)
}
inline void Button::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Button.error_msg)
}
inline ::std::string* Button::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Button.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Button::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Button.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Button::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Button.error_msg)
}

// -------------------------------------------------------------------

// Encoder

// required uint32 id = 1;
inline bool Encoder::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Encoder::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Encoder::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Encoder::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Encoder::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Encoder.id)
  return id_;
}
inline void Encoder::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Encoder.id)
}

// optional uint32 raw = 2;
inline bool Encoder::has_raw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Encoder::set_has_raw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Encoder::clear_has_raw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Encoder::clear_raw() {
  raw_ = 0u;
  clear_has_raw();
}
inline ::google::protobuf::uint32 Encoder::raw() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Encoder.raw)
  return raw_;
}
inline void Encoder::set_raw(::google::protobuf::uint32 value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Encoder.raw)
}

// optional uint32 error_code = 3;
inline bool Encoder::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Encoder::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Encoder::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Encoder::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Encoder::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Encoder.error_code)
  return error_code_;
}
inline void Encoder::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Encoder.error_code)
}

// optional string error_msg = 4;
inline bool Encoder::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Encoder::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Encoder::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Encoder::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Encoder::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Encoder.error_msg)
  return error_msg_.GetNoArena();
}
inline void Encoder::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Encoder.error_msg)
}
#if LANG_CXX11
inline void Encoder::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Encoder.error_msg)
}
#endif
inline void Encoder::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Encoder.error_msg)
}
inline void Encoder::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Encoder.error_msg)
}
inline ::std::string* Encoder::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Encoder.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoder::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Encoder.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoder::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Encoder.error_msg)
}

// -------------------------------------------------------------------

// VFMotor

// required uint32 id = 1;
inline bool VFMotor::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VFMotor::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VFMotor::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VFMotor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 VFMotor::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.id)
  return id_;
}
inline void VFMotor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.id)
}

// optional .frl.device.wireformat.VFMotor.LR which = 2;
inline bool VFMotor::has_which() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VFMotor::set_has_which() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VFMotor::clear_has_which() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VFMotor::clear_which() {
  which_ = 0;
  clear_has_which();
}
inline ::frl::device::wireformat::VFMotor_LR VFMotor::which() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.which)
  return static_cast< ::frl::device::wireformat::VFMotor_LR >(which_);
}
inline void VFMotor::set_which(::frl::device::wireformat::VFMotor_LR value) {
  assert(::frl::device::wireformat::VFMotor_LR_IsValid(value));
  set_has_which();
  which_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.which)
}

// optional uint32 position_cnts = 3;
inline bool VFMotor::has_position_cnts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VFMotor::set_has_position_cnts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VFMotor::clear_has_position_cnts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VFMotor::clear_position_cnts() {
  position_cnts_ = 0u;
  clear_has_position_cnts();
}
inline ::google::protobuf::uint32 VFMotor::position_cnts() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.position_cnts)
  return position_cnts_;
}
inline void VFMotor::set_position_cnts(::google::protobuf::uint32 value) {
  set_has_position_cnts();
  position_cnts_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.position_cnts)
}

// optional uint32 set_point_cnts = 4;
inline bool VFMotor::has_set_point_cnts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VFMotor::set_has_set_point_cnts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VFMotor::clear_has_set_point_cnts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VFMotor::clear_set_point_cnts() {
  set_point_cnts_ = 0u;
  clear_has_set_point_cnts();
}
inline ::google::protobuf::uint32 VFMotor::set_point_cnts() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.set_point_cnts)
  return set_point_cnts_;
}
inline void VFMotor::set_set_point_cnts(::google::protobuf::uint32 value) {
  set_has_set_point_cnts();
  set_point_cnts_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.set_point_cnts)
}

// optional float rate_rpm = 5;
inline bool VFMotor::has_rate_rpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VFMotor::set_has_rate_rpm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VFMotor::clear_has_rate_rpm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VFMotor::clear_rate_rpm() {
  rate_rpm_ = 0;
  clear_has_rate_rpm();
}
inline float VFMotor::rate_rpm() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.rate_rpm)
  return rate_rpm_;
}
inline void VFMotor::set_rate_rpm(float value) {
  set_has_rate_rpm();
  rate_rpm_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.rate_rpm)
}

// optional uint32 error_code = 6;
inline bool VFMotor::has_error_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VFMotor::set_has_error_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VFMotor::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VFMotor::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 VFMotor::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.error_code)
  return error_code_;
}
inline void VFMotor::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.error_code)
}

// optional string error_msg = 7;
inline bool VFMotor::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VFMotor::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VFMotor::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VFMotor::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& VFMotor::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.error_msg)
  return error_msg_.GetNoArena();
}
inline void VFMotor::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.error_msg)
}
#if LANG_CXX11
inline void VFMotor::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.VFMotor.error_msg)
}
#endif
inline void VFMotor::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.VFMotor.error_msg)
}
inline void VFMotor::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.VFMotor.error_msg)
}
inline ::std::string* VFMotor::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.VFMotor.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VFMotor::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.VFMotor.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VFMotor::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.VFMotor.error_msg)
}

// optional .frl.device.wireformat.VFMotor.Event event = 8;
inline bool VFMotor::has_event() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VFMotor::set_has_event() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VFMotor::clear_has_event() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VFMotor::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::frl::device::wireformat::VFMotor_Event VFMotor::event() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.event)
  return static_cast< ::frl::device::wireformat::VFMotor_Event >(event_);
}
inline void VFMotor::set_event(::frl::device::wireformat::VFMotor_Event value) {
  assert(::frl::device::wireformat::VFMotor_Event_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.event)
}

// optional bool flag = 9;
inline bool VFMotor::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VFMotor::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VFMotor::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VFMotor::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool VFMotor::flag() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotor.flag)
  return flag_;
}
inline void VFMotor::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotor.flag)
}

// -------------------------------------------------------------------

// Timer

// required uint32 id = 1;
inline bool Timer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timer::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timer::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timer::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Timer::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Timer.id)
  return id_;
}
inline void Timer::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Timer.id)
}

// optional .frl.device.wireformat.Timer.Source src = 2;
inline bool Timer::has_src() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Timer::set_has_src() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Timer::clear_has_src() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Timer::clear_src() {
  src_ = 0;
  clear_has_src();
}
inline ::frl::device::wireformat::Timer_Source Timer::src() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Timer.src)
  return static_cast< ::frl::device::wireformat::Timer_Source >(src_);
}
inline void Timer::set_src(::frl::device::wireformat::Timer_Source value) {
  assert(::frl::device::wireformat::Timer_Source_IsValid(value));
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Timer.src)
}

// optional .frl.device.wireformat.Timer.Status status = 3;
inline bool Timer::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Timer::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Timer::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Timer::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::frl::device::wireformat::Timer_Status Timer::status() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Timer.status)
  return static_cast< ::frl::device::wireformat::Timer_Status >(status_);
}
inline void Timer::set_status(::frl::device::wireformat::Timer_Status value) {
  assert(::frl::device::wireformat::Timer_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Timer.status)
}

// optional uint32 error_code = 4;
inline bool Timer::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Timer::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Timer::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Timer::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Timer::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Timer.error_code)
  return error_code_;
}
inline void Timer::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Timer.error_code)
}

// optional string error_msg = 5;
inline bool Timer::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timer::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timer::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timer::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& Timer::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.Timer.error_msg)
  return error_msg_.GetNoArena();
}
inline void Timer::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.Timer.error_msg)
}
#if LANG_CXX11
inline void Timer::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.Timer.error_msg)
}
#endif
inline void Timer::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.Timer.error_msg)
}
inline void Timer::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.Timer.error_msg)
}
inline ::std::string* Timer::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.Timer.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Timer::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.Timer.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Timer::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.Timer.error_msg)
}

// -------------------------------------------------------------------

// MainBoard

// required uint32 id = 1;
inline bool MainBoard::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainBoard::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainBoard::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainBoard::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MainBoard::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MainBoard.id)
  return id_;
}
inline void MainBoard::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MainBoard.id)
}

// required .frl.device.wireformat.MainBoard.Status status = 2;
inline bool MainBoard::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MainBoard::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MainBoard::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MainBoard::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::frl::device::wireformat::MainBoard_Status MainBoard::status() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MainBoard.status)
  return static_cast< ::frl::device::wireformat::MainBoard_Status >(status_);
}
inline void MainBoard::set_status(::frl::device::wireformat::MainBoard_Status value) {
  assert(::frl::device::wireformat::MainBoard_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MainBoard.status)
}

// optional uint32 error_code = 3;
inline bool MainBoard::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MainBoard::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MainBoard::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MainBoard::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 MainBoard::error_code() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MainBoard.error_code)
  return error_code_;
}
inline void MainBoard::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MainBoard.error_code)
}

// optional string error_msg = 4;
inline bool MainBoard::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MainBoard::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MainBoard::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MainBoard::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& MainBoard::error_msg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MainBoard.error_msg)
  return error_msg_.GetNoArena();
}
inline void MainBoard::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MainBoard.error_msg)
}
#if LANG_CXX11
inline void MainBoard::set_error_msg(::std::string&& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.MainBoard.error_msg)
}
#endif
inline void MainBoard::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.MainBoard.error_msg)
}
inline void MainBoard::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.MainBoard.error_msg)
}
inline ::std::string* MainBoard::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.MainBoard.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MainBoard::release_error_msg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.MainBoard.error_msg)
  if (!has_error_msg()) {
    return NULL;
  }
  clear_has_error_msg();
  return error_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MainBoard::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.MainBoard.error_msg)
}

// -------------------------------------------------------------------

// DeviceInfo

// optional .frl.device.wireformat.DeviceSerial serial = 1;
inline bool DeviceInfo::has_serial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfo::set_has_serial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfo::clear_has_serial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfo::clear_serial() {
  if (serial_ != NULL) serial_->Clear();
  clear_has_serial();
}
inline const ::frl::device::wireformat::DeviceSerial& DeviceInfo::_internal_serial() const {
  return *serial_;
}
inline const ::frl::device::wireformat::DeviceSerial& DeviceInfo::serial() const {
  const ::frl::device::wireformat::DeviceSerial* p = serial_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DeviceInfo.serial)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::DeviceSerial*>(
      &::frl::device::wireformat::_DeviceSerial_default_instance_);
}
inline ::frl::device::wireformat::DeviceSerial* DeviceInfo::release_serial() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.DeviceInfo.serial)
  clear_has_serial();
  ::frl::device::wireformat::DeviceSerial* temp = serial_;
  serial_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::DeviceSerial* DeviceInfo::mutable_serial() {
  set_has_serial();
  if (serial_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::DeviceSerial>(GetArenaNoVirtual());
    serial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DeviceInfo.serial)
  return serial_;
}
inline void DeviceInfo::set_allocated_serial(::frl::device::wireformat::DeviceSerial* serial) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serial_;
  }
  if (serial) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serial = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serial, submessage_arena);
    }
    set_has_serial();
  } else {
    clear_has_serial();
  }
  serial_ = serial;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.DeviceInfo.serial)
}

// optional .frl.device.wireformat.FwVersion fw_ver = 2;
inline bool DeviceInfo::has_fw_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfo::set_has_fw_ver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfo::clear_has_fw_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfo::clear_fw_ver() {
  if (fw_ver_ != NULL) fw_ver_->Clear();
  clear_has_fw_ver();
}
inline const ::frl::device::wireformat::FwVersion& DeviceInfo::_internal_fw_ver() const {
  return *fw_ver_;
}
inline const ::frl::device::wireformat::FwVersion& DeviceInfo::fw_ver() const {
  const ::frl::device::wireformat::FwVersion* p = fw_ver_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DeviceInfo.fw_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::FwVersion*>(
      &::frl::device::wireformat::_FwVersion_default_instance_);
}
inline ::frl::device::wireformat::FwVersion* DeviceInfo::release_fw_ver() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.DeviceInfo.fw_ver)
  clear_has_fw_ver();
  ::frl::device::wireformat::FwVersion* temp = fw_ver_;
  fw_ver_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::FwVersion* DeviceInfo::mutable_fw_ver() {
  set_has_fw_ver();
  if (fw_ver_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::FwVersion>(GetArenaNoVirtual());
    fw_ver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DeviceInfo.fw_ver)
  return fw_ver_;
}
inline void DeviceInfo::set_allocated_fw_ver(::frl::device::wireformat::FwVersion* fw_ver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fw_ver_;
  }
  if (fw_ver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fw_ver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fw_ver, submessage_arena);
    }
    set_has_fw_ver();
  } else {
    clear_has_fw_ver();
  }
  fw_ver_ = fw_ver;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.DeviceInfo.fw_ver)
}

// optional .frl.device.wireformat.ProtocolVersion p_ver = 3;
inline bool DeviceInfo::has_p_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfo::set_has_p_ver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfo::clear_has_p_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfo::clear_p_ver() {
  if (p_ver_ != NULL) p_ver_->Clear();
  clear_has_p_ver();
}
inline const ::frl::device::wireformat::ProtocolVersion& DeviceInfo::_internal_p_ver() const {
  return *p_ver_;
}
inline const ::frl::device::wireformat::ProtocolVersion& DeviceInfo::p_ver() const {
  const ::frl::device::wireformat::ProtocolVersion* p = p_ver_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DeviceInfo.p_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::ProtocolVersion*>(
      &::frl::device::wireformat::_ProtocolVersion_default_instance_);
}
inline ::frl::device::wireformat::ProtocolVersion* DeviceInfo::release_p_ver() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.DeviceInfo.p_ver)
  clear_has_p_ver();
  ::frl::device::wireformat::ProtocolVersion* temp = p_ver_;
  p_ver_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::ProtocolVersion* DeviceInfo::mutable_p_ver() {
  set_has_p_ver();
  if (p_ver_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::ProtocolVersion>(GetArenaNoVirtual());
    p_ver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DeviceInfo.p_ver)
  return p_ver_;
}
inline void DeviceInfo::set_allocated_p_ver(::frl::device::wireformat::ProtocolVersion* p_ver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_ver_;
  }
  if (p_ver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_ver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_ver, submessage_arena);
    }
    set_has_p_ver();
  } else {
    clear_has_p_ver();
  }
  p_ver_ = p_ver;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.DeviceInfo.p_ver)
}

// optional .frl.device.wireformat.MfgDate mfg_date = 4;
inline bool DeviceInfo::has_mfg_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfo::set_has_mfg_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceInfo::clear_has_mfg_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceInfo::clear_mfg_date() {
  if (mfg_date_ != NULL) mfg_date_->Clear();
  clear_has_mfg_date();
}
inline const ::frl::device::wireformat::MfgDate& DeviceInfo::_internal_mfg_date() const {
  return *mfg_date_;
}
inline const ::frl::device::wireformat::MfgDate& DeviceInfo::mfg_date() const {
  const ::frl::device::wireformat::MfgDate* p = mfg_date_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DeviceInfo.mfg_date)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::MfgDate*>(
      &::frl::device::wireformat::_MfgDate_default_instance_);
}
inline ::frl::device::wireformat::MfgDate* DeviceInfo::release_mfg_date() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.DeviceInfo.mfg_date)
  clear_has_mfg_date();
  ::frl::device::wireformat::MfgDate* temp = mfg_date_;
  mfg_date_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::MfgDate* DeviceInfo::mutable_mfg_date() {
  set_has_mfg_date();
  if (mfg_date_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::MfgDate>(GetArenaNoVirtual());
    mfg_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DeviceInfo.mfg_date)
  return mfg_date_;
}
inline void DeviceInfo::set_allocated_mfg_date(::frl::device::wireformat::MfgDate* mfg_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mfg_date_;
  }
  if (mfg_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mfg_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mfg_date, submessage_arena);
    }
    set_has_mfg_date();
  } else {
    clear_has_mfg_date();
  }
  mfg_date_ = mfg_date;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.DeviceInfo.mfg_date)
}

// optional .frl.device.wireformat.HwVersion hw_ver = 5;
inline bool DeviceInfo::has_hw_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceInfo::set_has_hw_ver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceInfo::clear_has_hw_ver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceInfo::clear_hw_ver() {
  if (hw_ver_ != NULL) hw_ver_->Clear();
  clear_has_hw_ver();
}
inline const ::frl::device::wireformat::HwVersion& DeviceInfo::_internal_hw_ver() const {
  return *hw_ver_;
}
inline const ::frl::device::wireformat::HwVersion& DeviceInfo::hw_ver() const {
  const ::frl::device::wireformat::HwVersion* p = hw_ver_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DeviceInfo.hw_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::HwVersion*>(
      &::frl::device::wireformat::_HwVersion_default_instance_);
}
inline ::frl::device::wireformat::HwVersion* DeviceInfo::release_hw_ver() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.DeviceInfo.hw_ver)
  clear_has_hw_ver();
  ::frl::device::wireformat::HwVersion* temp = hw_ver_;
  hw_ver_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::HwVersion* DeviceInfo::mutable_hw_ver() {
  set_has_hw_ver();
  if (hw_ver_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::HwVersion>(GetArenaNoVirtual());
    hw_ver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DeviceInfo.hw_ver)
  return hw_ver_;
}
inline void DeviceInfo::set_allocated_hw_ver(::frl::device::wireformat::HwVersion* hw_ver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hw_ver_;
  }
  if (hw_ver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hw_ver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hw_ver, submessage_arena);
    }
    set_has_hw_ver();
  } else {
    clear_has_hw_ver();
  }
  hw_ver_ = hw_ver;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.DeviceInfo.hw_ver)
}

// -------------------------------------------------------------------

// FwVersion

// optional uint32 major = 1;
inline bool FwVersion::has_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FwVersion::set_has_major() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FwVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FwVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
inline ::google::protobuf::uint32 FwVersion::major() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FwVersion.major)
  return major_;
}
inline void FwVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FwVersion.major)
}

// optional uint32 minor = 2;
inline bool FwVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FwVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FwVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FwVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
inline ::google::protobuf::uint32 FwVersion::minor() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FwVersion.minor)
  return minor_;
}
inline void FwVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FwVersion.minor)
}

// optional bytes sha = 3;
inline bool FwVersion::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FwVersion::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FwVersion::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FwVersion::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
inline const ::std::string& FwVersion::sha() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FwVersion.sha)
  return sha_.GetNoArena();
}
inline void FwVersion::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FwVersion.sha)
}
#if LANG_CXX11
inline void FwVersion::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.FwVersion.sha)
}
#endif
inline void FwVersion::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.FwVersion.sha)
}
inline void FwVersion::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.FwVersion.sha)
}
inline ::std::string* FwVersion::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.FwVersion.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FwVersion::release_sha() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.FwVersion.sha)
  if (!has_sha()) {
    return NULL;
  }
  clear_has_sha();
  return sha_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FwVersion::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.FwVersion.sha)
}

// -------------------------------------------------------------------

// HwVersion

// optional uint32 major = 1;
inline bool HwVersion::has_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HwVersion::set_has_major() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HwVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HwVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
inline ::google::protobuf::uint32 HwVersion::major() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.HwVersion.major)
  return major_;
}
inline void HwVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.HwVersion.major)
}

// optional uint32 minor = 2;
inline bool HwVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HwVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HwVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HwVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
inline ::google::protobuf::uint32 HwVersion::minor() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.HwVersion.minor)
  return minor_;
}
inline void HwVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.HwVersion.minor)
}

// optional string model = 3;
inline bool HwVersion::has_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HwVersion::set_has_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HwVersion::clear_has_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HwVersion::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
inline const ::std::string& HwVersion::model() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.HwVersion.model)
  return model_.GetNoArena();
}
inline void HwVersion::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.HwVersion.model)
}
#if LANG_CXX11
inline void HwVersion::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.HwVersion.model)
}
#endif
inline void HwVersion::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.HwVersion.model)
}
inline void HwVersion::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.HwVersion.model)
}
inline ::std::string* HwVersion::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.HwVersion.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HwVersion::release_model() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.HwVersion.model)
  if (!has_model()) {
    return NULL;
  }
  clear_has_model();
  return model_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HwVersion::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.HwVersion.model)
}

// -------------------------------------------------------------------

// ProtocolVersion

// optional uint32 major = 1;
inline bool ProtocolVersion::has_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolVersion::set_has_major() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
inline ::google::protobuf::uint32 ProtocolVersion::major() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ProtocolVersion.major)
  return major_;
}
inline void ProtocolVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ProtocolVersion.major)
}

// optional uint32 minor = 2;
inline bool ProtocolVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
inline ::google::protobuf::uint32 ProtocolVersion::minor() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ProtocolVersion.minor)
  return minor_;
}
inline void ProtocolVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ProtocolVersion.minor)
}

// -------------------------------------------------------------------

// MfgDate

// optional uint32 hour = 1;
inline bool MfgDate::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MfgDate::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MfgDate::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MfgDate::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
inline ::google::protobuf::uint32 MfgDate::hour() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MfgDate.hour)
  return hour_;
}
inline void MfgDate::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MfgDate.hour)
}

// optional uint32 min = 2;
inline bool MfgDate::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MfgDate::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MfgDate::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MfgDate::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 MfgDate::min() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MfgDate.min)
  return min_;
}
inline void MfgDate::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MfgDate.min)
}

// optional uint32 day = 3;
inline bool MfgDate::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MfgDate::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MfgDate::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MfgDate::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 MfgDate::day() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MfgDate.day)
  return day_;
}
inline void MfgDate::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MfgDate.day)
}

// optional uint32 month = 4;
inline bool MfgDate::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MfgDate::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MfgDate::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MfgDate::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 MfgDate::month() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MfgDate.month)
  return month_;
}
inline void MfgDate::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MfgDate.month)
}

// optional uint32 year = 5;
inline bool MfgDate::has_year() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MfgDate::set_has_year() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MfgDate::clear_has_year() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MfgDate::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 MfgDate::year() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.MfgDate.year)
  return year_;
}
inline void MfgDate::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.MfgDate.year)
}

// -------------------------------------------------------------------

// DeviceSerial

// optional bytes hex = 2;
inline bool DeviceSerial::has_hex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceSerial::set_has_hex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceSerial::clear_has_hex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceSerial::clear_hex() {
  hex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hex();
}
inline const ::std::string& DeviceSerial::hex() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DeviceSerial.hex)
  return hex_.GetNoArena();
}
inline void DeviceSerial::set_hex(const ::std::string& value) {
  set_has_hex();
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DeviceSerial.hex)
}
#if LANG_CXX11
inline void DeviceSerial::set_hex(::std::string&& value) {
  set_has_hex();
  hex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frl.device.wireformat.DeviceSerial.hex)
}
#endif
inline void DeviceSerial::set_hex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hex();
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frl.device.wireformat.DeviceSerial.hex)
}
inline void DeviceSerial::set_hex(const void* value, size_t size) {
  set_has_hex();
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frl.device.wireformat.DeviceSerial.hex)
}
inline ::std::string* DeviceSerial::mutable_hex() {
  set_has_hex();
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DeviceSerial.hex)
  return hex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceSerial::release_hex() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.DeviceSerial.hex)
  if (!has_hex()) {
    return NULL;
  }
  clear_has_hex();
  return hex_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceSerial::set_allocated_hex(::std::string* hex) {
  if (hex != NULL) {
    set_has_hex();
  } else {
    clear_has_hex();
  }
  hex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hex);
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.DeviceSerial.hex)
}

// -------------------------------------------------------------------

// ToDeviceMsg

// optional uint32 cmd_id = 1;
inline bool ToDeviceMsg::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToDeviceMsg::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToDeviceMsg::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToDeviceMsg::clear_cmd_id() {
  cmd_id_ = 0u;
  clear_has_cmd_id();
}
inline ::google::protobuf::uint32 ToDeviceMsg::cmd_id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.cmd_id)
  return cmd_id_;
}
inline void ToDeviceMsg::set_cmd_id(::google::protobuf::uint32 value) {
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.cmd_id)
}

// optional .frl.device.wireformat.DispDriverCfgs set_display_cfgs = 2;
inline bool ToDeviceMsg::has_set_display_cfgs() const {
  return Cmd_case() == kSetDisplayCfgs;
}
inline void ToDeviceMsg::set_has_set_display_cfgs() {
  _oneof_case_[0] = kSetDisplayCfgs;
}
inline void ToDeviceMsg::clear_set_display_cfgs() {
  if (has_set_display_cfgs()) {
    delete Cmd_.set_display_cfgs_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::DispDriverCfgs& ToDeviceMsg::_internal_set_display_cfgs() const {
  return *Cmd_.set_display_cfgs_;
}
inline ::frl::device::wireformat::DispDriverCfgs* ToDeviceMsg::release_set_display_cfgs() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_display_cfgs)
  if (has_set_display_cfgs()) {
    clear_has_Cmd();
      ::frl::device::wireformat::DispDriverCfgs* temp = Cmd_.set_display_cfgs_;
    Cmd_.set_display_cfgs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::DispDriverCfgs& ToDeviceMsg::set_display_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_display_cfgs)
  return has_set_display_cfgs()
      ? *Cmd_.set_display_cfgs_
      : *reinterpret_cast< ::frl::device::wireformat::DispDriverCfgs*>(&::frl::device::wireformat::_DispDriverCfgs_default_instance_);
}
inline ::frl::device::wireformat::DispDriverCfgs* ToDeviceMsg::mutable_set_display_cfgs() {
  if (!has_set_display_cfgs()) {
    clear_Cmd();
    set_has_set_display_cfgs();
    Cmd_.set_display_cfgs_ = CreateMaybeMessage< ::frl::device::wireformat::DispDriverCfgs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_display_cfgs)
  return Cmd_.set_display_cfgs_;
}

// optional .frl.device.wireformat.GyroCfgs set_gyro_cfgs = 3;
inline bool ToDeviceMsg::has_set_gyro_cfgs() const {
  return Cmd_case() == kSetGyroCfgs;
}
inline void ToDeviceMsg::set_has_set_gyro_cfgs() {
  _oneof_case_[0] = kSetGyroCfgs;
}
inline void ToDeviceMsg::clear_set_gyro_cfgs() {
  if (has_set_gyro_cfgs()) {
    delete Cmd_.set_gyro_cfgs_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::GyroCfgs& ToDeviceMsg::_internal_set_gyro_cfgs() const {
  return *Cmd_.set_gyro_cfgs_;
}
inline ::frl::device::wireformat::GyroCfgs* ToDeviceMsg::release_set_gyro_cfgs() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_gyro_cfgs)
  if (has_set_gyro_cfgs()) {
    clear_has_Cmd();
      ::frl::device::wireformat::GyroCfgs* temp = Cmd_.set_gyro_cfgs_;
    Cmd_.set_gyro_cfgs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::GyroCfgs& ToDeviceMsg::set_gyro_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_gyro_cfgs)
  return has_set_gyro_cfgs()
      ? *Cmd_.set_gyro_cfgs_
      : *reinterpret_cast< ::frl::device::wireformat::GyroCfgs*>(&::frl::device::wireformat::_GyroCfgs_default_instance_);
}
inline ::frl::device::wireformat::GyroCfgs* ToDeviceMsg::mutable_set_gyro_cfgs() {
  if (!has_set_gyro_cfgs()) {
    clear_Cmd();
    set_has_set_gyro_cfgs();
    Cmd_.set_gyro_cfgs_ = CreateMaybeMessage< ::frl::device::wireformat::GyroCfgs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_gyro_cfgs)
  return Cmd_.set_gyro_cfgs_;
}

// optional .frl.device.wireformat.AccCfgs set_acc_cfgs = 4;
inline bool ToDeviceMsg::has_set_acc_cfgs() const {
  return Cmd_case() == kSetAccCfgs;
}
inline void ToDeviceMsg::set_has_set_acc_cfgs() {
  _oneof_case_[0] = kSetAccCfgs;
}
inline void ToDeviceMsg::clear_set_acc_cfgs() {
  if (has_set_acc_cfgs()) {
    delete Cmd_.set_acc_cfgs_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::AccCfgs& ToDeviceMsg::_internal_set_acc_cfgs() const {
  return *Cmd_.set_acc_cfgs_;
}
inline ::frl::device::wireformat::AccCfgs* ToDeviceMsg::release_set_acc_cfgs() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_acc_cfgs)
  if (has_set_acc_cfgs()) {
    clear_has_Cmd();
      ::frl::device::wireformat::AccCfgs* temp = Cmd_.set_acc_cfgs_;
    Cmd_.set_acc_cfgs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::AccCfgs& ToDeviceMsg::set_acc_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_acc_cfgs)
  return has_set_acc_cfgs()
      ? *Cmd_.set_acc_cfgs_
      : *reinterpret_cast< ::frl::device::wireformat::AccCfgs*>(&::frl::device::wireformat::_AccCfgs_default_instance_);
}
inline ::frl::device::wireformat::AccCfgs* ToDeviceMsg::mutable_set_acc_cfgs() {
  if (!has_set_acc_cfgs()) {
    clear_Cmd();
    set_has_set_acc_cfgs();
    Cmd_.set_acc_cfgs_ = CreateMaybeMessage< ::frl::device::wireformat::AccCfgs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_acc_cfgs)
  return Cmd_.set_acc_cfgs_;
}

// optional .frl.device.wireformat.BaroCfgs set_baro_cfgs = 5;
inline bool ToDeviceMsg::has_set_baro_cfgs() const {
  return Cmd_case() == kSetBaroCfgs;
}
inline void ToDeviceMsg::set_has_set_baro_cfgs() {
  _oneof_case_[0] = kSetBaroCfgs;
}
inline void ToDeviceMsg::clear_set_baro_cfgs() {
  if (has_set_baro_cfgs()) {
    delete Cmd_.set_baro_cfgs_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::BaroCfgs& ToDeviceMsg::_internal_set_baro_cfgs() const {
  return *Cmd_.set_baro_cfgs_;
}
inline ::frl::device::wireformat::BaroCfgs* ToDeviceMsg::release_set_baro_cfgs() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_baro_cfgs)
  if (has_set_baro_cfgs()) {
    clear_has_Cmd();
      ::frl::device::wireformat::BaroCfgs* temp = Cmd_.set_baro_cfgs_;
    Cmd_.set_baro_cfgs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::BaroCfgs& ToDeviceMsg::set_baro_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_baro_cfgs)
  return has_set_baro_cfgs()
      ? *Cmd_.set_baro_cfgs_
      : *reinterpret_cast< ::frl::device::wireformat::BaroCfgs*>(&::frl::device::wireformat::_BaroCfgs_default_instance_);
}
inline ::frl::device::wireformat::BaroCfgs* ToDeviceMsg::mutable_set_baro_cfgs() {
  if (!has_set_baro_cfgs()) {
    clear_Cmd();
    set_has_set_baro_cfgs();
    Cmd_.set_baro_cfgs_ = CreateMaybeMessage< ::frl::device::wireformat::BaroCfgs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_baro_cfgs)
  return Cmd_.set_baro_cfgs_;
}

// optional .frl.device.wireformat.FanCfgs set_fan_cfgs = 6;
inline bool ToDeviceMsg::has_set_fan_cfgs() const {
  return Cmd_case() == kSetFanCfgs;
}
inline void ToDeviceMsg::set_has_set_fan_cfgs() {
  _oneof_case_[0] = kSetFanCfgs;
}
inline void ToDeviceMsg::clear_set_fan_cfgs() {
  if (has_set_fan_cfgs()) {
    delete Cmd_.set_fan_cfgs_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::FanCfgs& ToDeviceMsg::_internal_set_fan_cfgs() const {
  return *Cmd_.set_fan_cfgs_;
}
inline ::frl::device::wireformat::FanCfgs* ToDeviceMsg::release_set_fan_cfgs() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_fan_cfgs)
  if (has_set_fan_cfgs()) {
    clear_has_Cmd();
      ::frl::device::wireformat::FanCfgs* temp = Cmd_.set_fan_cfgs_;
    Cmd_.set_fan_cfgs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::FanCfgs& ToDeviceMsg::set_fan_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_fan_cfgs)
  return has_set_fan_cfgs()
      ? *Cmd_.set_fan_cfgs_
      : *reinterpret_cast< ::frl::device::wireformat::FanCfgs*>(&::frl::device::wireformat::_FanCfgs_default_instance_);
}
inline ::frl::device::wireformat::FanCfgs* ToDeviceMsg::mutable_set_fan_cfgs() {
  if (!has_set_fan_cfgs()) {
    clear_Cmd();
    set_has_set_fan_cfgs();
    Cmd_.set_fan_cfgs_ = CreateMaybeMessage< ::frl::device::wireformat::FanCfgs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_fan_cfgs)
  return Cmd_.set_fan_cfgs_;
}

// optional .frl.device.wireformat.TimerCfg set_timer_cfg = 7;
inline bool ToDeviceMsg::has_set_timer_cfg() const {
  return Cmd_case() == kSetTimerCfg;
}
inline void ToDeviceMsg::set_has_set_timer_cfg() {
  _oneof_case_[0] = kSetTimerCfg;
}
inline void ToDeviceMsg::clear_set_timer_cfg() {
  if (has_set_timer_cfg()) {
    delete Cmd_.set_timer_cfg_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::TimerCfg& ToDeviceMsg::_internal_set_timer_cfg() const {
  return *Cmd_.set_timer_cfg_;
}
inline ::frl::device::wireformat::TimerCfg* ToDeviceMsg::release_set_timer_cfg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_timer_cfg)
  if (has_set_timer_cfg()) {
    clear_has_Cmd();
      ::frl::device::wireformat::TimerCfg* temp = Cmd_.set_timer_cfg_;
    Cmd_.set_timer_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::TimerCfg& ToDeviceMsg::set_timer_cfg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_timer_cfg)
  return has_set_timer_cfg()
      ? *Cmd_.set_timer_cfg_
      : *reinterpret_cast< ::frl::device::wireformat::TimerCfg*>(&::frl::device::wireformat::_TimerCfg_default_instance_);
}
inline ::frl::device::wireformat::TimerCfg* ToDeviceMsg::mutable_set_timer_cfg() {
  if (!has_set_timer_cfg()) {
    clear_Cmd();
    set_has_set_timer_cfg();
    Cmd_.set_timer_cfg_ = CreateMaybeMessage< ::frl::device::wireformat::TimerCfg >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_timer_cfg)
  return Cmd_.set_timer_cfg_;
}

// optional .frl.device.wireformat.TrigCfg set_trig_cfg = 8;
inline bool ToDeviceMsg::has_set_trig_cfg() const {
  return Cmd_case() == kSetTrigCfg;
}
inline void ToDeviceMsg::set_has_set_trig_cfg() {
  _oneof_case_[0] = kSetTrigCfg;
}
inline void ToDeviceMsg::clear_set_trig_cfg() {
  if (has_set_trig_cfg()) {
    delete Cmd_.set_trig_cfg_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::TrigCfg& ToDeviceMsg::_internal_set_trig_cfg() const {
  return *Cmd_.set_trig_cfg_;
}
inline ::frl::device::wireformat::TrigCfg* ToDeviceMsg::release_set_trig_cfg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_trig_cfg)
  if (has_set_trig_cfg()) {
    clear_has_Cmd();
      ::frl::device::wireformat::TrigCfg* temp = Cmd_.set_trig_cfg_;
    Cmd_.set_trig_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::TrigCfg& ToDeviceMsg::set_trig_cfg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_trig_cfg)
  return has_set_trig_cfg()
      ? *Cmd_.set_trig_cfg_
      : *reinterpret_cast< ::frl::device::wireformat::TrigCfg*>(&::frl::device::wireformat::_TrigCfg_default_instance_);
}
inline ::frl::device::wireformat::TrigCfg* ToDeviceMsg::mutable_set_trig_cfg() {
  if (!has_set_trig_cfg()) {
    clear_Cmd();
    set_has_set_trig_cfg();
    Cmd_.set_trig_cfg_ = CreateMaybeMessage< ::frl::device::wireformat::TrigCfg >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_trig_cfg)
  return Cmd_.set_trig_cfg_;
}

// optional .frl.device.wireformat.SyncCfg set_sync_cfg = 9;
inline bool ToDeviceMsg::has_set_sync_cfg() const {
  return Cmd_case() == kSetSyncCfg;
}
inline void ToDeviceMsg::set_has_set_sync_cfg() {
  _oneof_case_[0] = kSetSyncCfg;
}
inline void ToDeviceMsg::clear_set_sync_cfg() {
  if (has_set_sync_cfg()) {
    delete Cmd_.set_sync_cfg_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::SyncCfg& ToDeviceMsg::_internal_set_sync_cfg() const {
  return *Cmd_.set_sync_cfg_;
}
inline ::frl::device::wireformat::SyncCfg* ToDeviceMsg::release_set_sync_cfg() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_sync_cfg)
  if (has_set_sync_cfg()) {
    clear_has_Cmd();
      ::frl::device::wireformat::SyncCfg* temp = Cmd_.set_sync_cfg_;
    Cmd_.set_sync_cfg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::SyncCfg& ToDeviceMsg::set_sync_cfg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_sync_cfg)
  return has_set_sync_cfg()
      ? *Cmd_.set_sync_cfg_
      : *reinterpret_cast< ::frl::device::wireformat::SyncCfg*>(&::frl::device::wireformat::_SyncCfg_default_instance_);
}
inline ::frl::device::wireformat::SyncCfg* ToDeviceMsg::mutable_set_sync_cfg() {
  if (!has_set_sync_cfg()) {
    clear_Cmd();
    set_has_set_sync_cfg();
    Cmd_.set_sync_cfg_ = CreateMaybeMessage< ::frl::device::wireformat::SyncCfg >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_sync_cfg)
  return Cmd_.set_sync_cfg_;
}

// optional .frl.device.wireformat.DeviceSerial set_serial = 10;
inline bool ToDeviceMsg::has_set_serial() const {
  return Cmd_case() == kSetSerial;
}
inline void ToDeviceMsg::set_has_set_serial() {
  _oneof_case_[0] = kSetSerial;
}
inline void ToDeviceMsg::clear_set_serial() {
  if (has_set_serial()) {
    delete Cmd_.set_serial_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::DeviceSerial& ToDeviceMsg::_internal_set_serial() const {
  return *Cmd_.set_serial_;
}
inline ::frl::device::wireformat::DeviceSerial* ToDeviceMsg::release_set_serial() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_serial)
  if (has_set_serial()) {
    clear_has_Cmd();
      ::frl::device::wireformat::DeviceSerial* temp = Cmd_.set_serial_;
    Cmd_.set_serial_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::DeviceSerial& ToDeviceMsg::set_serial() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_serial)
  return has_set_serial()
      ? *Cmd_.set_serial_
      : *reinterpret_cast< ::frl::device::wireformat::DeviceSerial*>(&::frl::device::wireformat::_DeviceSerial_default_instance_);
}
inline ::frl::device::wireformat::DeviceSerial* ToDeviceMsg::mutable_set_serial() {
  if (!has_set_serial()) {
    clear_Cmd();
    set_has_set_serial();
    Cmd_.set_serial_ = CreateMaybeMessage< ::frl::device::wireformat::DeviceSerial >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_serial)
  return Cmd_.set_serial_;
}

// optional .frl.device.wireformat.VFMotorCfgs set_vfmotor_cfgs = 11;
inline bool ToDeviceMsg::has_set_vfmotor_cfgs() const {
  return Cmd_case() == kSetVfmotorCfgs;
}
inline void ToDeviceMsg::set_has_set_vfmotor_cfgs() {
  _oneof_case_[0] = kSetVfmotorCfgs;
}
inline void ToDeviceMsg::clear_set_vfmotor_cfgs() {
  if (has_set_vfmotor_cfgs()) {
    delete Cmd_.set_vfmotor_cfgs_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::VFMotorCfgs& ToDeviceMsg::_internal_set_vfmotor_cfgs() const {
  return *Cmd_.set_vfmotor_cfgs_;
}
inline ::frl::device::wireformat::VFMotorCfgs* ToDeviceMsg::release_set_vfmotor_cfgs() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cfgs)
  if (has_set_vfmotor_cfgs()) {
    clear_has_Cmd();
      ::frl::device::wireformat::VFMotorCfgs* temp = Cmd_.set_vfmotor_cfgs_;
    Cmd_.set_vfmotor_cfgs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::VFMotorCfgs& ToDeviceMsg::set_vfmotor_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cfgs)
  return has_set_vfmotor_cfgs()
      ? *Cmd_.set_vfmotor_cfgs_
      : *reinterpret_cast< ::frl::device::wireformat::VFMotorCfgs*>(&::frl::device::wireformat::_VFMotorCfgs_default_instance_);
}
inline ::frl::device::wireformat::VFMotorCfgs* ToDeviceMsg::mutable_set_vfmotor_cfgs() {
  if (!has_set_vfmotor_cfgs()) {
    clear_Cmd();
    set_has_set_vfmotor_cfgs();
    Cmd_.set_vfmotor_cfgs_ = CreateMaybeMessage< ::frl::device::wireformat::VFMotorCfgs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cfgs)
  return Cmd_.set_vfmotor_cfgs_;
}

// optional .frl.device.wireformat.VFMotorCmds set_vfmotor_cmd = 12;
inline bool ToDeviceMsg::has_set_vfmotor_cmd() const {
  return Cmd_case() == kSetVfmotorCmd;
}
inline void ToDeviceMsg::set_has_set_vfmotor_cmd() {
  _oneof_case_[0] = kSetVfmotorCmd;
}
inline void ToDeviceMsg::clear_set_vfmotor_cmd() {
  if (has_set_vfmotor_cmd()) {
    delete Cmd_.set_vfmotor_cmd_;
    clear_has_Cmd();
  }
}
inline const ::frl::device::wireformat::VFMotorCmds& ToDeviceMsg::_internal_set_vfmotor_cmd() const {
  return *Cmd_.set_vfmotor_cmd_;
}
inline ::frl::device::wireformat::VFMotorCmds* ToDeviceMsg::release_set_vfmotor_cmd() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cmd)
  if (has_set_vfmotor_cmd()) {
    clear_has_Cmd();
      ::frl::device::wireformat::VFMotorCmds* temp = Cmd_.set_vfmotor_cmd_;
    Cmd_.set_vfmotor_cmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::frl::device::wireformat::VFMotorCmds& ToDeviceMsg::set_vfmotor_cmd() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cmd)
  return has_set_vfmotor_cmd()
      ? *Cmd_.set_vfmotor_cmd_
      : *reinterpret_cast< ::frl::device::wireformat::VFMotorCmds*>(&::frl::device::wireformat::_VFMotorCmds_default_instance_);
}
inline ::frl::device::wireformat::VFMotorCmds* ToDeviceMsg::mutable_set_vfmotor_cmd() {
  if (!has_set_vfmotor_cmd()) {
    clear_Cmd();
    set_has_set_vfmotor_cmd();
    Cmd_.set_vfmotor_cmd_ = CreateMaybeMessage< ::frl::device::wireformat::VFMotorCmds >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ToDeviceMsg.set_vfmotor_cmd)
  return Cmd_.set_vfmotor_cmd_;
}

// optional bool get_display_cfgs = 21;
inline bool ToDeviceMsg::has_get_display_cfgs() const {
  return Cmd_case() == kGetDisplayCfgs;
}
inline void ToDeviceMsg::set_has_get_display_cfgs() {
  _oneof_case_[0] = kGetDisplayCfgs;
}
inline void ToDeviceMsg::clear_get_display_cfgs() {
  if (has_get_display_cfgs()) {
    Cmd_.get_display_cfgs_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_display_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_display_cfgs)
  if (has_get_display_cfgs()) {
    return Cmd_.get_display_cfgs_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_display_cfgs(bool value) {
  if (!has_get_display_cfgs()) {
    clear_Cmd();
    set_has_get_display_cfgs();
  }
  Cmd_.get_display_cfgs_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_display_cfgs)
}

// optional bool get_gyro_cfgs = 22;
inline bool ToDeviceMsg::has_get_gyro_cfgs() const {
  return Cmd_case() == kGetGyroCfgs;
}
inline void ToDeviceMsg::set_has_get_gyro_cfgs() {
  _oneof_case_[0] = kGetGyroCfgs;
}
inline void ToDeviceMsg::clear_get_gyro_cfgs() {
  if (has_get_gyro_cfgs()) {
    Cmd_.get_gyro_cfgs_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_gyro_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_gyro_cfgs)
  if (has_get_gyro_cfgs()) {
    return Cmd_.get_gyro_cfgs_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_gyro_cfgs(bool value) {
  if (!has_get_gyro_cfgs()) {
    clear_Cmd();
    set_has_get_gyro_cfgs();
  }
  Cmd_.get_gyro_cfgs_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_gyro_cfgs)
}

// optional bool get_acc_cfgs = 23;
inline bool ToDeviceMsg::has_get_acc_cfgs() const {
  return Cmd_case() == kGetAccCfgs;
}
inline void ToDeviceMsg::set_has_get_acc_cfgs() {
  _oneof_case_[0] = kGetAccCfgs;
}
inline void ToDeviceMsg::clear_get_acc_cfgs() {
  if (has_get_acc_cfgs()) {
    Cmd_.get_acc_cfgs_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_acc_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_acc_cfgs)
  if (has_get_acc_cfgs()) {
    return Cmd_.get_acc_cfgs_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_acc_cfgs(bool value) {
  if (!has_get_acc_cfgs()) {
    clear_Cmd();
    set_has_get_acc_cfgs();
  }
  Cmd_.get_acc_cfgs_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_acc_cfgs)
}

// optional bool get_baro_cfgs = 24;
inline bool ToDeviceMsg::has_get_baro_cfgs() const {
  return Cmd_case() == kGetBaroCfgs;
}
inline void ToDeviceMsg::set_has_get_baro_cfgs() {
  _oneof_case_[0] = kGetBaroCfgs;
}
inline void ToDeviceMsg::clear_get_baro_cfgs() {
  if (has_get_baro_cfgs()) {
    Cmd_.get_baro_cfgs_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_baro_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_baro_cfgs)
  if (has_get_baro_cfgs()) {
    return Cmd_.get_baro_cfgs_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_baro_cfgs(bool value) {
  if (!has_get_baro_cfgs()) {
    clear_Cmd();
    set_has_get_baro_cfgs();
  }
  Cmd_.get_baro_cfgs_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_baro_cfgs)
}

// optional bool get_fans_cfgs = 25;
inline bool ToDeviceMsg::has_get_fans_cfgs() const {
  return Cmd_case() == kGetFansCfgs;
}
inline void ToDeviceMsg::set_has_get_fans_cfgs() {
  _oneof_case_[0] = kGetFansCfgs;
}
inline void ToDeviceMsg::clear_get_fans_cfgs() {
  if (has_get_fans_cfgs()) {
    Cmd_.get_fans_cfgs_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_fans_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_fans_cfgs)
  if (has_get_fans_cfgs()) {
    return Cmd_.get_fans_cfgs_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_fans_cfgs(bool value) {
  if (!has_get_fans_cfgs()) {
    clear_Cmd();
    set_has_get_fans_cfgs();
  }
  Cmd_.get_fans_cfgs_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_fans_cfgs)
}

// optional bool get_timer_cfg = 26;
inline bool ToDeviceMsg::has_get_timer_cfg() const {
  return Cmd_case() == kGetTimerCfg;
}
inline void ToDeviceMsg::set_has_get_timer_cfg() {
  _oneof_case_[0] = kGetTimerCfg;
}
inline void ToDeviceMsg::clear_get_timer_cfg() {
  if (has_get_timer_cfg()) {
    Cmd_.get_timer_cfg_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_timer_cfg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_timer_cfg)
  if (has_get_timer_cfg()) {
    return Cmd_.get_timer_cfg_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_timer_cfg(bool value) {
  if (!has_get_timer_cfg()) {
    clear_Cmd();
    set_has_get_timer_cfg();
  }
  Cmd_.get_timer_cfg_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_timer_cfg)
}

// optional bool get_trig_cfg = 27;
inline bool ToDeviceMsg::has_get_trig_cfg() const {
  return Cmd_case() == kGetTrigCfg;
}
inline void ToDeviceMsg::set_has_get_trig_cfg() {
  _oneof_case_[0] = kGetTrigCfg;
}
inline void ToDeviceMsg::clear_get_trig_cfg() {
  if (has_get_trig_cfg()) {
    Cmd_.get_trig_cfg_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_trig_cfg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_trig_cfg)
  if (has_get_trig_cfg()) {
    return Cmd_.get_trig_cfg_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_trig_cfg(bool value) {
  if (!has_get_trig_cfg()) {
    clear_Cmd();
    set_has_get_trig_cfg();
  }
  Cmd_.get_trig_cfg_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_trig_cfg)
}

// optional bool get_sync_cfg = 28;
inline bool ToDeviceMsg::has_get_sync_cfg() const {
  return Cmd_case() == kGetSyncCfg;
}
inline void ToDeviceMsg::set_has_get_sync_cfg() {
  _oneof_case_[0] = kGetSyncCfg;
}
inline void ToDeviceMsg::clear_get_sync_cfg() {
  if (has_get_sync_cfg()) {
    Cmd_.get_sync_cfg_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_sync_cfg() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_sync_cfg)
  if (has_get_sync_cfg()) {
    return Cmd_.get_sync_cfg_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_sync_cfg(bool value) {
  if (!has_get_sync_cfg()) {
    clear_Cmd();
    set_has_get_sync_cfg();
  }
  Cmd_.get_sync_cfg_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_sync_cfg)
}

// optional bool get_device_serial = 29;
inline bool ToDeviceMsg::has_get_device_serial() const {
  return Cmd_case() == kGetDeviceSerial;
}
inline void ToDeviceMsg::set_has_get_device_serial() {
  _oneof_case_[0] = kGetDeviceSerial;
}
inline void ToDeviceMsg::clear_get_device_serial() {
  if (has_get_device_serial()) {
    Cmd_.get_device_serial_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_device_serial() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_device_serial)
  if (has_get_device_serial()) {
    return Cmd_.get_device_serial_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_device_serial(bool value) {
  if (!has_get_device_serial()) {
    clear_Cmd();
    set_has_get_device_serial();
  }
  Cmd_.get_device_serial_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_device_serial)
}

// optional bool get_board_info = 30;
inline bool ToDeviceMsg::has_get_board_info() const {
  return Cmd_case() == kGetBoardInfo;
}
inline void ToDeviceMsg::set_has_get_board_info() {
  _oneof_case_[0] = kGetBoardInfo;
}
inline void ToDeviceMsg::clear_get_board_info() {
  if (has_get_board_info()) {
    Cmd_.get_board_info_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_board_info() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_board_info)
  if (has_get_board_info()) {
    return Cmd_.get_board_info_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_board_info(bool value) {
  if (!has_get_board_info()) {
    clear_Cmd();
    set_has_get_board_info();
  }
  Cmd_.get_board_info_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_board_info)
}

// optional bool get_protocol_version = 31;
inline bool ToDeviceMsg::has_get_protocol_version() const {
  return Cmd_case() == kGetProtocolVersion;
}
inline void ToDeviceMsg::set_has_get_protocol_version() {
  _oneof_case_[0] = kGetProtocolVersion;
}
inline void ToDeviceMsg::clear_get_protocol_version() {
  if (has_get_protocol_version()) {
    Cmd_.get_protocol_version_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_protocol_version() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_protocol_version)
  if (has_get_protocol_version()) {
    return Cmd_.get_protocol_version_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_protocol_version(bool value) {
  if (!has_get_protocol_version()) {
    clear_Cmd();
    set_has_get_protocol_version();
  }
  Cmd_.get_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_protocol_version)
}

// optional bool get_fw_version = 32;
inline bool ToDeviceMsg::has_get_fw_version() const {
  return Cmd_case() == kGetFwVersion;
}
inline void ToDeviceMsg::set_has_get_fw_version() {
  _oneof_case_[0] = kGetFwVersion;
}
inline void ToDeviceMsg::clear_get_fw_version() {
  if (has_get_fw_version()) {
    Cmd_.get_fw_version_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_fw_version() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_fw_version)
  if (has_get_fw_version()) {
    return Cmd_.get_fw_version_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_fw_version(bool value) {
  if (!has_get_fw_version()) {
    clear_Cmd();
    set_has_get_fw_version();
  }
  Cmd_.get_fw_version_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_fw_version)
}

// optional bool get_hw_version = 33;
inline bool ToDeviceMsg::has_get_hw_version() const {
  return Cmd_case() == kGetHwVersion;
}
inline void ToDeviceMsg::set_has_get_hw_version() {
  _oneof_case_[0] = kGetHwVersion;
}
inline void ToDeviceMsg::clear_get_hw_version() {
  if (has_get_hw_version()) {
    Cmd_.get_hw_version_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_hw_version() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_hw_version)
  if (has_get_hw_version()) {
    return Cmd_.get_hw_version_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_hw_version(bool value) {
  if (!has_get_hw_version()) {
    clear_Cmd();
    set_has_get_hw_version();
  }
  Cmd_.get_hw_version_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_hw_version)
}

// optional bool get_mfg_date = 34;
inline bool ToDeviceMsg::has_get_mfg_date() const {
  return Cmd_case() == kGetMfgDate;
}
inline void ToDeviceMsg::set_has_get_mfg_date() {
  _oneof_case_[0] = kGetMfgDate;
}
inline void ToDeviceMsg::clear_get_mfg_date() {
  if (has_get_mfg_date()) {
    Cmd_.get_mfg_date_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_mfg_date() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_mfg_date)
  if (has_get_mfg_date()) {
    return Cmd_.get_mfg_date_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_mfg_date(bool value) {
  if (!has_get_mfg_date()) {
    clear_Cmd();
    set_has_get_mfg_date();
  }
  Cmd_.get_mfg_date_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_mfg_date)
}

// optional bool get_vfmotor_states = 35;
inline bool ToDeviceMsg::has_get_vfmotor_states() const {
  return Cmd_case() == kGetVfmotorStates;
}
inline void ToDeviceMsg::set_has_get_vfmotor_states() {
  _oneof_case_[0] = kGetVfmotorStates;
}
inline void ToDeviceMsg::clear_get_vfmotor_states() {
  if (has_get_vfmotor_states()) {
    Cmd_.get_vfmotor_states_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_vfmotor_states() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_vfmotor_states)
  if (has_get_vfmotor_states()) {
    return Cmd_.get_vfmotor_states_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_vfmotor_states(bool value) {
  if (!has_get_vfmotor_states()) {
    clear_Cmd();
    set_has_get_vfmotor_states();
  }
  Cmd_.get_vfmotor_states_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_vfmotor_states)
}

// optional bool get_vfmotor_cfgs = 36;
inline bool ToDeviceMsg::has_get_vfmotor_cfgs() const {
  return Cmd_case() == kGetVfmotorCfgs;
}
inline void ToDeviceMsg::set_has_get_vfmotor_cfgs() {
  _oneof_case_[0] = kGetVfmotorCfgs;
}
inline void ToDeviceMsg::clear_get_vfmotor_cfgs() {
  if (has_get_vfmotor_cfgs()) {
    Cmd_.get_vfmotor_cfgs_ = false;
    clear_has_Cmd();
  }
}
inline bool ToDeviceMsg::get_vfmotor_cfgs() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ToDeviceMsg.get_vfmotor_cfgs)
  if (has_get_vfmotor_cfgs()) {
    return Cmd_.get_vfmotor_cfgs_;
  }
  return false;
}
inline void ToDeviceMsg::set_get_vfmotor_cfgs(bool value) {
  if (!has_get_vfmotor_cfgs()) {
    clear_Cmd();
    set_has_get_vfmotor_cfgs();
  }
  Cmd_.get_vfmotor_cfgs_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ToDeviceMsg.get_vfmotor_cfgs)
}

inline bool ToDeviceMsg::has_Cmd() const {
  return Cmd_case() != CMD_NOT_SET;
}
inline void ToDeviceMsg::clear_has_Cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
inline ToDeviceMsg::CmdCase ToDeviceMsg::Cmd_case() const {
  return ToDeviceMsg::CmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReplyMsg

// required uint32 cmd_id = 1;
inline bool ReplyMsg::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReplyMsg::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReplyMsg::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReplyMsg::clear_cmd_id() {
  cmd_id_ = 0u;
  clear_has_cmd_id();
}
inline ::google::protobuf::uint32 ReplyMsg::cmd_id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.cmd_id)
  return cmd_id_;
}
inline void ReplyMsg::set_cmd_id(::google::protobuf::uint32 value) {
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ReplyMsg.cmd_id)
}

// optional bool ack = 2;
inline bool ReplyMsg::has_ack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReplyMsg::set_has_ack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReplyMsg::clear_has_ack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReplyMsg::clear_ack() {
  ack_ = false;
  clear_has_ack();
}
inline bool ReplyMsg::ack() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.ack)
  return ack_;
}
inline void ReplyMsg::set_ack(bool value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.ReplyMsg.ack)
}

// repeated .frl.device.wireformat.GyroCfg gyros = 3;
inline int ReplyMsg::gyros_size() const {
  return gyros_.size();
}
inline void ReplyMsg::clear_gyros() {
  gyros_.Clear();
}
inline ::frl::device::wireformat::GyroCfg* ReplyMsg::mutable_gyros(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.gyros)
  return gyros_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >*
ReplyMsg::mutable_gyros() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.gyros)
  return &gyros_;
}
inline const ::frl::device::wireformat::GyroCfg& ReplyMsg::gyros(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.gyros)
  return gyros_.Get(index);
}
inline ::frl::device::wireformat::GyroCfg* ReplyMsg::add_gyros() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.gyros)
  return gyros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >&
ReplyMsg::gyros() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.gyros)
  return gyros_;
}

// repeated .frl.device.wireformat.AccCfg accs = 4;
inline int ReplyMsg::accs_size() const {
  return accs_.size();
}
inline void ReplyMsg::clear_accs() {
  accs_.Clear();
}
inline ::frl::device::wireformat::AccCfg* ReplyMsg::mutable_accs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.accs)
  return accs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >*
ReplyMsg::mutable_accs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.accs)
  return &accs_;
}
inline const ::frl::device::wireformat::AccCfg& ReplyMsg::accs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.accs)
  return accs_.Get(index);
}
inline ::frl::device::wireformat::AccCfg* ReplyMsg::add_accs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.accs)
  return accs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >&
ReplyMsg::accs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.accs)
  return accs_;
}

// repeated .frl.device.wireformat.BaroCfg baro = 5;
inline int ReplyMsg::baro_size() const {
  return baro_.size();
}
inline void ReplyMsg::clear_baro() {
  baro_.Clear();
}
inline ::frl::device::wireformat::BaroCfg* ReplyMsg::mutable_baro(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.baro)
  return baro_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >*
ReplyMsg::mutable_baro() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.baro)
  return &baro_;
}
inline const ::frl::device::wireformat::BaroCfg& ReplyMsg::baro(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.baro)
  return baro_.Get(index);
}
inline ::frl::device::wireformat::BaroCfg* ReplyMsg::add_baro() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.baro)
  return baro_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >&
ReplyMsg::baro() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.baro)
  return baro_;
}

// repeated .frl.device.wireformat.FanCfg fans = 6;
inline int ReplyMsg::fans_size() const {
  return fans_.size();
}
inline void ReplyMsg::clear_fans() {
  fans_.Clear();
}
inline ::frl::device::wireformat::FanCfg* ReplyMsg::mutable_fans(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.fans)
  return fans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >*
ReplyMsg::mutable_fans() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.fans)
  return &fans_;
}
inline const ::frl::device::wireformat::FanCfg& ReplyMsg::fans(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.fans)
  return fans_.Get(index);
}
inline ::frl::device::wireformat::FanCfg* ReplyMsg::add_fans() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.fans)
  return fans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >&
ReplyMsg::fans() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.fans)
  return fans_;
}

// optional .frl.device.wireformat.TimerCfg timer = 7;
inline bool ReplyMsg::has_timer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyMsg::set_has_timer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyMsg::clear_has_timer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyMsg::clear_timer() {
  if (timer_ != NULL) timer_->Clear();
  clear_has_timer();
}
inline const ::frl::device::wireformat::TimerCfg& ReplyMsg::_internal_timer() const {
  return *timer_;
}
inline const ::frl::device::wireformat::TimerCfg& ReplyMsg::timer() const {
  const ::frl::device::wireformat::TimerCfg* p = timer_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.timer)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::TimerCfg*>(
      &::frl::device::wireformat::_TimerCfg_default_instance_);
}
inline ::frl::device::wireformat::TimerCfg* ReplyMsg::release_timer() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.timer)
  clear_has_timer();
  ::frl::device::wireformat::TimerCfg* temp = timer_;
  timer_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::TimerCfg* ReplyMsg::mutable_timer() {
  set_has_timer();
  if (timer_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::TimerCfg>(GetArenaNoVirtual());
    timer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.timer)
  return timer_;
}
inline void ReplyMsg::set_allocated_timer(::frl::device::wireformat::TimerCfg* timer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timer_;
  }
  if (timer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timer, submessage_arena);
    }
    set_has_timer();
  } else {
    clear_has_timer();
  }
  timer_ = timer;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.timer)
}

// repeated .frl.device.wireformat.TrigCfg trigs = 8;
inline int ReplyMsg::trigs_size() const {
  return trigs_.size();
}
inline void ReplyMsg::clear_trigs() {
  trigs_.Clear();
}
inline ::frl::device::wireformat::TrigCfg* ReplyMsg::mutable_trigs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.trigs)
  return trigs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigCfg >*
ReplyMsg::mutable_trigs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.trigs)
  return &trigs_;
}
inline const ::frl::device::wireformat::TrigCfg& ReplyMsg::trigs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.trigs)
  return trigs_.Get(index);
}
inline ::frl::device::wireformat::TrigCfg* ReplyMsg::add_trigs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.trigs)
  return trigs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigCfg >&
ReplyMsg::trigs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.trigs)
  return trigs_;
}

// repeated .frl.device.wireformat.SyncCfg syncs = 9;
inline int ReplyMsg::syncs_size() const {
  return syncs_.size();
}
inline void ReplyMsg::clear_syncs() {
  syncs_.Clear();
}
inline ::frl::device::wireformat::SyncCfg* ReplyMsg::mutable_syncs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.syncs)
  return syncs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncCfg >*
ReplyMsg::mutable_syncs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.syncs)
  return &syncs_;
}
inline const ::frl::device::wireformat::SyncCfg& ReplyMsg::syncs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.syncs)
  return syncs_.Get(index);
}
inline ::frl::device::wireformat::SyncCfg* ReplyMsg::add_syncs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.syncs)
  return syncs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncCfg >&
ReplyMsg::syncs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.syncs)
  return syncs_;
}

// optional .frl.device.wireformat.DeviceInfo info = 10;
inline bool ReplyMsg::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyMsg::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyMsg::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyMsg::clear_info() {
  if (info_ != NULL) info_->Clear();
  clear_has_info();
}
inline const ::frl::device::wireformat::DeviceInfo& ReplyMsg::_internal_info() const {
  return *info_;
}
inline const ::frl::device::wireformat::DeviceInfo& ReplyMsg::info() const {
  const ::frl::device::wireformat::DeviceInfo* p = info_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.info)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::DeviceInfo*>(
      &::frl::device::wireformat::_DeviceInfo_default_instance_);
}
inline ::frl::device::wireformat::DeviceInfo* ReplyMsg::release_info() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.info)
  clear_has_info();
  ::frl::device::wireformat::DeviceInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::DeviceInfo* ReplyMsg::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::DeviceInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.info)
  return info_;
}
inline void ReplyMsg::set_allocated_info(::frl::device::wireformat::DeviceInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
  } else {
    clear_has_info();
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.info)
}

// optional .frl.device.wireformat.FwVersion fw_ver = 11;
inline bool ReplyMsg::has_fw_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyMsg::set_has_fw_ver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyMsg::clear_has_fw_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyMsg::clear_fw_ver() {
  if (fw_ver_ != NULL) fw_ver_->Clear();
  clear_has_fw_ver();
}
inline const ::frl::device::wireformat::FwVersion& ReplyMsg::_internal_fw_ver() const {
  return *fw_ver_;
}
inline const ::frl::device::wireformat::FwVersion& ReplyMsg::fw_ver() const {
  const ::frl::device::wireformat::FwVersion* p = fw_ver_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.fw_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::FwVersion*>(
      &::frl::device::wireformat::_FwVersion_default_instance_);
}
inline ::frl::device::wireformat::FwVersion* ReplyMsg::release_fw_ver() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.fw_ver)
  clear_has_fw_ver();
  ::frl::device::wireformat::FwVersion* temp = fw_ver_;
  fw_ver_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::FwVersion* ReplyMsg::mutable_fw_ver() {
  set_has_fw_ver();
  if (fw_ver_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::FwVersion>(GetArenaNoVirtual());
    fw_ver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.fw_ver)
  return fw_ver_;
}
inline void ReplyMsg::set_allocated_fw_ver(::frl::device::wireformat::FwVersion* fw_ver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fw_ver_;
  }
  if (fw_ver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fw_ver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fw_ver, submessage_arena);
    }
    set_has_fw_ver();
  } else {
    clear_has_fw_ver();
  }
  fw_ver_ = fw_ver;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.fw_ver)
}

// optional .frl.device.wireformat.HwVersion hw_ver = 12;
inline bool ReplyMsg::has_hw_ver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplyMsg::set_has_hw_ver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplyMsg::clear_has_hw_ver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplyMsg::clear_hw_ver() {
  if (hw_ver_ != NULL) hw_ver_->Clear();
  clear_has_hw_ver();
}
inline const ::frl::device::wireformat::HwVersion& ReplyMsg::_internal_hw_ver() const {
  return *hw_ver_;
}
inline const ::frl::device::wireformat::HwVersion& ReplyMsg::hw_ver() const {
  const ::frl::device::wireformat::HwVersion* p = hw_ver_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.hw_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::HwVersion*>(
      &::frl::device::wireformat::_HwVersion_default_instance_);
}
inline ::frl::device::wireformat::HwVersion* ReplyMsg::release_hw_ver() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.hw_ver)
  clear_has_hw_ver();
  ::frl::device::wireformat::HwVersion* temp = hw_ver_;
  hw_ver_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::HwVersion* ReplyMsg::mutable_hw_ver() {
  set_has_hw_ver();
  if (hw_ver_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::HwVersion>(GetArenaNoVirtual());
    hw_ver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.hw_ver)
  return hw_ver_;
}
inline void ReplyMsg::set_allocated_hw_ver(::frl::device::wireformat::HwVersion* hw_ver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hw_ver_;
  }
  if (hw_ver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hw_ver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hw_ver, submessage_arena);
    }
    set_has_hw_ver();
  } else {
    clear_has_hw_ver();
  }
  hw_ver_ = hw_ver;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.hw_ver)
}

// optional .frl.device.wireformat.ProtocolVersion p_ver = 13;
inline bool ReplyMsg::has_p_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplyMsg::set_has_p_ver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplyMsg::clear_has_p_ver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplyMsg::clear_p_ver() {
  if (p_ver_ != NULL) p_ver_->Clear();
  clear_has_p_ver();
}
inline const ::frl::device::wireformat::ProtocolVersion& ReplyMsg::_internal_p_ver() const {
  return *p_ver_;
}
inline const ::frl::device::wireformat::ProtocolVersion& ReplyMsg::p_ver() const {
  const ::frl::device::wireformat::ProtocolVersion* p = p_ver_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.p_ver)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::ProtocolVersion*>(
      &::frl::device::wireformat::_ProtocolVersion_default_instance_);
}
inline ::frl::device::wireformat::ProtocolVersion* ReplyMsg::release_p_ver() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.p_ver)
  clear_has_p_ver();
  ::frl::device::wireformat::ProtocolVersion* temp = p_ver_;
  p_ver_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::ProtocolVersion* ReplyMsg::mutable_p_ver() {
  set_has_p_ver();
  if (p_ver_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::ProtocolVersion>(GetArenaNoVirtual());
    p_ver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.p_ver)
  return p_ver_;
}
inline void ReplyMsg::set_allocated_p_ver(::frl::device::wireformat::ProtocolVersion* p_ver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete p_ver_;
  }
  if (p_ver) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_ver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_ver, submessage_arena);
    }
    set_has_p_ver();
  } else {
    clear_has_p_ver();
  }
  p_ver_ = p_ver;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.p_ver)
}

// optional .frl.device.wireformat.MfgDate mfg_date = 14;
inline bool ReplyMsg::has_mfg_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplyMsg::set_has_mfg_date() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplyMsg::clear_has_mfg_date() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplyMsg::clear_mfg_date() {
  if (mfg_date_ != NULL) mfg_date_->Clear();
  clear_has_mfg_date();
}
inline const ::frl::device::wireformat::MfgDate& ReplyMsg::_internal_mfg_date() const {
  return *mfg_date_;
}
inline const ::frl::device::wireformat::MfgDate& ReplyMsg::mfg_date() const {
  const ::frl::device::wireformat::MfgDate* p = mfg_date_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.mfg_date)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::MfgDate*>(
      &::frl::device::wireformat::_MfgDate_default_instance_);
}
inline ::frl::device::wireformat::MfgDate* ReplyMsg::release_mfg_date() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.mfg_date)
  clear_has_mfg_date();
  ::frl::device::wireformat::MfgDate* temp = mfg_date_;
  mfg_date_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::MfgDate* ReplyMsg::mutable_mfg_date() {
  set_has_mfg_date();
  if (mfg_date_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::MfgDate>(GetArenaNoVirtual());
    mfg_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.mfg_date)
  return mfg_date_;
}
inline void ReplyMsg::set_allocated_mfg_date(::frl::device::wireformat::MfgDate* mfg_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mfg_date_;
  }
  if (mfg_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mfg_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mfg_date, submessage_arena);
    }
    set_has_mfg_date();
  } else {
    clear_has_mfg_date();
  }
  mfg_date_ = mfg_date;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.mfg_date)
}

// optional .frl.device.wireformat.DeviceSerial serial = 15;
inline bool ReplyMsg::has_serial() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReplyMsg::set_has_serial() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReplyMsg::clear_has_serial() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReplyMsg::clear_serial() {
  if (serial_ != NULL) serial_->Clear();
  clear_has_serial();
}
inline const ::frl::device::wireformat::DeviceSerial& ReplyMsg::_internal_serial() const {
  return *serial_;
}
inline const ::frl::device::wireformat::DeviceSerial& ReplyMsg::serial() const {
  const ::frl::device::wireformat::DeviceSerial* p = serial_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.serial)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::DeviceSerial*>(
      &::frl::device::wireformat::_DeviceSerial_default_instance_);
}
inline ::frl::device::wireformat::DeviceSerial* ReplyMsg::release_serial() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.serial)
  clear_has_serial();
  ::frl::device::wireformat::DeviceSerial* temp = serial_;
  serial_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::DeviceSerial* ReplyMsg::mutable_serial() {
  set_has_serial();
  if (serial_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::DeviceSerial>(GetArenaNoVirtual());
    serial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.serial)
  return serial_;
}
inline void ReplyMsg::set_allocated_serial(::frl::device::wireformat::DeviceSerial* serial) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete serial_;
  }
  if (serial) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serial = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serial, submessage_arena);
    }
    set_has_serial();
  } else {
    clear_has_serial();
  }
  serial_ = serial;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.serial)
}

// repeated .frl.device.wireformat.VFMotor vfs = 16;
inline int ReplyMsg::vfs_size() const {
  return vfs_.size();
}
inline void ReplyMsg::clear_vfs() {
  vfs_.Clear();
}
inline ::frl::device::wireformat::VFMotor* ReplyMsg::mutable_vfs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.vfs)
  return vfs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >*
ReplyMsg::mutable_vfs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.vfs)
  return &vfs_;
}
inline const ::frl::device::wireformat::VFMotor& ReplyMsg::vfs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.vfs)
  return vfs_.Get(index);
}
inline ::frl::device::wireformat::VFMotor* ReplyMsg::add_vfs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.vfs)
  return vfs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotor >&
ReplyMsg::vfs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.vfs)
  return vfs_;
}

// optional .frl.device.wireformat.DispDriverCfgs display = 17;
inline bool ReplyMsg::has_display() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReplyMsg::set_has_display() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReplyMsg::clear_has_display() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReplyMsg::clear_display() {
  if (display_ != NULL) display_->Clear();
  clear_has_display();
}
inline const ::frl::device::wireformat::DispDriverCfgs& ReplyMsg::_internal_display() const {
  return *display_;
}
inline const ::frl::device::wireformat::DispDriverCfgs& ReplyMsg::display() const {
  const ::frl::device::wireformat::DispDriverCfgs* p = display_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.display)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::DispDriverCfgs*>(
      &::frl::device::wireformat::_DispDriverCfgs_default_instance_);
}
inline ::frl::device::wireformat::DispDriverCfgs* ReplyMsg::release_display() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.ReplyMsg.display)
  clear_has_display();
  ::frl::device::wireformat::DispDriverCfgs* temp = display_;
  display_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::DispDriverCfgs* ReplyMsg::mutable_display() {
  set_has_display();
  if (display_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::DispDriverCfgs>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.display)
  return display_;
}
inline void ReplyMsg::set_allocated_display(::frl::device::wireformat::DispDriverCfgs* display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete display_;
  }
  if (display) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    set_has_display();
  } else {
    clear_has_display();
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.ReplyMsg.display)
}

// repeated .frl.device.wireformat.VFMotorCfgs vfmotor_cfg = 18;
inline int ReplyMsg::vfmotor_cfg_size() const {
  return vfmotor_cfg_.size();
}
inline void ReplyMsg::clear_vfmotor_cfg() {
  vfmotor_cfg_.Clear();
}
inline ::frl::device::wireformat::VFMotorCfgs* ReplyMsg::mutable_vfmotor_cfg(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.ReplyMsg.vfmotor_cfg)
  return vfmotor_cfg_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfgs >*
ReplyMsg::mutable_vfmotor_cfg() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.ReplyMsg.vfmotor_cfg)
  return &vfmotor_cfg_;
}
inline const ::frl::device::wireformat::VFMotorCfgs& ReplyMsg::vfmotor_cfg(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.ReplyMsg.vfmotor_cfg)
  return vfmotor_cfg_.Get(index);
}
inline ::frl::device::wireformat::VFMotorCfgs* ReplyMsg::add_vfmotor_cfg() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.ReplyMsg.vfmotor_cfg)
  return vfmotor_cfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfgs >&
ReplyMsg::vfmotor_cfg() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.ReplyMsg.vfmotor_cfg)
  return vfmotor_cfg_;
}

// -------------------------------------------------------------------

// DispDriverCfg

// required uint32 id = 1;
inline bool DispDriverCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DispDriverCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DispDriverCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DispDriverCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DispDriverCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfg.id)
  return id_;
}
inline void DispDriverCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DispDriverCfg.id)
}

// required bool active = 2;
inline bool DispDriverCfg::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DispDriverCfg::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DispDriverCfg::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DispDriverCfg::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool DispDriverCfg::active() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfg.active)
  return active_;
}
inline void DispDriverCfg::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DispDriverCfg.active)
}

// optional uint32 brightness = 3;
inline bool DispDriverCfg::has_brightness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DispDriverCfg::set_has_brightness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DispDriverCfg::clear_has_brightness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DispDriverCfg::clear_brightness() {
  brightness_ = 0u;
  clear_has_brightness();
}
inline ::google::protobuf::uint32 DispDriverCfg::brightness() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfg.brightness)
  return brightness_;
}
inline void DispDriverCfg::set_brightness(::google::protobuf::uint32 value) {
  set_has_brightness();
  brightness_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DispDriverCfg.brightness)
}

// optional .frl.device.wireformat.DispDriverCfg.DispDriverMode mode = 4;
inline bool DispDriverCfg::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DispDriverCfg::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DispDriverCfg::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DispDriverCfg::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::frl::device::wireformat::DispDriverCfg_DispDriverMode DispDriverCfg::mode() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfg.mode)
  return static_cast< ::frl::device::wireformat::DispDriverCfg_DispDriverMode >(mode_);
}
inline void DispDriverCfg::set_mode(::frl::device::wireformat::DispDriverCfg_DispDriverMode value) {
  assert(::frl::device::wireformat::DispDriverCfg_DispDriverMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DispDriverCfg.mode)
}

// optional uint32 persistence = 5;
inline bool DispDriverCfg::has_persistence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DispDriverCfg::set_has_persistence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DispDriverCfg::clear_has_persistence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DispDriverCfg::clear_persistence() {
  persistence_ = 0u;
  clear_has_persistence();
}
inline ::google::protobuf::uint32 DispDriverCfg::persistence() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfg.persistence)
  return persistence_;
}
inline void DispDriverCfg::set_persistence(::google::protobuf::uint32 value) {
  set_has_persistence();
  persistence_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DispDriverCfg.persistence)
}

// optional uint32 on_offset = 6;
inline bool DispDriverCfg::has_on_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DispDriverCfg::set_has_on_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DispDriverCfg::clear_has_on_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DispDriverCfg::clear_on_offset() {
  on_offset_ = 0u;
  clear_has_on_offset();
}
inline ::google::protobuf::uint32 DispDriverCfg::on_offset() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfg.on_offset)
  return on_offset_;
}
inline void DispDriverCfg::set_on_offset(::google::protobuf::uint32 value) {
  set_has_on_offset();
  on_offset_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.DispDriverCfg.on_offset)
}

// -------------------------------------------------------------------

// DispDriverCfgs

// repeated .frl.device.wireformat.DispDriverCfg array = 1;
inline int DispDriverCfgs::array_size() const {
  return array_.size();
}
inline void DispDriverCfgs::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::DispDriverCfg* DispDriverCfgs::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.DispDriverCfgs.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::DispDriverCfg >*
DispDriverCfgs::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.DispDriverCfgs.array)
  return &array_;
}
inline const ::frl::device::wireformat::DispDriverCfg& DispDriverCfgs::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.DispDriverCfgs.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::DispDriverCfg* DispDriverCfgs::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.DispDriverCfgs.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::DispDriverCfg >&
DispDriverCfgs::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.DispDriverCfgs.array)
  return array_;
}

// -------------------------------------------------------------------

// GyroCfg

// required uint32 id = 1;
inline bool GyroCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GyroCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GyroCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GyroCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GyroCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.GyroCfg.id)
  return id_;
}
inline void GyroCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.GyroCfg.id)
}

// optional bool streaming = 2;
inline bool GyroCfg::has_streaming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GyroCfg::set_has_streaming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GyroCfg::clear_has_streaming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GyroCfg::clear_streaming() {
  streaming_ = false;
  clear_has_streaming();
}
inline bool GyroCfg::streaming() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.GyroCfg.streaming)
  return streaming_;
}
inline void GyroCfg::set_streaming(bool value) {
  set_has_streaming();
  streaming_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.GyroCfg.streaming)
}

// optional uint32 odr_hz = 3;
inline bool GyroCfg::has_odr_hz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GyroCfg::set_has_odr_hz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GyroCfg::clear_has_odr_hz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GyroCfg::clear_odr_hz() {
  odr_hz_ = 0u;
  clear_has_odr_hz();
}
inline ::google::protobuf::uint32 GyroCfg::odr_hz() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.GyroCfg.odr_hz)
  return odr_hz_;
}
inline void GyroCfg::set_odr_hz(::google::protobuf::uint32 value) {
  set_has_odr_hz();
  odr_hz_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.GyroCfg.odr_hz)
}

// optional uint32 range_dps = 4;
inline bool GyroCfg::has_range_dps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GyroCfg::set_has_range_dps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GyroCfg::clear_has_range_dps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GyroCfg::clear_range_dps() {
  range_dps_ = 0u;
  clear_has_range_dps();
}
inline ::google::protobuf::uint32 GyroCfg::range_dps() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.GyroCfg.range_dps)
  return range_dps_;
}
inline void GyroCfg::set_range_dps(::google::protobuf::uint32 value) {
  set_has_range_dps();
  range_dps_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.GyroCfg.range_dps)
}

// optional uint32 mode = 5;
inline bool GyroCfg::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GyroCfg::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GyroCfg::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GyroCfg::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 GyroCfg::mode() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.GyroCfg.mode)
  return mode_;
}
inline void GyroCfg::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.GyroCfg.mode)
}

// -------------------------------------------------------------------

// GyroCfgs

// repeated .frl.device.wireformat.GyroCfg array = 1;
inline int GyroCfgs::array_size() const {
  return array_.size();
}
inline void GyroCfgs::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::GyroCfg* GyroCfgs::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.GyroCfgs.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >*
GyroCfgs::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.GyroCfgs.array)
  return &array_;
}
inline const ::frl::device::wireformat::GyroCfg& GyroCfgs::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.GyroCfgs.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::GyroCfg* GyroCfgs::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.GyroCfgs.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::GyroCfg >&
GyroCfgs::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.GyroCfgs.array)
  return array_;
}

// -------------------------------------------------------------------

// AccCfg

// required uint32 id = 1;
inline bool AccCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AccCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.AccCfg.id)
  return id_;
}
inline void AccCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.AccCfg.id)
}

// optional bool streaming = 2;
inline bool AccCfg::has_streaming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccCfg::set_has_streaming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccCfg::clear_has_streaming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccCfg::clear_streaming() {
  streaming_ = false;
  clear_has_streaming();
}
inline bool AccCfg::streaming() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.AccCfg.streaming)
  return streaming_;
}
inline void AccCfg::set_streaming(bool value) {
  set_has_streaming();
  streaming_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.AccCfg.streaming)
}

// optional uint32 odr_hz = 3;
inline bool AccCfg::has_odr_hz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccCfg::set_has_odr_hz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccCfg::clear_has_odr_hz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccCfg::clear_odr_hz() {
  odr_hz_ = 0u;
  clear_has_odr_hz();
}
inline ::google::protobuf::uint32 AccCfg::odr_hz() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.AccCfg.odr_hz)
  return odr_hz_;
}
inline void AccCfg::set_odr_hz(::google::protobuf::uint32 value) {
  set_has_odr_hz();
  odr_hz_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.AccCfg.odr_hz)
}

// optional uint32 range_g = 4;
inline bool AccCfg::has_range_g() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccCfg::set_has_range_g() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccCfg::clear_has_range_g() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccCfg::clear_range_g() {
  range_g_ = 0u;
  clear_has_range_g();
}
inline ::google::protobuf::uint32 AccCfg::range_g() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.AccCfg.range_g)
  return range_g_;
}
inline void AccCfg::set_range_g(::google::protobuf::uint32 value) {
  set_has_range_g();
  range_g_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.AccCfg.range_g)
}

// optional uint32 mode = 5;
inline bool AccCfg::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccCfg::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccCfg::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccCfg::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
inline ::google::protobuf::uint32 AccCfg::mode() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.AccCfg.mode)
  return mode_;
}
inline void AccCfg::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.AccCfg.mode)
}

// -------------------------------------------------------------------

// AccCfgs

// repeated .frl.device.wireformat.AccCfg array = 1;
inline int AccCfgs::array_size() const {
  return array_.size();
}
inline void AccCfgs::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::AccCfg* AccCfgs::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.AccCfgs.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >*
AccCfgs::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.AccCfgs.array)
  return &array_;
}
inline const ::frl::device::wireformat::AccCfg& AccCfgs::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.AccCfgs.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::AccCfg* AccCfgs::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.AccCfgs.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::AccCfg >&
AccCfgs::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.AccCfgs.array)
  return array_;
}

// -------------------------------------------------------------------

// BaroCfg

// required uint32 id = 1;
inline bool BaroCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaroCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaroCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaroCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BaroCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.BaroCfg.id)
  return id_;
}
inline void BaroCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.BaroCfg.id)
}

// optional bool streaming = 2;
inline bool BaroCfg::has_streaming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaroCfg::set_has_streaming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaroCfg::clear_has_streaming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaroCfg::clear_streaming() {
  streaming_ = false;
  clear_has_streaming();
}
inline bool BaroCfg::streaming() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.BaroCfg.streaming)
  return streaming_;
}
inline void BaroCfg::set_streaming(bool value) {
  set_has_streaming();
  streaming_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.BaroCfg.streaming)
}

// repeated uint32 raw = 3;
inline int BaroCfg::raw_size() const {
  return raw_.size();
}
inline void BaroCfg::clear_raw() {
  raw_.Clear();
}
inline ::google::protobuf::uint32 BaroCfg::raw(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.BaroCfg.raw)
  return raw_.Get(index);
}
inline void BaroCfg::set_raw(int index, ::google::protobuf::uint32 value) {
  raw_.Set(index, value);
  // @@protoc_insertion_point(field_set:frl.device.wireformat.BaroCfg.raw)
}
inline void BaroCfg::add_raw(::google::protobuf::uint32 value) {
  raw_.Add(value);
  // @@protoc_insertion_point(field_add:frl.device.wireformat.BaroCfg.raw)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BaroCfg::raw() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.BaroCfg.raw)
  return raw_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BaroCfg::mutable_raw() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.BaroCfg.raw)
  return &raw_;
}

// -------------------------------------------------------------------

// BaroCfgs

// repeated .frl.device.wireformat.BaroCfg array = 1;
inline int BaroCfgs::array_size() const {
  return array_.size();
}
inline void BaroCfgs::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::BaroCfg* BaroCfgs::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.BaroCfgs.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >*
BaroCfgs::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.BaroCfgs.array)
  return &array_;
}
inline const ::frl::device::wireformat::BaroCfg& BaroCfgs::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.BaroCfgs.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::BaroCfg* BaroCfgs::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.BaroCfgs.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::BaroCfg >&
BaroCfgs::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.BaroCfgs.array)
  return array_;
}

// -------------------------------------------------------------------

// FanCfg

// required uint32 id = 1;
inline bool FanCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FanCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FanCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FanCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FanCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FanCfg.id)
  return id_;
}
inline void FanCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FanCfg.id)
}

// optional bool active = 2;
inline bool FanCfg::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FanCfg::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FanCfg::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FanCfg::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool FanCfg::active() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FanCfg.active)
  return active_;
}
inline void FanCfg::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FanCfg.active)
}

// optional bool streaming = 3;
inline bool FanCfg::has_streaming() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FanCfg::set_has_streaming() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FanCfg::clear_has_streaming() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FanCfg::clear_streaming() {
  streaming_ = false;
  clear_has_streaming();
}
inline bool FanCfg::streaming() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FanCfg.streaming)
  return streaming_;
}
inline void FanCfg::set_streaming(bool value) {
  set_has_streaming();
  streaming_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FanCfg.streaming)
}

// optional uint32 speed = 4;
inline bool FanCfg::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FanCfg::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FanCfg::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FanCfg::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 FanCfg::speed() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FanCfg.speed)
  return speed_;
}
inline void FanCfg::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.FanCfg.speed)
}

// -------------------------------------------------------------------

// FanCfgs

// repeated .frl.device.wireformat.FanCfg array = 1;
inline int FanCfgs::array_size() const {
  return array_.size();
}
inline void FanCfgs::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::FanCfg* FanCfgs::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.FanCfgs.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >*
FanCfgs::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.FanCfgs.array)
  return &array_;
}
inline const ::frl::device::wireformat::FanCfg& FanCfgs::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.FanCfgs.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::FanCfg* FanCfgs::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.FanCfgs.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::FanCfg >&
FanCfgs::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.FanCfgs.array)
  return array_;
}

// -------------------------------------------------------------------

// TimerCfg

// required uint32 id = 1;
inline bool TimerCfg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimerCfg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimerCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimerCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TimerCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TimerCfg.id)
  return id_;
}
inline void TimerCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TimerCfg.id)
}

// optional .frl.device.wireformat.TimerCfg.Source source = 2;
inline bool TimerCfg::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimerCfg::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimerCfg::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimerCfg::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::frl::device::wireformat::TimerCfg_Source TimerCfg::source() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TimerCfg.source)
  return static_cast< ::frl::device::wireformat::TimerCfg_Source >(source_);
}
inline void TimerCfg::set_source(::frl::device::wireformat::TimerCfg_Source value) {
  assert(::frl::device::wireformat::TimerCfg_Source_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TimerCfg.source)
}

// optional .frl.device.wireformat.TaiTime time = 3;
inline bool TimerCfg::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimerCfg::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimerCfg::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimerCfg::clear_time() {
  if (time_ != NULL) time_->Clear();
  clear_has_time();
}
inline const ::frl::device::wireformat::TaiTime& TimerCfg::_internal_time() const {
  return *time_;
}
inline const ::frl::device::wireformat::TaiTime& TimerCfg::time() const {
  const ::frl::device::wireformat::TaiTime* p = time_;
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TimerCfg.time)
  return p != NULL ? *p : *reinterpret_cast<const ::frl::device::wireformat::TaiTime*>(
      &::frl::device::wireformat::_TaiTime_default_instance_);
}
inline ::frl::device::wireformat::TaiTime* TimerCfg::release_time() {
  // @@protoc_insertion_point(field_release:frl.device.wireformat.TimerCfg.time)
  clear_has_time();
  ::frl::device::wireformat::TaiTime* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::frl::device::wireformat::TaiTime* TimerCfg::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::frl::device::wireformat::TaiTime>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.TimerCfg.time)
  return time_;
}
inline void TimerCfg::set_allocated_time(::frl::device::wireformat::TaiTime* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
  } else {
    clear_has_time();
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:frl.device.wireformat.TimerCfg.time)
}

// -------------------------------------------------------------------

// TrigCfg

// required uint32 id = 1;
inline bool TrigCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrigCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrigCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrigCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TrigCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigCfg.id)
  return id_;
}
inline void TrigCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigCfg.id)
}

// repeated .frl.device.wireformat.TrigChCfg trig_ch_cfgs = 2;
inline int TrigCfg::trig_ch_cfgs_size() const {
  return trig_ch_cfgs_.size();
}
inline void TrigCfg::clear_trig_ch_cfgs() {
  trig_ch_cfgs_.Clear();
}
inline ::frl::device::wireformat::TrigChCfg* TrigCfg::mutable_trig_ch_cfgs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.TrigCfg.trig_ch_cfgs)
  return trig_ch_cfgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigChCfg >*
TrigCfg::mutable_trig_ch_cfgs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.TrigCfg.trig_ch_cfgs)
  return &trig_ch_cfgs_;
}
inline const ::frl::device::wireformat::TrigChCfg& TrigCfg::trig_ch_cfgs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigCfg.trig_ch_cfgs)
  return trig_ch_cfgs_.Get(index);
}
inline ::frl::device::wireformat::TrigChCfg* TrigCfg::add_trig_ch_cfgs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.TrigCfg.trig_ch_cfgs)
  return trig_ch_cfgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::TrigChCfg >&
TrigCfg::trig_ch_cfgs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.TrigCfg.trig_ch_cfgs)
  return trig_ch_cfgs_;
}

// optional .frl.device.wireformat.TrigCfg.Action action = 3;
inline bool TrigCfg::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrigCfg::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrigCfg::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrigCfg::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::frl::device::wireformat::TrigCfg_Action TrigCfg::action() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigCfg.action)
  return static_cast< ::frl::device::wireformat::TrigCfg_Action >(action_);
}
inline void TrigCfg::set_action(::frl::device::wireformat::TrigCfg_Action value) {
  assert(::frl::device::wireformat::TrigCfg_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigCfg.action)
}

// -------------------------------------------------------------------

// TrigChCfg

// optional uint32 channel = 1;
inline bool TrigChCfg::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrigChCfg::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrigChCfg::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrigChCfg::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TrigChCfg::channel() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigChCfg.channel)
  return channel_;
}
inline void TrigChCfg::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigChCfg.channel)
}

// optional uint32 period_us = 2;
inline bool TrigChCfg::has_period_us() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrigChCfg::set_has_period_us() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrigChCfg::clear_has_period_us() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrigChCfg::clear_period_us() {
  period_us_ = 0u;
  clear_has_period_us();
}
inline ::google::protobuf::uint32 TrigChCfg::period_us() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigChCfg.period_us)
  return period_us_;
}
inline void TrigChCfg::set_period_us(::google::protobuf::uint32 value) {
  set_has_period_us();
  period_us_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigChCfg.period_us)
}

// optional uint32 offset_us = 3;
inline bool TrigChCfg::has_offset_us() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrigChCfg::set_has_offset_us() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrigChCfg::clear_has_offset_us() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrigChCfg::clear_offset_us() {
  offset_us_ = 0u;
  clear_has_offset_us();
}
inline ::google::protobuf::uint32 TrigChCfg::offset_us() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigChCfg.offset_us)
  return offset_us_;
}
inline void TrigChCfg::set_offset_us(::google::protobuf::uint32 value) {
  set_has_offset_us();
  offset_us_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigChCfg.offset_us)
}

// optional uint32 master = 4;
inline bool TrigChCfg::has_master() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrigChCfg::set_has_master() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrigChCfg::clear_has_master() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrigChCfg::clear_master() {
  master_ = 0u;
  clear_has_master();
}
inline ::google::protobuf::uint32 TrigChCfg::master() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigChCfg.master)
  return master_;
}
inline void TrigChCfg::set_master(::google::protobuf::uint32 value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigChCfg.master)
}

// optional bool active = 5;
inline bool TrigChCfg::has_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrigChCfg::set_has_active() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrigChCfg::clear_has_active() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrigChCfg::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool TrigChCfg::active() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.TrigChCfg.active)
  return active_;
}
inline void TrigChCfg::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.TrigChCfg.active)
}

// -------------------------------------------------------------------

// SyncCfg

// required uint32 id = 1;
inline bool SyncCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SyncCfg::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncCfg.id)
  return id_;
}
inline void SyncCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.SyncCfg.id)
}

// repeated .frl.device.wireformat.SyncChCfg sync_ch_cfgs = 2;
inline int SyncCfg::sync_ch_cfgs_size() const {
  return sync_ch_cfgs_.size();
}
inline void SyncCfg::clear_sync_ch_cfgs() {
  sync_ch_cfgs_.Clear();
}
inline ::frl::device::wireformat::SyncChCfg* SyncCfg::mutable_sync_ch_cfgs(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.SyncCfg.sync_ch_cfgs)
  return sync_ch_cfgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncChCfg >*
SyncCfg::mutable_sync_ch_cfgs() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.SyncCfg.sync_ch_cfgs)
  return &sync_ch_cfgs_;
}
inline const ::frl::device::wireformat::SyncChCfg& SyncCfg::sync_ch_cfgs(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncCfg.sync_ch_cfgs)
  return sync_ch_cfgs_.Get(index);
}
inline ::frl::device::wireformat::SyncChCfg* SyncCfg::add_sync_ch_cfgs() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.SyncCfg.sync_ch_cfgs)
  return sync_ch_cfgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::SyncChCfg >&
SyncCfg::sync_ch_cfgs() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.SyncCfg.sync_ch_cfgs)
  return sync_ch_cfgs_;
}

// optional .frl.device.wireformat.SyncCfg.Action action = 3;
inline bool SyncCfg::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncCfg::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncCfg::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncCfg::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::frl::device::wireformat::SyncCfg_Action SyncCfg::action() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncCfg.action)
  return static_cast< ::frl::device::wireformat::SyncCfg_Action >(action_);
}
inline void SyncCfg::set_action(::frl::device::wireformat::SyncCfg_Action value) {
  assert(::frl::device::wireformat::SyncCfg_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.SyncCfg.action)
}

// -------------------------------------------------------------------

// SyncChCfg

// optional uint32 channel = 1;
inline bool SyncChCfg::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncChCfg::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncChCfg::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncChCfg::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 SyncChCfg::channel() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncChCfg.channel)
  return channel_;
}
inline void SyncChCfg::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.SyncChCfg.channel)
}

// optional .frl.device.wireformat.SyncChCfg.DIR dir = 2;
inline bool SyncChCfg::has_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncChCfg::set_has_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncChCfg::clear_has_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncChCfg::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::frl::device::wireformat::SyncChCfg_DIR SyncChCfg::dir() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncChCfg.dir)
  return static_cast< ::frl::device::wireformat::SyncChCfg_DIR >(dir_);
}
inline void SyncChCfg::set_dir(::frl::device::wireformat::SyncChCfg_DIR value) {
  assert(::frl::device::wireformat::SyncChCfg_DIR_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.SyncChCfg.dir)
}

// optional uint32 prescaler = 3;
inline bool SyncChCfg::has_prescaler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncChCfg::set_has_prescaler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncChCfg::clear_has_prescaler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncChCfg::clear_prescaler() {
  prescaler_ = 0u;
  clear_has_prescaler();
}
inline ::google::protobuf::uint32 SyncChCfg::prescaler() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncChCfg.prescaler)
  return prescaler_;
}
inline void SyncChCfg::set_prescaler(::google::protobuf::uint32 value) {
  set_has_prescaler();
  prescaler_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.SyncChCfg.prescaler)
}

// optional bool reset_cnt = 4;
inline bool SyncChCfg::has_reset_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncChCfg::set_has_reset_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncChCfg::clear_has_reset_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncChCfg::clear_reset_cnt() {
  reset_cnt_ = false;
  clear_has_reset_cnt();
}
inline bool SyncChCfg::reset_cnt() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.SyncChCfg.reset_cnt)
  return reset_cnt_;
}
inline void SyncChCfg::set_reset_cnt(bool value) {
  set_has_reset_cnt();
  reset_cnt_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.SyncChCfg.reset_cnt)
}

// -------------------------------------------------------------------

// VFMotorCfg

// optional float pid_P = 1;
inline bool VFMotorCfg::has_pid_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VFMotorCfg::set_has_pid_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VFMotorCfg::clear_has_pid_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VFMotorCfg::clear_pid_p() {
  pid_p_ = 0;
  clear_has_pid_p();
}
inline float VFMotorCfg::pid_p() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.pid_P)
  return pid_p_;
}
inline void VFMotorCfg::set_pid_p(float value) {
  set_has_pid_p();
  pid_p_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.pid_P)
}

// optional float pid_I = 2;
inline bool VFMotorCfg::has_pid_i() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VFMotorCfg::set_has_pid_i() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VFMotorCfg::clear_has_pid_i() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VFMotorCfg::clear_pid_i() {
  pid_i_ = 0;
  clear_has_pid_i();
}
inline float VFMotorCfg::pid_i() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.pid_I)
  return pid_i_;
}
inline void VFMotorCfg::set_pid_i(float value) {
  set_has_pid_i();
  pid_i_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.pid_I)
}

// optional float pid_D = 3;
inline bool VFMotorCfg::has_pid_d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VFMotorCfg::set_has_pid_d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VFMotorCfg::clear_has_pid_d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VFMotorCfg::clear_pid_d() {
  pid_d_ = 0;
  clear_has_pid_d();
}
inline float VFMotorCfg::pid_d() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.pid_D)
  return pid_d_;
}
inline void VFMotorCfg::set_pid_d(float value) {
  set_has_pid_d();
  pid_d_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.pid_D)
}

// optional float safety_margin = 4;
inline bool VFMotorCfg::has_safety_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VFMotorCfg::set_has_safety_margin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VFMotorCfg::clear_has_safety_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VFMotorCfg::clear_safety_margin() {
  safety_margin_ = 0;
  clear_has_safety_margin();
}
inline float VFMotorCfg::safety_margin() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.safety_margin)
  return safety_margin_;
}
inline void VFMotorCfg::set_safety_margin(float value) {
  set_has_safety_margin();
  safety_margin_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.safety_margin)
}

// optional float step_limit = 5;
inline bool VFMotorCfg::has_step_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VFMotorCfg::set_has_step_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VFMotorCfg::clear_has_step_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VFMotorCfg::clear_step_limit() {
  step_limit_ = 0;
  clear_has_step_limit();
}
inline float VFMotorCfg::step_limit() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.step_limit)
  return step_limit_;
}
inline void VFMotorCfg::set_step_limit(float value) {
  set_has_step_limit();
  step_limit_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.step_limit)
}

// optional float accel_limit = 6;
inline bool VFMotorCfg::has_accel_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VFMotorCfg::set_has_accel_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VFMotorCfg::clear_has_accel_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VFMotorCfg::clear_accel_limit() {
  accel_limit_ = 0;
  clear_has_accel_limit();
}
inline float VFMotorCfg::accel_limit() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.accel_limit)
  return accel_limit_;
}
inline void VFMotorCfg::set_accel_limit(float value) {
  set_has_accel_limit();
  accel_limit_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.accel_limit)
}

// optional uint32 windup_limit = 7;
inline bool VFMotorCfg::has_windup_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VFMotorCfg::set_has_windup_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VFMotorCfg::clear_has_windup_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VFMotorCfg::clear_windup_limit() {
  windup_limit_ = 0u;
  clear_has_windup_limit();
}
inline ::google::protobuf::uint32 VFMotorCfg::windup_limit() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.windup_limit)
  return windup_limit_;
}
inline void VFMotorCfg::set_windup_limit(::google::protobuf::uint32 value) {
  set_has_windup_limit();
  windup_limit_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.windup_limit)
}

// optional uint32 driver_current = 8;
inline bool VFMotorCfg::has_driver_current() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VFMotorCfg::set_has_driver_current() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VFMotorCfg::clear_has_driver_current() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VFMotorCfg::clear_driver_current() {
  driver_current_ = 0u;
  clear_has_driver_current();
}
inline ::google::protobuf::uint32 VFMotorCfg::driver_current() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.driver_current)
  return driver_current_;
}
inline void VFMotorCfg::set_driver_current(::google::protobuf::uint32 value) {
  set_has_driver_current();
  driver_current_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.driver_current)
}

// optional uint32 microstepping = 9;
inline bool VFMotorCfg::has_microstepping() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VFMotorCfg::set_has_microstepping() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VFMotorCfg::clear_has_microstepping() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VFMotorCfg::clear_microstepping() {
  microstepping_ = 0u;
  clear_has_microstepping();
}
inline ::google::protobuf::uint32 VFMotorCfg::microstepping() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.microstepping)
  return microstepping_;
}
inline void VFMotorCfg::set_microstepping(::google::protobuf::uint32 value) {
  set_has_microstepping();
  microstepping_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.microstepping)
}

// optional uint32 min = 10;
inline bool VFMotorCfg::has_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VFMotorCfg::set_has_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VFMotorCfg::clear_has_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VFMotorCfg::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 VFMotorCfg::min() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.min)
  return min_;
}
inline void VFMotorCfg::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.min)
}

// optional uint32 max = 11;
inline bool VFMotorCfg::has_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VFMotorCfg::set_has_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VFMotorCfg::clear_has_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VFMotorCfg::clear_max() {
  max_ = 0u;
  clear_has_max();
}
inline ::google::protobuf::uint32 VFMotorCfg::max() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.max)
  return max_;
}
inline void VFMotorCfg::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.max)
}

// optional uint32 offset = 12;
inline bool VFMotorCfg::has_offset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VFMotorCfg::set_has_offset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VFMotorCfg::clear_has_offset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VFMotorCfg::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 VFMotorCfg::offset() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.offset)
  return offset_;
}
inline void VFMotorCfg::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.offset)
}

// optional bool enable_pid = 13;
inline bool VFMotorCfg::has_enable_pid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VFMotorCfg::set_has_enable_pid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VFMotorCfg::clear_has_enable_pid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VFMotorCfg::clear_enable_pid() {
  enable_pid_ = false;
  clear_has_enable_pid();
}
inline bool VFMotorCfg::enable_pid() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.enable_pid)
  return enable_pid_;
}
inline void VFMotorCfg::set_enable_pid(bool value) {
  set_has_enable_pid();
  enable_pid_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.enable_pid)
}

// optional bool enable_motor = 14;
inline bool VFMotorCfg::has_enable_motor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VFMotorCfg::set_has_enable_motor() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VFMotorCfg::clear_has_enable_motor() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VFMotorCfg::clear_enable_motor() {
  enable_motor_ = false;
  clear_has_enable_motor();
}
inline bool VFMotorCfg::enable_motor() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.enable_motor)
  return enable_motor_;
}
inline void VFMotorCfg::set_enable_motor(bool value) {
  set_has_enable_motor();
  enable_motor_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.enable_motor)
}

// optional bool enable_stall_cur = 15;
inline bool VFMotorCfg::has_enable_stall_cur() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VFMotorCfg::set_has_enable_stall_cur() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VFMotorCfg::clear_has_enable_stall_cur() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VFMotorCfg::clear_enable_stall_cur() {
  enable_stall_cur_ = false;
  clear_has_enable_stall_cur();
}
inline bool VFMotorCfg::enable_stall_cur() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.enable_stall_cur)
  return enable_stall_cur_;
}
inline void VFMotorCfg::set_enable_stall_cur(bool value) {
  set_has_enable_stall_cur();
  enable_stall_cur_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.enable_stall_cur)
}

// optional bool enable_flag = 16;
inline bool VFMotorCfg::has_enable_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VFMotorCfg::set_has_enable_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VFMotorCfg::clear_has_enable_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VFMotorCfg::clear_enable_flag() {
  enable_flag_ = false;
  clear_has_enable_flag();
}
inline bool VFMotorCfg::enable_flag() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.enable_flag)
  return enable_flag_;
}
inline void VFMotorCfg::set_enable_flag(bool value) {
  set_has_enable_flag();
  enable_flag_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.enable_flag)
}

// optional bool streaming = 17;
inline bool VFMotorCfg::has_streaming() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VFMotorCfg::set_has_streaming() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VFMotorCfg::clear_has_streaming() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VFMotorCfg::clear_streaming() {
  streaming_ = false;
  clear_has_streaming();
}
inline bool VFMotorCfg::streaming() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfg.streaming)
  return streaming_;
}
inline void VFMotorCfg::set_streaming(bool value) {
  set_has_streaming();
  streaming_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCfg.streaming)
}

// -------------------------------------------------------------------

// VFMotorCfgs

// repeated .frl.device.wireformat.VFMotorCfg array = 1;
inline int VFMotorCfgs::array_size() const {
  return array_.size();
}
inline void VFMotorCfgs::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::VFMotorCfg* VFMotorCfgs::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.VFMotorCfgs.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfg >*
VFMotorCfgs::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.VFMotorCfgs.array)
  return &array_;
}
inline const ::frl::device::wireformat::VFMotorCfg& VFMotorCfgs::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCfgs.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::VFMotorCfg* VFMotorCfgs::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.VFMotorCfgs.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCfg >&
VFMotorCfgs::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.VFMotorCfgs.array)
  return array_;
}

// -------------------------------------------------------------------

// VFMotorCmd

// optional uint32 id = 1;
inline bool VFMotorCmd::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VFMotorCmd::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VFMotorCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VFMotorCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 VFMotorCmd::id() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCmd.id)
  return id_;
}
inline void VFMotorCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCmd.id)
}

// optional uint32 set_point_cnts = 2;
inline bool VFMotorCmd::has_set_point_cnts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VFMotorCmd::set_has_set_point_cnts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VFMotorCmd::clear_has_set_point_cnts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VFMotorCmd::clear_set_point_cnts() {
  set_point_cnts_ = 0u;
  clear_has_set_point_cnts();
}
inline ::google::protobuf::uint32 VFMotorCmd::set_point_cnts() const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCmd.set_point_cnts)
  return set_point_cnts_;
}
inline void VFMotorCmd::set_set_point_cnts(::google::protobuf::uint32 value) {
  set_has_set_point_cnts();
  set_point_cnts_ = value;
  // @@protoc_insertion_point(field_set:frl.device.wireformat.VFMotorCmd.set_point_cnts)
}

// -------------------------------------------------------------------

// VFMotorCmds

// repeated .frl.device.wireformat.VFMotorCmd array = 1;
inline int VFMotorCmds::array_size() const {
  return array_.size();
}
inline void VFMotorCmds::clear_array() {
  array_.Clear();
}
inline ::frl::device::wireformat::VFMotorCmd* VFMotorCmds::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:frl.device.wireformat.VFMotorCmds.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCmd >*
VFMotorCmds::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:frl.device.wireformat.VFMotorCmds.array)
  return &array_;
}
inline const ::frl::device::wireformat::VFMotorCmd& VFMotorCmds::array(int index) const {
  // @@protoc_insertion_point(field_get:frl.device.wireformat.VFMotorCmds.array)
  return array_.Get(index);
}
inline ::frl::device::wireformat::VFMotorCmd* VFMotorCmds::add_array() {
  // @@protoc_insertion_point(field_add:frl.device.wireformat.VFMotorCmds.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::frl::device::wireformat::VFMotorCmd >&
VFMotorCmds::array() const {
  // @@protoc_insertion_point(field_list:frl.device.wireformat.VFMotorCmds.array)
  return array_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wireformat
}  // namespace device
}  // namespace frl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::frl::device::wireformat::Sync_DIR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::Sync_DIR>() {
  return ::frl::device::wireformat::Sync_DIR_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::FirstPixel_LR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::FirstPixel_LR>() {
  return ::frl::device::wireformat::FirstPixel_LR_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::VFMotor_LR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::VFMotor_LR>() {
  return ::frl::device::wireformat::VFMotor_LR_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::VFMotor_Event> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::VFMotor_Event>() {
  return ::frl::device::wireformat::VFMotor_Event_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::Timer_Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::Timer_Source>() {
  return ::frl::device::wireformat::Timer_Source_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::Timer_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::Timer_Status>() {
  return ::frl::device::wireformat::Timer_Status_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::MainBoard_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::MainBoard_Status>() {
  return ::frl::device::wireformat::MainBoard_Status_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::DispDriverCfg_DispDriverMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::DispDriverCfg_DispDriverMode>() {
  return ::frl::device::wireformat::DispDriverCfg_DispDriverMode_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::TimerCfg_Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::TimerCfg_Source>() {
  return ::frl::device::wireformat::TimerCfg_Source_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::TrigCfg_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::TrigCfg_Action>() {
  return ::frl::device::wireformat::TrigCfg_Action_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::SyncCfg_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::SyncCfg_Action>() {
  return ::frl::device::wireformat::SyncCfg_Action_descriptor();
}
template <> struct is_proto_enum< ::frl::device::wireformat::SyncChCfg_DIR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frl::device::wireformat::SyncChCfg_DIR>() {
  return ::frl::device::wireformat::SyncChCfg_DIR_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_p_5fwire_5fprotocol_2eproto
